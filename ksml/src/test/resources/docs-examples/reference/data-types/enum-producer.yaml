# Demonstrates enum data type usage in KSML
streams:
  order_events:
    topic: order_events
    keyType: string
    valueType: json

functions:
  generate_order_event:
    type: generator
    resultType: (string, json)
    code: |
      order = nextOrder()
      return (order["order_id"], order)
    globalCode: |
      # Define orders with enum status values
      orders = [
        {"order_id": "ORD001", "customer": "Alice", "amount": 150.00, "status": "PENDING"},
        {"order_id": "ORD002", "customer": "Bob", "amount": 75.50, "status": "PROCESSING"},
        {"order_id": "ORD003", "customer": "Charlie", "amount": 200.00, "status": "SHIPPED"},
        {"order_id": "ORD004", "customer": "Diana", "amount": 50.00, "status": "DELIVERED"},
        {"order_id": "ORD005", "customer": "Eve", "amount": 125.00, "status": "CANCELLED"},
      ]
      
      index = 0
      done = False
      
      def nextOrder():
        global index, done
        if index >= len(orders):
          done = True
          index = 0
        order = orders[index]
        index += 1
        return order

producers:
  order_producer:
    to: order_events
    interval: 1000
    until:
      expression: done
    generator: generate_order_event