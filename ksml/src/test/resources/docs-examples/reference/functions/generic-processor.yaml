streams:
  raw_products:
    topic: raw_products
    keyType: string
    valueType: json

functions:
  calculate_price:
    type: generic
    parameters:
      - name: base_price
        type: double
      - name: discount_rate
        type: double
      - name: tax_rate
        type: double
    code: |
      # Calculate discounted price
      discount_amount = base_price * (discount_rate / 100)
      discounted_price = base_price - discount_amount
      
      # Calculate tax on discounted price  
      tax_amount = discounted_price * (tax_rate / 100)
      final_price = discounted_price + tax_amount
      
      return {
        "original_price": base_price,
        "discount_amount": discount_amount,
        "discounted_price": discounted_price,
        "tax_amount": tax_amount,
        "final_price": final_price,
        "total_savings": discount_amount
      }
    resultType: json
  
  enrich_product:
    type: valueTransformer
    code: |
      if value and "base_price" in value and "discount_rate" in value:
        # Call our generic function with custom tax rate
        price_info = calculate_price(
          base_price=value["base_price"],
          discount_rate=value["discount_rate"], 
          tax_rate=8.5
        )
        
        # Add calculated pricing to the product data
        value["pricing"] = price_info
        value["processed_at"] = "2024-01-01T00:00:00Z"
        
      return value
    resultType: json

pipelines:
  process_products:
    from: raw_products
    via:
      - type: transformValue
        mapper: enrich_product
      - type: peek
        forEach:
          code: |
            original = value["pricing"]["original_price"]
            final = value["pricing"]["final_price"]
            savings = value["pricing"]["total_savings"]
            log.info("Processed product: {} - Original: ${:.2f}, Final: ${:.2f}, Saved: ${:.2f}".format(
                     key, original, final, savings))
    to:
      topic: enriched_products
      keyType: string
      valueType: json