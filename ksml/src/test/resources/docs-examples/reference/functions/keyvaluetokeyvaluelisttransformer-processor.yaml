streams:
  batch_orders_input:
    topic: batch_orders
    keyType: string
    valueType: json
  individual_orders_output:
    topic: individual_orders
    keyType: string
    valueType: json

functions:
  split_batch_orders:
    type: keyValueToKeyValueListTransformer
    code: |
      # Split batch orders into individual orders with unique keys
      # This transforms one batch record into multiple individual order records
      if value is None or "orders" not in value:
        return []
      
      batch_id = key
      orders = value.get("orders", [])
      individual_records = []
      
      for i, order in enumerate(orders):
        # Create unique key for each individual order
        order_key = f"{batch_id}_order_{i+1}"
        
        # Create individual order record
        order_value = {
          "order_id": order_key,
          "batch_id": batch_id,
          "product": order.get("product"),
          "quantity": order.get("quantity", 1),
          "customer_email": order.get("customer_email"),
          "processing_timestamp": value.get("timestamp")
        }
        
        individual_records.append((order_key, order_value))
      
      log.info("Split batch {} into {} individual orders", batch_id, len(individual_records))
      return individual_records
    resultType: list(tuple(string, json))

pipelines:
  split_batch_processing:
    from: batch_orders_input
    via:
      - type: transformKeyValueToKeyValueList
        mapper: split_batch_orders
    to: individual_orders_output