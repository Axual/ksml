# Processor demonstrating async integration pattern

streams:
  order_events:
    topic: order_events
    keyType: string
    valueType: json
  external_requests:
    topic: external_requests
    keyType: string
    valueType: json

functions:
  filter_paid_orders:
    type: predicate
    code: |
      # Extract status from JSON order event
      if not value:
        return False
      status = value.get("status")
      # Only process 'paid' orders
      return status == "paid"
    expression: result
    
  create_external_request:
    type: keyValueTransformer
    code: |
      import time
      
      # Extract fields from JSON order event
      if not value:
        return None
        
      order_id = value.get("order_id")
      customer_id = value.get("customer_id")
      status = value.get("status")
      amount = value.get("amount")
      timestamp = value.get("timestamp")
      sequence_number = value.get("sequence_number")
      order_details = value.get("order_details", {})
      customer_info = value.get("customer_info", {})
      fulfillment = value.get("fulfillment", {})
      business_context = value.get("business_context", {})
      metadata = value.get("metadata", {})
      
      # Create comprehensive request for external payment processing system
      request_id = f"REQ_{order_id}_{timestamp}"
      
      external_request = {
        "request_id": request_id,
        "request_type": "PAYMENT_PROCESSING",
        "original_order": {
          "order_id": order_id,
          "customer_id": customer_id,
          "amount": amount,
          "timestamp": timestamp,
          "sequence_number": sequence_number
        },
        "payment_details": {
          "amount": amount,
          "currency": order_details.get("currency", "USD"),
          "payment_method": order_details.get("payment_method"),
          "customer_tier": customer_info.get("customer_tier"),
          "loyalty_points": customer_info.get("loyalty_points")
        },
        "processing_context": {
          "priority": business_context.get("priority", "normal"),
          "high_value": business_context.get("high_value", False),
          "customer_previous_orders": customer_info.get("previous_orders", 0),
          "order_source": order_details.get("order_source")
        },
        "async_metadata": {
          "correlation_id": metadata.get("correlation_id", f"corr_{request_id}"),
          "created_at": int(time.time() * 1000),
          "timeout_ms": 30000,  # 30 second timeout
          "retry_count": 0,
          "expected_response_topic": "external_responses"
        },
        "external_system_info": {
          "target_system": "payment_processor",
          "api_version": "v2.1",
          "request_format": "async_json",
          "callback_required": True
        }
      }
      
      log.info("Created external payment request for order {}: amount=${:.2f}, priority={}", 
               order_id, amount, business_context.get("priority", "normal"))
      
      return (request_id, external_request)
      
    expression: result
    resultType: (string, json)

  process_external_response:
    type: valueTransformer 
    globalCode: |
      import time
      import random
    code: |
      # Simulate processing external system response
      # In real scenario, this would come from external system response topic
      
      if not value:
        return None
      
      # Extract request information
      request_id = value.get("request_id")
      request_type = value.get("request_type")
      original_order = value.get("original_order", {})
      payment_details = value.get("payment_details", {})
      processing_context = value.get("processing_context", {})
      async_metadata = value.get("async_metadata", {})
      
      # Simulate external system processing with realistic delays and outcomes
      processing_time_ms = random.randint(100, 2000)  # 0.1 to 2 seconds
      success_rate = 0.9 if processing_context.get("high_value") else 0.95
      is_successful = random.random() < success_rate
      
      current_timestamp = int(time.time() * 1000)
      
      # Create comprehensive response
      response_data = {
        "response_id": f"RESP_{request_id}_{current_timestamp}",
        "request_id": request_id,
        "response_type": "PAYMENT_PROCESSING_RESULT",
        "status": "success" if is_successful else "failed",
        "original_request": {
          "order_id": original_order.get("order_id"),
          "customer_id": original_order.get("customer_id"),
          "amount": payment_details.get("amount"),
          "request_timestamp": original_order.get("timestamp")
        },
        "processing_result": {
          "transaction_id": f"TXN_{current_timestamp}_{random.randint(1000, 9999)}" if is_successful else None,
          "authorization_code": f"AUTH_{random.randint(100000, 999999)}" if is_successful else None,
          "processing_status": "approved" if is_successful else "declined",
          "reason_code": "000" if is_successful else random.choice(["051", "061", "065", "075"]),
          "reason_message": "Transaction approved" if is_successful else random.choice([
            "Insufficient funds", "Invalid card", "Expired card", "Fraud suspected"
          ])
        },
        "financial_details": {
          "processed_amount": payment_details.get("amount") if is_successful else 0.0,
          "currency": payment_details.get("currency", "USD"),
          "fee_amount": round(payment_details.get("amount", 0) * 0.029, 2) if is_successful else 0.0,  # 2.9% fee
          "settlement_date": current_timestamp + 86400000 if is_successful else None  # Next day
        },
        "system_metadata": {
          "external_system": "payment_processor_v2.1",
          "processing_time_ms": processing_time_ms,
          "processed_at": current_timestamp,
          "correlation_id": async_metadata.get("correlation_id"),
          "retry_attempt": async_metadata.get("retry_count", 0) + 1,
          "final_response": True
        },
        "business_context": {
          "customer_impact": "order_confirmed" if is_successful else "order_cancelled",
          "requires_notification": True,
          "follow_up_actions": ["send_confirmation_email", "update_inventory"] if is_successful else ["send_decline_email", "release_inventory"],
          "priority_level": processing_context.get("priority", "normal")
        }
      }
      
      log.info("Processed external system response for order {}: status={}, amount=${:.2f}", 
               original_order.get("order_id"), response_data["status"], payment_details.get("amount", 0))
      
      return response_data
      
    expression: result
    resultType: json

pipelines:
  # Send requests to external system
  external_request_pipeline:
    from: order_events
    via:
      - type: filter
        if: filter_paid_orders
      - type: transformKeyValue
        mapper: create_external_request
    to:
      topic: external_requests
      keyType: string
      valueType: json

  # Process responses from external system (mock processing)
  external_response_pipeline:
    from: external_requests
    via:
      - type: mapValues
        mapper: process_external_response
    to:
      topic: external_responses
      keyType: string
      valueType: json