# Producer for state store optimization demo - generates user activity metrics

functions:
  generate_user_activity:
    type: generator
    globalCode: |
      import random
      import time
      activity_counter = 0
      user_ids = [f"user_{i:03d}" for i in range(1, 21)]  # 20 users for state demo
      activities = ["login", "page_view", "click", "purchase", "logout"]
    code: |
      global activity_counter, user_ids, activities
      
      activity_counter += 1
      user_id = random.choice(user_ids)
      activity = random.choice(activities)
      
      # Create activity with metrics that need aggregation
      activity_data = {
        "activity_type": activity,
        "score": random.randint(1, 100),
        "timestamp": int(time.time() * 1000),
        "session_id": f"sess_{hash(user_id) % 10:02d}",
        "duration_ms": random.randint(100, 5000)
      }
      
    expression: (user_id, activity_data)
    resultType: (string, json)

producers:
  user_activity_producer:
    generator: generate_user_activity
    interval: 1s
    to:
      topic: user_activity
      keyType: string
      valueType: json