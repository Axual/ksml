# Processor for fraud detection - analyzes transaction patterns

streams:
  credit_card_transactions:
    topic: credit_card_transactions
    keyType: string
    valueType: json

stores:
  transaction_history:
    type: keyValue
    keyType: string
    valueType: string
    persistent: true
    caching: true

functions:
  detect_fraud:
    type: valueTransformer
    stores:
      - transaction_history
    code: |
      import json
      import time
      
      # Extract fields from JSON transaction
      if not value:
        return None
      
      amount = value.get("amount")
      merchant = value.get("merchant")
      location = value.get("location")
      timestamp = value.get("timestamp")
      transaction_id = value.get("transaction_id")
      merchant_category = value.get("merchant_category")
      transaction_type = value.get("transaction_type")
      channel = value.get("channel")
      
      if amount is None or merchant is None or location is None or timestamp is None:
        return None
      
      # Get transaction history
      history_json = transaction_history.get(key)
      if history_json:
        history = json.loads(history_json)
      else:
        history = {"last_location": location, "last_time": timestamp, "txn_count": 0, "total_amount": 0}
      
      # Check for fraud patterns
      fraud_score = 0
      fraud_reasons = []
      fraud_patterns = []
      
      # Pattern 1: High amount transaction
      if amount > 5000:
        fraud_score += 40
        fraud_reasons.append(f"high_amount:{amount:.2f}")
        fraud_patterns.append({
          "type": "HIGH_AMOUNT",
          "details": {"amount": amount, "threshold": 5000},
          "risk_weight": 40
        })
      
      # Pattern 2: Rapid transactions (within 60 seconds)
      time_diff = timestamp - history["last_time"]
      if time_diff < 60000 and history["txn_count"] > 0:
        fraud_score += 30
        fraud_reasons.append(f"rapid_txn:{time_diff}ms")
        fraud_patterns.append({
          "type": "RAPID_TRANSACTION",
          "details": {"time_difference_ms": time_diff, "threshold_ms": 60000},
          "risk_weight": 30
        })
      
      # Pattern 3: Location change
      if history["last_location"] != location and time_diff < 3600000:  # Within 1 hour
        fraud_score += 20
        fraud_reasons.append(f"location_change:{history['last_location']}->{location}")
        fraud_patterns.append({
          "type": "LOCATION_CHANGE",
          "details": {
            "previous_location": history["last_location"],
            "current_location": location,
            "time_difference_ms": time_diff,
            "threshold_ms": 3600000
          },
          "risk_weight": 20
        })
      
      # Pattern 4: Suspicious merchant
      if merchant in ["luxury_goods", "online_gambling", "crypto_exchange"]:
        fraud_score += 20
        fraud_reasons.append(f"suspicious_merchant:{merchant}")
        fraud_patterns.append({
          "type": "SUSPICIOUS_MERCHANT",
          "details": {"merchant": merchant, "merchant_category": merchant_category},
          "risk_weight": 20
        })
      
      # Update history
      history["last_location"] = location
      history["last_time"] = timestamp
      history["txn_count"] += 1
      history["total_amount"] += amount
      transaction_history.put(key, json.dumps(history))
      
      # Generate structured alert if fraud score is high
      result = None
      if fraud_score >= 50:
        log.warn("FRAUD ALERT for card {}: score={}, reasons={}", key, fraud_score, fraud_reasons)
        result = {
          "alert_type": "FRAUD_ALERT",
          "status": "HIGH_RISK",
          "card_number": key,
          "fraud_score": fraud_score,
          "severity": "CRITICAL",
          "transaction": {
            "transaction_id": transaction_id,
            "amount": amount,
            "merchant": merchant,
            "merchant_category": merchant_category,
            "location": location,
            "timestamp": timestamp,
            "transaction_type": transaction_type,
            "channel": channel
          },
          "fraud_patterns": fraud_patterns,
          "risk_analysis": {
            "total_score": fraud_score,
            "threshold_exceeded": "HIGH_RISK",
            "patterns_detected": len(fraud_patterns),
            "recommendation": "BLOCK_TRANSACTION"
          },
          "detection_timestamp": int(time.time() * 1000),
          "cardholder_history": {
            "previous_location": history.get("last_location"),
            "transaction_count": history.get("txn_count", 0) + 1,
            "total_spending": history.get("total_amount", 0) + amount
          }
        }
      elif fraud_score >= 30:
        log.info("Suspicious transaction for {}: score={}", key, fraud_score)
        result = {
          "alert_type": "SUSPICIOUS_TRANSACTION",
          "status": "MEDIUM_RISK",
          "card_number": key,
          "fraud_score": fraud_score,
          "severity": "WARNING",
          "transaction": {
            "transaction_id": transaction_id,
            "amount": amount,
            "merchant": merchant,
            "merchant_category": merchant_category,
            "location": location,
            "timestamp": timestamp,
            "transaction_type": transaction_type,
            "channel": channel
          },
          "fraud_patterns": fraud_patterns,
          "risk_analysis": {
            "total_score": fraud_score,
            "threshold_exceeded": "MEDIUM_RISK",
            "patterns_detected": len(fraud_patterns),
            "recommendation": "REVIEW_REQUIRED"
          },
          "detection_timestamp": int(time.time() * 1000),
          "cardholder_history": {
            "previous_location": history.get("last_location"),
            "transaction_count": history.get("txn_count", 0) + 1,
            "total_spending": history.get("total_amount", 0) + amount
          }
        }
      
      return result
      
    expression: result if result else None
    resultType: json

pipelines:
  fraud_detection_pipeline:
    from: credit_card_transactions
    via:
      - type: mapValues
        mapper: detect_fraud
      - type: filter
        if:
          expression: value is not None
    to:
      topic: fraud_alerts
      keyType: string
      valueType: json