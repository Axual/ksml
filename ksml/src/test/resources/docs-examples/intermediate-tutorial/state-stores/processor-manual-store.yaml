# Manual state store access example
# Demonstrates how to directly access state stores in functions for enrichment and caching

streams:
  user_events_input:
    topic: user_events
    keyType: string
    valueType: json
    offsetResetPolicy: latest
    
  enriched_events:
    topic: enriched_user_events
    keyType: string
    valueType: json

stores:
  user_profile_cache:
    name: user_profile_cache
    type: keyValue
    keyType: string
    valueType: json
    persistent: true
    logging: true
    retention: 1h

functions:
  enrich_and_cache:
    type: valueTransformer
    code: |
      # Get cached data for this user
      cached_data = user_profile_cache.get(key)
      
      # Log the state access
      if cached_data is not None:
        log.info("Found cached data for user: {}", key)
      else:
        log.info("No cached data found for user: {}", key)
      
      # Store the current event data in cache
      user_profile_cache.put(key, value)
      
      # Create enriched result
      result = {
        "event_id": value.get("event_id"),
        "user_id": value.get("user_id"),
        "action": value.get("action"),
        "timestamp": value.get("timestamp"),
        "has_cached_data": cached_data is not None
      }
      
      # Copy product fields if present
      if value.get("product") is not None:
        result["product"] = value.get("product")
        result["price"] = value.get("price")
    expression: result
    resultType: json
    stores:
      - user_profile_cache

pipelines:
  enrich_user_events:
    from: user_events_input
    via:
      - type: transformValue
        mapper: enrich_and_cache
      
      - type: peek
        forEach:
          code: |
            log.info("ENRICHED EVENT - User: {}, Action: {}, Has Cached Data: {}", 
                     key, 
                     value.get("action"),
                     value.get("has_cached_data"))
    
    to: enriched_events