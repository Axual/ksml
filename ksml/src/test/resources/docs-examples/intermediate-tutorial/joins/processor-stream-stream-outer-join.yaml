streams:
  user_logins:
    topic: user_login_events
    keyType: string
    valueType: json

  user_logouts:
    topic: user_logout_events
    keyType: string
    valueType: json

  session_analysis:
    topic: user_session_analysis
    keyType: string
    valueType: json

functions:
  analyze_user_session:
    type: valueJoiner
    globalCode: |
      import time
    code: |
      # Outer join: capture login-only, logout-only, and matched events
      result = {}
      
      # Determine session type based on what data is available
      if value1 is not None and value2 is not None:
        # Both login and logout available - complete session
        result = {
          "session_type": "COMPLETE",
          "user_id": value1.get("user_id"),
          "login_event": value1,
          "logout_event": value2,
          "session_duration": value2.get("session_duration"),
          "device": value1.get("device"),
          "login_time": value1.get("login_time"),
          "logout_time": value2.get("logout_time")
        }
      elif value1 is not None:
        # Login only - user still active or logout not captured
        result = {
          "session_type": "LOGIN_ONLY",
          "user_id": value1.get("user_id"),
          "login_event": value1,
          "logout_event": None,
          "device": value1.get("device"),
          "login_time": value1.get("login_time"),
          "status": "active_or_missing_logout"
        }
      elif value2 is not None:
        # Logout only - login not captured or user was already logged in
        result = {
          "session_type": "LOGOUT_ONLY",
          "user_id": value2.get("user_id"),
          "login_event": None,
          "logout_event": value2,
          "session_duration": value2.get("session_duration"),
          "logout_time": value2.get("logout_time"),
          "status": "missing_login_or_already_active"
        }
      
      # Add analysis metadata
      result["analyzed_at"] = int(time.time() * 1000)
      
      new_value = result
    expression: new_value
    resultType: json

pipelines:
  analyze_user_sessions:
    from: user_logins
    via:
      # Outer join to capture all login and logout events
      - type: outerJoin
        stream: user_logouts
        valueJoiner: analyze_user_session
        timeDifference: 10m  # Look for logouts within 10 minutes of login
        grace: 2m  # Grace period for late events
        thisStore:
          name: login_session_store
          type: window
          windowSize: 20m  # Must be 2*timeDifference
          retention: 22m   # Must be 2*timeDifference + grace
          retainDuplicates: true
        otherStore:
          name: logout_session_store
          type: window
          windowSize: 20m  # Must be 2*timeDifference
          retention: 22m   # Must be 2*timeDifference + grace
          retainDuplicates: true
      - type: peek
        forEach:
          code: log.info("SESSION ANALYSIS - user={}, type={}, device={}, duration={}s", key, value.get("session_type"), value.get("device", "N/A"), value.get("session_duration", "N/A"))
    to: session_analysis