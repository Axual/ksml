streams:
  orders:
    topic: new_orders
    keyType: string  # Order ID
    valueType: json  # Order details

  enriched_orders:
    topic: orders_with_customer_data
    keyType: string  # Order ID
    valueType: json  # Combined order and customer data

tables:
  customers:
    topic: customer_data
    keyType: string  # Customer ID
    valueType: json  # Customer details

functions:
  extract_customer_id:
    type: keyTransformer
    code: |
      # Extract customer_id from order to use as key for join
      new_key = value.get("customer_id") if value else None
    expression: new_key
    resultType: string

  join_order_with_customer:
    type: valueJoiner
    code: |
      # Combine order and customer information
      result = {}

      # Add order details
      if value1 is not None:
        result.update(value1)

      # Add customer details
      if value2 is not None:
        result["customer"] = value2

      new_value = result
    expression: new_value
    resultType: json
    
  restore_order_key:
    type: keyTransformer
    code: |
      # Restore order_id as key after join
      new_key = value.get("order_id") if value else None
    expression: new_key
    resultType: string

pipelines:
  enrich_orders:
    from: orders
    via:
      # Rekey to customer_id for join
      - type: transformKey
        mapper: extract_customer_id
      # Join with customers table
      - type: join
        table: customers
        valueJoiner: join_order_with_customer
      # Rekey back to order_id
      - type: transformKey
        mapper: restore_order_key
      - type: peek
        forEach:
          code: log.info("ENRICHED ORDER - key={}, order_id={}, customer={}", key, value.get("order_id"), value.get("customer", {}).get("name"))
    to: enriched_orders