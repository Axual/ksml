streams:
  payment_stream:
    topic: payment_stream
    keyType: string  # customer_id
    valueType: json  # payment details with amount field
    
  payment_statistics:
    topic: payment_statistics
    keyType: string
    valueType: json

functions:
  init_stats:
    type: initializer
    resultType: json
    code: |
      # Initialize statistics
      return {
        "count": 0,
        "total_amount": 0.0,
        "min_amount": None,
        "max_amount": None
      }

  update_stats:
    type: aggregator
    resultType: json
    code: |
      # Update payment statistics
      if value and aggregatedValue:
        amount = value.get("amount", 0.0)
        count = aggregatedValue.get("count", 0) + 1
        total_amount = aggregatedValue.get("total_amount", 0.0) + amount

        current_min = aggregatedValue.get("min_amount")
        current_max = aggregatedValue.get("max_amount")

        if current_min is None or amount < current_min:
          min_amount = amount
        else:
          min_amount = current_min

        if current_max is None or amount > current_max:
          max_amount = amount
        else:
          max_amount = current_max

        return {
          "count": count,
          "total_amount": total_amount,
          "min_amount": min_amount,
          "max_amount": max_amount,
          "average_amount": round(total_amount / count, 2)
        }
      return aggregatedValue

pipelines:
  calculate_statistics:
    from: payment_stream
    via:
      - type: groupByKey
      - type: aggregate
        initializer: init_stats
        aggregator: update_stats
        store:
          name: payment_stats_store
          type: keyValue
          keyType: string
          valueType: json
          retention: 1h
          caching: false
      - type: toStream
      - type: peek
        forEach:
          code: |
            if value:
              count = value.get("count", 0)
              total = round(value.get("total_amount", 0), 2)
              avg = value.get("average_amount", 0)
              min_amt = value.get("min_amount", 0)
              max_amt = value.get("max_amount", 0)
              log.info("Customer {} - Count: {}, Total: ${}, Avg: ${}, Min: ${}, Max: ${}", 
                       key, count, total, avg, min_amt, max_amt)
    to: payment_statistics