streams:
  input_stream:
    topic: tutorial_input
    keyType: string
    valueType: json
  output_stream:
    topic: filtered_data
    keyType: string
    valueType: json
  error_stream:
    topic: alerts_stream
    keyType: string
    valueType: json

functions:
  safe_transform:
    type: keyValueMapper
    code: |
      import json
      try:
        # Safely extract nested sensor data
        sensors = value.get('sensors', {})
        temperature_data = sensors.get('temperature', {})
      
        # Check if temperature exists and has a value
        if not temperature_data or 'value' not in temperature_data:
          error_msg = {
            "error": "Missing temperature data",
            "device_id": key,
            "original": value,
            "status": "error"
          }
          new_key = key
          new_value = error_msg
        else:
          # Extract values safely
          temp_f = temperature_data.get('value')
          temp_unit = temperature_data.get('unit', 'F')
      
          # Only convert if unit is Fahrenheit
          if temp_unit == 'F':
            temp_c = round((temp_f - 32) * 5/9, 2)
          else:
            temp_c = temp_f  # Assume it's already in Celsius
      
          # Build successful result
          result = {
            "device_id": key,
            "temperature_f": temp_f,
            "temperature_c": temp_c,
            "humidity": sensors.get('humidity', {}).get('value'),
            "timestamp": value.get('metadata', {}).get('timestamp'),
            "status": "processed"
          }
          new_key = key
          new_value = result
      
      except Exception as e:
        # Catch any unexpected errors
        error_msg = {
          "error": f"Transformation error: {str(e)}",
          "device_id": key,
          "original": value,
          "status": "error"
        }
        new_key = key
        new_value = error_msg
    expression: (new_key, new_value)
    resultType: (string, json)

pipelines:
  robust_transformation:
    from: input_stream
    via:
      - type: map
        mapper: safe_transform
    branch:
      - if:
          expression: value.get('status') == 'processed'
        to: output_stream
      - if:
          expression: value.get('status') == 'error'
        to: error_stream