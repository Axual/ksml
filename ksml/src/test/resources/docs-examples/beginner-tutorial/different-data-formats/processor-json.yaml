streams:
  json_input:
    topic: sensor_data_json_raw
    keyType: string
    valueType: json
    offsetResetPolicy: latest

  json_output:
    topic: sensor_data_json_processed
    keyType: string
    valueType: json

functions:
  add_processing_info:
    type: keyValueTransformer
    code: |
      # Simple transformation: add processing info
      import time
      new_value = dict(value) if value else {}
      new_value["processed"] = True
      new_value["processed_at"] = str(int(time.time() * 1000))
      new_key = f"processed_{key}"
    expression: (new_key, new_value)
    resultType: (string, json)

pipelines:
  json_processing_pipeline:
    from: json_input
    via:
      # Transform both key and value
      - type: transformKeyValue
        mapper: add_processing_info

      # Log the transformed data
      - type: peek
        forEach:
          code: |
            log.info("Transformed: key={}, sensor={}, processed_at={}",
                    key, value.get("name"), value.get("processed_at"))

    to: json_output