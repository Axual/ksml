streams:
  avro_sensor_stream:
    topic: sensor_readings
    keyType: string
    valueType: avro:SensorData
    offsetResetPolicy: latest

  json_config_stream:
    topic: device_config
    keyType: string
    valueType: json
    offsetResetPolicy: latest

  combined_output:
    topic: combined_sensor_data
    keyType: string
    valueType: json

functions:
  add_avro_source:
    type: valueTransformer
    resultType: json
    code: |
      result = dict(value) if value else {}
      result["source_format"] = "Avro"
      return result

  transform_json_to_sensor:
    type: valueTransformer
    resultType: json
    code: |
      return {
        "name": key,
        "type": "CONFIG",
        "threshold": value.get("threshold"),
        "alert_level": value.get("alert_level"),
        "source_format": "JSON"
      }

pipelines:
  # Pipeline 1: Process Avro data and convert to JSON
  avro_processing:
    from: avro_sensor_stream
    via:
      # Log Avro input
      - type: peek
        forEach:
          code: |
            log.info("Avro sensor: name={}, type={}, value={}{}",
                    value.get("name"), value.get("type"),
                    value.get("value"), value.get("unit"))

      # Add a source field to identify the format
      - type: transformValue
        mapper: add_avro_source

    to: combined_output

  # Pipeline 2: Process JSON config data
  json_processing:
    from: json_config_stream
    via:
      # Log JSON input
      - type: peek
        forEach:
          code: |
            log.info("JSON config: device={}, threshold={}, alert={}",
                    key, value.get("threshold"), value.get("alert_level"))

      # Transform to sensor-like format with source field
      - type: transformValue
        mapper: transform_json_to_sensor

    to: combined_output
