package io.axual.ksml.data.notation.json;

/*-
 * ========================LICENSE_START=================================
 * KSML
 * %%
 * Copyright (C) 2021 - 2023 Axual B.V.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */

import io.axual.ksml.data.mapper.DataObjectMapper;
import io.axual.ksml.data.mapper.NativeDataObjectMapper;
import io.axual.ksml.data.notation.string.StringMapper;
import io.axual.ksml.data.object.DataObject;
import io.axual.ksml.data.type.DataType;

/**
 * Maps between JSON text and KSML DataObject using a two-step process:
 * <ul>
 *   <li>JsonStringMapper to convert String <-> native Java object graph (Map/List/primitives)</li>
 *   <li>NativeDataObjectMapper to convert native graph <-> DataObject according to an expected DataType</li>
 * </ul>
 *
 * <p>This mapper intentionally contains no business logic beyond delegating to these two mappers.
 * It is used by JSON notation components (eg. JsonSerde, JsonDataObjectConverter) as the String boundary.</p>
 */
public class JsonDataObjectMapper implements DataObjectMapper<String> {
    private final StringMapper<Object> stringMapper;
    private final NativeDataObjectMapper nativeMapper;

    /**
     * Creates a JSON DataObject mapper.
     *
     * @param prettyPrint when true, JSON generated by {@link #fromDataObject(DataObject)} is formatted
     */
    public JsonDataObjectMapper(boolean prettyPrint) {
        stringMapper = new JsonStringMapper(prettyPrint);
        nativeMapper = new NativeDataObjectMapper();
    }

    /**
     * Parses JSON text into a {@link DataObject} using the expected DataType for guidance.
     *
     * <p>Flow: String -> native (JsonStringMapper) -> DataObject (NativeDataObjectMapper).</p>
     *
     * @param expected the expected DataType (may be null)
     * @param value JSON text (may be null)
     * @return a DataObject representation, possibly DataNull when input is null
     */
    @Override
    public DataObject toDataObject(DataType expected, String value) {
        var object = stringMapper.fromString(value);
        return nativeMapper.toDataObject(expected, object);
    }

    /**
     * Serializes a {@link DataObject} to JSON text.
     *
     * <p>Flow: DataObject -> native (NativeDataObjectMapper) -> String (JsonStringMapper).</p>
     *
     * @param value DataObject to serialize (may be null)
     * @return JSON text or null
     */
    @Override
    public String fromDataObject(DataObject value) {
        var object = nativeMapper.fromDataObject(value);
        return stringMapper.toString(object);
    }
}
