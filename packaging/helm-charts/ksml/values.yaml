# Default values for ksml.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # -- Registry to pull the image from and the name of the image.
  repository: docker.io/axual/ksml
  # -- One of `Always`, `IfNotPresent`, or `Never`.
  pullPolicy: IfNotPresent
  # -- Override the image tag whose default is the chart `appVersion`.
  tag: ""

# -- Override the list of ImagePullSecrets provided.
imagePullSecrets: []
# -- Override the app name generated by the chart.
nameOverride: ""
# -- Override the fully qualified app name generated by the chart.
fullnameOverride: ""

# KSML runner configuration. See https://axual.github.io/ksml/runners.html
ksmlRunnerConfig: {}
  # configDirectory: /ksml
  # schemaDirectory: /ksml
  # storageDirectory: /ksml
  # definitions:
  # - my-definition.yaml
  # kafka:
  #   bootstrap.servers: "localhost:9092"

# Kafka streams topology definitions. See https://axual.github.io/ksml/introduction.html
ksmlDefinitions: {}
  # my-definition.yaml: |
  #   ...

# Schema definitions. See https://github.com/Axual/ksml/tree/main/examples
schemaDefinitions: {}
  # my-schema.avsc: |
  #   ...

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Extra annotations to add to the Pods.
podAnnotations: {}

# -- Extra labels to add to the Pods.
podLabels: {}

# -- Pod-level security attributes and common container settings.
podSecurityContext: {}
  # fsGroup: 2000

# -- Defines the security options the container should be run with.
# If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
# @default -- See `values.yaml` file.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  # -- Enable creation of the Ingress resource to expose this service.
  enabled: false
  # -- The name of the IngressClass cluster resource.
  # The associated IngressClass defines which controller will implement the resource.
  className: ""
  # -- Annotations to add to the Ingress resource.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- TLS configuration for this Ingress.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Selector which must match a node's labels for the pod to be scheduled on that node.
nodeSelector: {}

# -- The tolerations on this pod. See the Kubernetes documentation on [Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
tolerations: []

# -- The pod's scheduling constraints. See the Kubernetes documentation on [Affinity and Anti-affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity).
affinity: {}

# -- Describes how a group of pods ought to spread across topology domains. See the Kubernetes documentation on [Pod Topology Spread Constraints](https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/).
topologySpreadConstraints: []

# -- KSML application server port defined in the statefulset. Note that this must match the port defined in ksmlRunnerConfig.
applicationServer:
  # -- Port on which Application server should be initialized
  port: "8080"

# -- KSML prometheus server port defined in the statefulset. Note that this must match the port defined in ksmlRunnerConfig.
prometheus:
  # -- Port on which Prometheus metrics endpoint should be initialized
  port: "9999"

serviceMonitor:
  # -- Enables creation of Prometheus Operator [ServiceMonitor](https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.ServiceMonitor).
  # Ignored if API `monitoring.coreos.com/v1` is not available.
  enabled: true
  # -- Interval at which metrics should be scraped.
  interval: 30s
  # -- Timeout after which the scrape is ended.
  scrapeTimeout: 10s
  # -- Additional labels for the ServiceMonitor
  labels: {}
