# Default values for ksml.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # -- Registry to pull the image from and the name of the image.
  repository: docker.io/axual/ksml
  # -- One of `Always`, `IfNotPresent`, or `Never`.
  pullPolicy: IfNotPresent
  # -- Override the image tag whose default is the chart `appVersion`.
  tag: ""

# -- Override the list of ImagePullSecrets provided.
imagePullSecrets: []
# -- Override the app name generated by the chart.
nameOverride: ""
# -- Override the fully qualified app name generated by the chart.
fullnameOverride: ""

# -- KSML runner configuration. See https://axual.github.io/ksml/runners.html
ksmlRunnerConfig:
  # -- Directory containing KSML Definition files. This should only be changed if an external volume mount is used.
  definitionDirectory: '/ksml'
  # -- Directory containing the Schema files. This should only be changed if an external volume mount is used.
  schemaDirectory: '/ksml'

  # -- KSML Error handling settings. Error Handling can be defined for consume, produce and processing errors.
  errorHandling:
    # -- Error handling settings for consume related errors
    consume:
      # -- log a message when consume errors occur
      log: true
      # -- Add the record payload to the log message
      logPayload: false
      # -- Specify the name of the logger to use
      loggerName: ConsumeError
      # -- Should the KSML application stop when a consume error occurs
      stopOnError: true
    # -- Error handling settings for produce related errors
    produce:
      # -- log a message when produce errors occur
      log: true
      # -- Add the record payload to the log message
      logPayload: false
      # -- Specify the name of the logger to use
      loggerName: ProduceErrpr
      # -- Should the KSML application stop when a consume error occurs
      stopOnError: true
    # -- Error handling settings for processing related errors
    process:
      # -- log a message when processing errors occur
      log: true
      # -- Add the record payload to the log message
      logPayload: false
      # -- Specify the name of the logger to use
      loggerName: ProcessError
      # -- Should the KSML application stop when a consume error occurs
      stopOnError: true

  # -- Data generation can be disabled for deployments to prevent accidental test data in non test environments
  producersEnabled: true
  # -- Pipelines can be disabled allow for data generation only deployments.
  pipelinesEnabled: true

  # -- Map of the namespace and the KSML definition file executed in that namespace.
  definitions: {}
  # -- Map of Kafka connection properties and application id
  kafka:
  # kafka:
  #   application.id: my-streaming-app
  #   bootstrap.servers: "localhost:9092"

# KSML Pipeline or Producer definition files. See https://axual.github.io/ksml/introduction.html
ksmlDefinitions: {}
  # my-definition.yaml: |
  #   ...

# Schema definitions files. See https://github.com/Axual/ksml/tree/main/examples
schemaDefinitions: {}
  # my-schema.avsc: |
  #   ...

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Extra annotations to add to the Pods.
podAnnotations: {}

# -- Extra labels to add to the Pods.
podLabels: {}

# -- Pod-level security attributes and common container settings.
podSecurityContext: {}
  # fsGroup: 2000

# -- Defines the security options the container should be run with.
# If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
# @default -- See `values.yaml` file.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  # -- Enable creation of the Ingress resource to expose this service.
  enabled: false
  # -- The name of the IngressClass cluster resource.
  # The associated IngressClass defines which controller will implement the resource.
  className: ""
  # -- Annotations to add to the Ingress resource.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- TLS configuration for this Ingress.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: "1000m"
  #   memory: "768Mi"
  # requests:
  #   cpu: "500m"
  #   memory: "128Mi"

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Selector which must match a node's labels for the pod to be scheduled on that node.
nodeSelector: {}

# -- The tolerations on this pod. See the Kubernetes documentation on [Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
tolerations: []

# -- The pod's scheduling constraints. See the Kubernetes documentation on [Affinity and Anti-affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity).
affinity: {}

# -- Describes how a group of pods ought to spread across topology domains. See the Kubernetes documentation on [Pod Topology Spread Constraints](https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/).
topologySpreadConstraints: []

# -- KSML application server port defined in the statefulset.
applicationServer:
  # -- Start an application server for the component
  enabled: false
  # -- Port on which Application server should be initialized
  port: "8080"

# -- Logging configuration settings for KSML.
logging:
  # -- Location of the logging configuration file
  configFile: '/ksml-logging/logback.xml'
  # -- Enable JSON logging
  jsonEnabled: false
  # -- The logback log pattern to use
  patterns:
    stdout: '%date{"yyyy-MM-dd''T''HH:mm:ss,SSSXXX", UTC} [%t] %-5level %logger{36} - %msg%n'
    stderr: '%date{"yyyy-MM-dd''T''HH:mm:ss,SSSXXX", UTC} [%t] %-5level %logger{36} - %msg%n'
  # -- The default log level to use for all loggers
  rootLogLevel: INFO
  # -- Specify log levels for specific loggers.
  loggers: {}
  # -- Specify default loggers set for all deployments to minimize excessive logging
  defaultLoggers:
    io.axual.ksml: INFO
    org.apache.kafka: WARN
    org.apache.kafka.clients.consumer.ConsumerConfig: WARN
    org.apache.kafka.clients.producer.ProducerConfig: WARN
    org.apache.kafka.clients.admin.AdminClientConfig: WARN
    org.apache.kafka.streams.StreamsConfig: WARN
    io.confluent: WARN

# -- Configure the storage specification for the volumeClaimTemplates
store:
  spec:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 1Gi

# -- KSML prometheus server port defined in the statefulset. Note that this must match the port defined in ksmlRunnerConfig.
prometheus:
  enabled: false
  # -- Port on which Prometheus metrics endpoint should be initialized
  port: "9999"
  # -- Contents of the JMX exporter config file
  config:
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    rules:
      - pattern: 'ksml<type=app-info, app-id=(.+), app-name=(.+), app-version=(.+), build-time=(.+)>Value:'
        name: ksml_app
        labels:
          app_id: "$1"
          name: "$2"
          version: "$3"
          build_time: "$4"
        type: GAUGE
        value: 1
        cached: true
      - pattern: 'ksml<type=user_defined_counter, .*>'
        type: COUNTER
      - pattern: 'ksml<type=.+, .*>'
        type: GAUGE
      - pattern: 'kafka.streams<type=stream-(.+-)?metrics, .*>'
        type: GAUGE
      - pattern: 'kafka.producer<type=producer-(.+-)?metrics, .*>'
        type: GAUGE
      - pattern: 'kafka.consumer<type=consumer-(.+-)?metrics, .*>'
        type: GAUGE
      - pattern: 'kafka.admin.client<type=admin-client-(.+-)?metrics, .*>'
        type: GAUGE
      - pattern: 'java.lang<type=OperatingSystem><>(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:'
        name: os_$1_bytes
        type: GAUGE
        attrNameSnakeCase: true
      - pattern: 'java.lang<type=OperatingSystem><>((?!process_cpu_time)\w+):'
        name: os_$1
        type: GAUGE
        attrNameSnakeCase: true

    

serviceMonitor:
  # -- Enables creation of Prometheus Operator [ServiceMonitor](https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.ServiceMonitor).
  # Ignored if API `monitoring.coreos.com/v1` is not available.
  enabled: true
  # -- Interval at which metrics should be scraped.
  interval: 30s
  # -- Timeout after which the scrape is ended.
  scrapeTimeout: 10s
  # -- Additional labels for the ServiceMonitor
  labels: {}
