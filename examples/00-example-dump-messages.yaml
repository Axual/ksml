# $schema: https://axual.github.io/ksml/latest/ksml-language-spec.json

# This example shows how to read from a binary stream, manipulate specific bytes and output
# messages on a target stream. For validation purposes a second pipeline outputs the manipulated
# results.

# Concrete use case for this manipulation can be the manual override of a schema id, when the source
# message contains a schema id that is not locally recognized. By changing bytes 1-4 in the value,
# one can override the schema id for further downstream processing.

# Yes, this is hacky, but it may serve a purpose for cases where binary message copies are made from
# remote Kafka clusters with their own (possibly conflicting) schema ids.

streams:
  source:
    topic: ksml_sensordata_avro
    keyType: bytes
    valueType: bytes
    offsetResetPolicy: latest

pipelines:
  main:
    from: source
    via:
      - type: transformMetadata
        mapper:
          globalCode: |
            from datetime import datetime
            def to_hex(value):
              return "[" + ", ".join(f'{x:02X}' for x in value) + "]" if value is not None else "null"
          code: |
            del metadata["@schema"]
            del metadata["@type"]
            key = to_hex(key)
            value = to_hex(value)
            dt = datetime.fromtimestamp(metadata["timestamp"]/1000)
            if isinstance(metadata["headers"], list):
              headers = dict()
              for header in metadata["headers"]:
                if isinstance(header, dict):
                  headers[header["key"]] = to_hex(header["value"]) if isinstance(header["value"], list) else header["value"]
            else:
              headers = metadata["headers"]
            timestamp = f'{metadata["timestamp"]} ({dt.strftime("%d-%m-%Y @ %H:%M:%S")})'
            log.info("NEW MESSAGE\n  timestamp={}\n  headers={}\n  key={}\n  value={}", timestamp, headers, key, value)
