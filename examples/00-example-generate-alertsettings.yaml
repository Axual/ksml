# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/release/1.0.x/docs/ksml-language-spec.json

# This example shows how to generate data and have it sent to a target topic in a given format.

streams:
  sensor_sensoralert_settings:
    topic: ksml_sensoralert_settings
    keyType: string
    valueType: avro:SensorAlertSettings

functions:
  generate_sensor_alertsetting_message:
    type: generator
    globalCode: |
      sensorCities = [ "Amsterdam", "Xanten", "Utrecht", "Alkmaar", "Leiden" ]

      def generateHumidityAlert(city, upperBoundary, lowerBoundary):
        result = {}
        result["name"] = "Humidity alert for " + city
        result["type"] = "HUMIDITY"
        result["alertAbove"] = upperBoundary
        result["alertBelow"] = lowerBoundary
        result["unit"] = "%"
        return result

      def generateTemperatureAlert(city, upperBoundary, lowerBoundary, unit):
        result = {}
        result["name"] = "Temperature alert for " + city
        result["type"] = "TEMPERATURE"
        result["alertAbove"] = upperBoundary
        result["alertBelow"] = lowerBoundary
        result["unit"] = unit
        return result

    code: |
      global sensorCities
      import random

      settings = []
      result = dict()
      city = random.choice(sensorCities)
      
      
      if random.randrange(10)==0 :
        result = None
      else:
        if city in ("Amsterdam","Utrecht"):
          settings.append(generateHumidityAlert(city, "90","60"))
          settings.append(generateHumidityAlert(city, "88","58"))
          settings.append(generateHumidityAlert(city, "86","56"))
          settings.append(generateTemperatureAlert(city, "84","54","F"))
          settings.append(generateTemperatureAlert(city, "82","52","F"))
          settings.append(generateTemperatureAlert(city, "80","50","F"))
          settings.append(generateTemperatureAlert(city, "78","48","F"))
          settings.append(generateTemperatureAlert(city, "76","46","F"))
          settings.append(generateTemperatureAlert(city, "74","44","F"))
  
        if city in ("Alkmaar","Leiden"):
          settings.append(generateHumidityAlert(city, "72","70"))
          settings.append(generateHumidityAlert(city, "74","68"))
          settings.append(generateHumidityAlert(city, "76","66"))
          settings.append(generateHumidityAlert(city, "78","64"))
          settings.append(generateHumidityAlert(city, "80","62"))
          settings.append(generateHumidityAlert(city, "82","60"))
          settings.append(generateTemperatureAlert(city, "25","20","C"))
          settings.append(generateTemperatureAlert(city, "27","15","C"))
          settings.append(generateTemperatureAlert(city, "29","10","C"))
  
        result["city"] = city
        result["alertSettings"] = settings
        result["@type"] = "SensorAlertSettings"
    expression: (city,result)
    resultType: (string,json)

producers:
  sensordata_alertsetting_producer:
    generator: generate_sensor_alertsetting_message
    interval: 5s
    to: sensor_sensoralert_settings
