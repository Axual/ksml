# This example shows how to generate data and have it sent to a target topic in a given format.

streams:
  sensordata_avro:
    topic: ksml_sensordata_avro
    keyType: string
    valueType: avro:SensorData
  sensor_alert:
    topic: ksml_sensoralert_settings
    keyType: string
    valueType: avro:SensorAlertSettings
  sensordata_json:
    topic: ksml_sensordata_json
    keyType: string
    valueType: json
  soap_source:
    topic: ksml_soap
    keyType: string
    valueType: soap

functions:
  generate_sensordata_message:
    type: generator
    globalCode: |
      import time
      import random

      sensorCounter = 1
      sensorColors = [ "black", "blue", "red", "yellow", "white" ]
      sensorOwners = [ "Alice", "Bob", "Charlie", "Dave", "Evan" ]
      sensorCities = [ "Amsterdam", "Xanten", "Utrecht", "Alkmaar", "Leiden" ]

      sensorAreaUnits = [ "m2", "ft2" ]
      sensorLengthUnits = [ "m", "ft" ]
      sensorStates = [ "off", "on" ]

      def generateArea():
        return { "type": "AREA", "unit": random.choice(sensorAreaUnits), "value": str(random.randrange(1000)) }

      def generateHumidity():
        if random.randrange(2) == 0:
          return { "type": "HUMIDITY", "unit": "g/m3", "value": str(random.randrange(100)) }
        return { "type": "HUMIDITY", "unit": "%", "value": str(random.randrange(60, 80)) }

      def generateLength():
        return { "type": "LENGTH", "unit": random.choice(sensorLengthUnits), "value": str(random.randrange(1000)) }

      def generateState():
        return { "type": "STATE", "unit": "state", "value": random.choice(sensorStates) }

      def generateTemperature():
        if random.randrange(2) == 0:
          return { "type": "TEMPERATURE", "unit": "C", "value": str(random.randrange(-10, 35)) }
        return { "type": "TEMPERATURE", "unit": "F", "value": str(random.randrange(14, 95)) }

    code: |
      global sensorCounter
      global sensorColors
      global sensorOwners
      global sensorCities
      global sensorAreaUnits
      global sensorLengthUnits
      global sensorStates
      
      key = "sensor"+str(sensorCounter)
      sensorCounter = (sensorCounter+1) % 10

      value = { "name": key, "timestamp": str(round(time.time()*1000)) }

      type = random.randrange(5)
      types = { 0: generateArea,
                1: generateHumidity,
                2: generateLength,
                3: generateState,
                4: generateTemperature
              }
      value = { **value, **types[type]() }

      value["color"] = random.choice(sensorColors)
      value["owner"] = random.choice(sensorOwners)
      value["city"] = random.choice(sensorCities)
    expression: (key,value)
    resultType: (string,json)

  generate_soap_message2:
    type: generator
    globalCode: |
      sensorCounter = 1
    code: |
      global sensorCounter
      key = "sensor"+str(sensorCounter)
      sensorCounter = (sensorCounter+1) % 10

      value = """<?xml version = "1.0"?>
      <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
      <env:Header><pre-fix:localHeader xmlns:pre-fix="https://some.site" env:role="role"/>
      </env:Header>
      <env:Body>
      <GetQuotation>
      <QuotationsName>ACME Corp</QuotationsName>
      </GetQuotation>
      <GetSomethingElse>
      <SomethingElseName1>ACME Corp something else 1</SomethingElseName1>
      <SomethingElseName2>ACME Corp something else 2</SomethingElseName2>
      <SomethingElseName3>ACME Corp something else 3</SomethingElseName3>
      </GetSomethingElse>
      </env:Body>
      </env:Envelope>"""
    expression: (key,value)
    resultType: (string,string)

  generate_sensor_alert_message:
    type: generator
    globalCode: |
      def generateHumidityAlert(city, upperBoundary, lowerBoundary):
        result = {}
        result["name"] = "Humidity alert for " + city
        result["type"] = "HUMIDITY"
        result["alertAbove"] = upperBoundary
        result["alertBelow"] = lowerBoundary
        result["unit"] = "%"
        return result

      def generateTemperatureAlert(city, upperBoundary, lowerBoundary, unit):
        result = {}
        result["name"] = "Temperature alert for " + city
        result["type"] = "TEMPERATURE"
        result["alertAbove"] = upperBoundary
        result["alertBelow"] = lowerBoundary
        result["unit"] = unit
        return result

    code: |
      global sensorCities

      settings = []

      city = random.choice(sensorCities)

      if city in ("Amsterdam","Utrecht"):
        settings.append(generateHumidityAlert(city, "90","60"))
        settings.append(generateHumidityAlert(city, "88","58"))
        settings.append(generateHumidityAlert(city, "86","56"))
        settings.append(generateTemperatureAlert(city, "84","54","F"))
        settings.append(generateTemperatureAlert(city, "82","52","F"))
        settings.append(generateTemperatureAlert(city, "80","50","F"))
        settings.append(generateTemperatureAlert(city, "78","48","F"))
        settings.append(generateTemperatureAlert(city, "76","46","F"))
        settings.append(generateTemperatureAlert(city, "74","44","F"))

      if city in ("Alkmaar","Leiden"):
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateHumidityAlert(city, "72","70"))
        settings.append(generateTemperatureAlert(city, "25","0","C"))
        settings.append(generateTemperatureAlert(city, "25","0","C"))
        settings.append(generateTemperatureAlert(city, "25","0","C"))

      result = dict()
      result["city"] = city
      result["alertSettings"] = settings
      result["@type"] = "SensorAlertSettings"
    expression: (city,result)
    resultType: (string,json)

  generate_soap_message:
    type: generator
    globalCode: |
      sensorCounter = 1
    code: |
      global sensorCounter
      key = "sensor"+str(sensorCounter)
      sensorCounter = (sensorCounter+1) % 10

      value = {"envelope":{"header":{"elements":[{"qname":{"localPart":"localHeader","namespaceURI":"https://some.site","prefix":"pre-fix"},"actor":"actor","role":"role","mustUnderstand":"true","relay":"true"}]}, "body":{"elements":[{"qname":{"localPart":"localBody", "namespaceURI": "https://some.new.site", "prefix":"broken"},"value": "<GetQuotation><QuotationsName>ACME Corp</QuotationsName><GetSomethingElse><SomethingElseName1>ACME Corp something else 1</SomethingElseName1><SomethingElseName2>ACME Corp something else 2</SomethingElseName2><SomethingElseName3>ACME Corp something else 3</SomethingElseName3></GetSomethingElse></GetQuotation>"}]}}}
    expression: (key,value)
    resultType: (string,soap)

producers:
  sensordata_alert_producer:
    generator: generate_sensor_alert_message
    interval: 4000
    to: sensor_alert

  sensordata_avro_producer:
    generator: generate_sensordata_message
    interval: 555
    to: sensordata_avro

  sensordata_json_producer:
    generator: generate_sensordata_message
    interval: 666
    to: sensordata_json

  soap_producer:
    generator: generate_soap_message2
    interval: 777
    to: soap_source
