functions:
  detect_anomalies:
    type: valueTransformer
    code: |
      # Get historical values for this key
      history = state_store.get(key + "_history")
      if history is None:
        history = {"values": [], "sum": 0, "count": 0}

      # Extract the value to monitor
      metric_value = value.get("metric_value", 0)

      # Update history
      history["values"].append(metric_value)
      history["sum"] += metric_value
      history["count"] += 1

      # Keep only the last 10 values
      if len(history["values"]) > 10:
        removed_value = history["values"].pop(0)
        history["sum"] -= removed_value
        history["count"] -= 1

      # Calculate statistics
      avg = history["sum"] / history["count"] if history["count"] > 0 else 0

      # Calculate standard deviation
      variance_sum = sum((x - avg) ** 2 for x in history["values"])
      std_dev = (variance_sum / history["count"]) ** 0.5 if history["count"] > 0 else 0

      # Check for anomaly (value more than 3 standard deviations from mean)
      is_anomaly = False
      if std_dev > 0 and abs(metric_value - avg) > 3 * std_dev:
        is_anomaly = True

      # Update state
      state_store.put(key + "_history", history)

      # Return anomaly information if detected
      if is_anomaly:
        return {
          "key": key,
          "timestamp": value.get("timestamp"),
          "metric_value": metric_value,
          "average": avg,
          "std_dev": std_dev,
          "deviation": abs(metric_value - avg) / std_dev if std_dev > 0 else 0,
          "original_event": value
        }

      return None
    stores:
      - anomaly_detection_store
