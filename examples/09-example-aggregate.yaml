# This example shows how to read from a simple stream, group by owner, apply windows and count owners per window.

streams:
  sensor_source:
    topic: ksml_sensordata_avro
    keyType: string
    valueType: avro:SensorData

functions:
  print_message:
    type: forEach
    code: "print('key=' + str(key) + ', value=' + str(value))"

stores:
  owner_count_aggregate:
    type: window
    keyType: windowed(string)
    valueType: long
    windowSize: 1m
    retention: 3m
  other:
    type: keyValue
    keyType: string
    valueType: long
  again:
    type: session
    keyType: string
    valueType: long

pipelines:
  main:
    from: sensor_source
    via:
      - type: groupBy
        name: ksml_sensordata_grouped
        mapper:
          code: |
            if value == None:
              return "no owner"
          expression: value["owner"]
          resultType: string
          stores:
            - owner_count_aggregate
      - type: windowedBy
        windowType: time
        duration: 20s
        grace: 40s
      - type: aggregate
        store: owner_count_aggregate
        initializer:
          expression: 0
          resultType: long
        aggregator:
          expression: aggregatedValue+1
          resultType: long
        materialized:
          name: bla
          caching: false
          logging: false
      - type: toStream
      - type: peek
        forEach: print_message
