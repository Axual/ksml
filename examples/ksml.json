{"additionalProperties":false,"definitions":{"AggregateOperation":{"additionalProperties":false,"description":"An aggregate operation","properties":{"adder":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/AggregatorDefinition"}],"description":"*(optional)* (GroupedTable) A function that adds a record to the aggregation result"},"aggregator":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/AggregatorDefinition"}],"description":"*(optional)* (GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"},"initializer":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/InitializerDefinition"}],"description":"The initializer function, which generates an initial value for every set of aggregated records"},"merger":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/MergerDefinition"}],"description":"*(optional)* (SessionWindowedStream, SessionWindowedCogroupedStream) A function that combines two aggregation results"},"name":{"description":"The name of the operation processor Default: aggregate","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/WindowStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the aggregation"},"subtractor":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/AggregatorDefinition"}],"description":"*(optional)* (GroupedTable) A function that removes a record from the aggregation result"},"type":{"description":"The type of the operation, fixed value \"aggregate\" Default: aggregate","enum":["aggregate"]}},"required":["type","name","initializer"],"title":"AggregateOperation","type":"object"},"AggregatorDefinition":{"additionalProperties":false,"description":"Defines a aggregator function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the aggregator"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the aggregator. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the aggregator. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the aggregator. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the aggregator Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the aggregator. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the aggregator uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"aggregator\" Default: aggregator","enum":["aggregator"]}},"title":"AggregatorDefinition","type":"object"},"BranchDefinition":{"additionalProperties":false,"description":"Defines one branch in a BranchOperation","properties":{"as":{"description":"*(optional)* The name to register the pipeline result under, which can be used as source by follow-up pipelines","type":"string"},"branch":{"description":"*(optional)* Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate Default: []","items":{"$ref":"#/definitions/BranchDefinition"},"type":"array"},"forEach":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ForEachActionDefinition"}],"description":"*(optional)* A function that gets called for every message in the stream"},"if":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/PredicateDefinition"}],"description":"*(optional)* Defines the condition under which messages get sent down this branch"},"name":{"description":"*(optional)* The name of the operation processor Default: forEach","type":"string"},"print":{"$ref":"#/definitions/PrintOperation","description":"*(optional)* The specification of where to print messages to"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"to":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ToOperation"}],"description":"*(optional)* Ends the pipeline by sending all messages to a fixed topic, or to a topic returned by a topic name extractor function"},"via":{"description":"*(optional)* A series of operations performed on the input stream Default: []","items":{"anyOf":[{"$ref":"#/definitions/AggregateOperation"},{"$ref":"#/definitions/CogroupOperation"},{"$ref":"#/definitions/ConvertKeyOperation"},{"$ref":"#/definitions/ConvertKeyValueOperation"},{"$ref":"#/definitions/ConvertValueOperation"},{"$ref":"#/definitions/CountOperation"},{"$ref":"#/definitions/FilterOperation"},{"$ref":"#/definitions/FilterNotOperation"},{"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"},{"$ref":"#/definitions/TransformKeyValueToValueListOperation"},{"$ref":"#/definitions/GroupByOperation"},{"$ref":"#/definitions/GroupByKeyOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/MergeOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/PeekOperation"},{"$ref":"#/definitions/ReduceOperation"},{"$ref":"#/definitions/RepartitionOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/SuppressOperation"},{"$ref":"#/definitions/ToStreamOperation"},{"$ref":"#/definitions/ToTableOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"},{"$ref":"#/definitions/TransformKeyValueToValueListOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/WindowBySessionOperation"},{"$ref":"#/definitions/WindowByTimeOperation"}]},"type":"array"}},"title":"BranchDefinition","type":"object"},"CogroupOperation":{"additionalProperties":false,"description":"A cogroup operation","properties":{"aggregator":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/AggregatorDefinition"}],"description":"(GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"},"name":{"description":"The name of the operation processor Default: cogroup","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/WindowStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the cogroup"},"type":{"description":"The type of the operation, fixed value \"cogroup\" Default: cogroup","enum":["cogroup"]}},"required":["type","name","aggregator"],"title":"CogroupOperation","type":"object"},"ConvertKeyOperation":{"additionalProperties":false,"description":"An operation to convert the stream key type to another type. Conversion is only syntactic, eg. from Avro to XML.","properties":{"into":{"description":"The type to convert the stream key into","type":"string"},"name":{"description":"The name of the operation processor Default: convertKey","type":"string"},"type":{"description":"The type of the operation, fixed value \"convertKey\" Default: convertKey","enum":["convertKey"]}},"required":["type","name","into"],"title":"ConvertKeyOperation","type":"object"},"ConvertKeyValueOperation":{"additionalProperties":false,"description":"An operation to convert the stream key and value types to other types. Conversion is only syntactic, eg. from Avro to XML.","properties":{"into":{"description":"The tuple type to convert the stream key/value into","type":"string"},"name":{"description":"The name of the operation processor Default: convertKeyValue","type":"string"},"type":{"description":"The type of the operation, fixed value \"convertKeyValue\" Default: convertKeyValue","enum":["convertKeyValue"]}},"required":["type","name","into"],"title":"ConvertKeyValueOperation","type":"object"},"ConvertValueOperation":{"additionalProperties":false,"description":"An operation to convert the stream value type to another type. Conversion is only syntactic, eg. from Avro to XML.","properties":{"into":{"description":"The type to convert the stream value into","type":"string"},"name":{"description":"The name of the operation processor Default: convertValue","type":"string"},"type":{"description":"The type of the operation, fixed value \"convertValue\" Default: convertValue","enum":["convertValue"]}},"required":["type","name","into"],"title":"ConvertValueOperation","type":"object"},"CountOperation":{"additionalProperties":false,"description":"Count the number of times a key is seen in a given window","properties":{"name":{"description":"The name of the operation processor Default: count","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinition"},{"$ref":"#/definitions/SessionStateStoreDefinition"},{"$ref":"#/definitions/WindowStateStoreDefinition"}],"description":"*(optional)* Materialized view of the count operation's result"},"type":{"description":"The type of the operation, fixed value \"count\" Default: count","enum":["count"]}},"required":["type","name"],"title":"CountOperation","type":"object"},"FilterNotOperation":{"additionalProperties":false,"description":"Filter records based on the inverse result of a predicate function","properties":{"if":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/PredicateDefinition"}],"description":"A function that returns \"false\" when records are accepted, \"true\" otherwise"},"name":{"description":"The name of the operation processor Default: filterNot","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the filtered table"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"filterNot\" Default: filterNot","enum":["filterNot"]}},"required":["type","name","if"],"title":"FilterNotOperation","type":"object"},"FilterOperation":{"additionalProperties":false,"description":"Filter records based on a predicate function","properties":{"if":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/PredicateDefinition"}],"description":"A function that returns \"true\" when records are accepted, \"false\" otherwise"},"name":{"description":"The name of the operation processor Default: filter","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the filtered table"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"filter\" Default: filter","enum":["filter"]}},"required":["type","name","if"],"title":"FilterOperation","type":"object"},"ForEachActionDefinition":{"additionalProperties":false,"description":"Defines a foreach action function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the foreach action"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the foreach action. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreach action. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the foreach action. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the foreach action Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the foreach action. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the foreach action uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"forEach\" Default: forEach","enum":["forEach"]}},"title":"ForEachActionDefinition","type":"object"},"ForeignKeyExtractorDefinition":{"additionalProperties":false,"description":"Defines a foreign key extractor function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the foreign key extractor"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the foreign key extractor. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreign key extractor. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the foreign key extractor. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the foreign key extractor Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the foreign key extractor. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the foreign key extractor uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"forEach\" Default: forEach","enum":["forEach"]}},"title":"ForeignKeyExtractorDefinition","type":"object"},"GeneratorDefinition":{"additionalProperties":false,"description":"Defines a message generator function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the message generator"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the message generator. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the message generator. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the message generator. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the message generator Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the message generator. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the message generator uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"generator\" Default: generator","enum":["generator"]}},"title":"GeneratorDefinition","type":"object"},"GenericFunctionDefinition":{"additionalProperties":false,"description":"Defines a generic function function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the generic function"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the generic function. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the generic function. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the generic function. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the generic function Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the generic function. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the generic function uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"generic\" Default: generic","enum":["generic"]}},"title":"GenericFunctionDefinition","type":"object"},"GlobalTableDefinition":{"additionalProperties":false,"description":"Contains a definition of a GlobalTable, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"The key type of the global table","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* KeyValue state store definition"},"topic":{"description":"The name of the Kafka topic for this global table","type":"string"},"valueType":{"description":"The value type of the global table","type":"string"}},"required":["topic","keyType","valueType"],"title":"GlobalTableDefinition","type":"object"},"GlobalTableDefinitionWithOptionalTypes":{"additionalProperties":false,"description":"Contains a definition of a GlobalTable, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"*(optional)* The key type of the global table","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* KeyValue state store definition"},"topic":{"description":"The name of the Kafka topic for this global table","type":"string"},"valueType":{"description":"*(optional)* The value type of the global table","type":"string"}},"required":["topic"],"title":"GlobalTableDefinitionWithOptionalTypes","type":"object"},"GroupByKeyOperation":{"additionalProperties":false,"description":"Operation to group all messages with the same key together","properties":{"name":{"description":"The name of the operation processor Default: groupByKey","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the grouped stream"},"type":{"description":"The type of the operation, fixed value \"groupByKey\" Default: groupByKey","enum":["groupByKey"]}},"required":["type","name"],"title":"GroupByKeyOperation","type":"object"},"GroupByOperation":{"additionalProperties":false,"description":"Operation to group all messages with together based on a keying function","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueMapperDefinition"}],"description":"Function to map records to a key they can be grouped on"},"name":{"description":"The name of the operation processor Default: groupBy","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the grouped stream or table"},"type":{"description":"The type of the operation, fixed value \"groupBy\" Default: groupBy","enum":["groupBy"]}},"required":["type","name","mapper"],"title":"GroupByOperation","type":"object"},"InitializerDefinition":{"additionalProperties":false,"description":"Defines a initializer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the initializer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the initializer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the initializer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the initializer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the initializer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the initializer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the initializer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"initializer\" Default: initializer","enum":["initializer"]}},"title":"InitializerDefinition","type":"object"},"JoinOperation":{"additionalProperties":false,"description":"Defines a join operation","properties":{"foreignKeyExtractor":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ValueJoinerDefinition"}],"description":"(Table joins) A function that can translate the join table value to a primary key"},"globalTable":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/GlobalTableDefinitionWithOptionalTypes"}],"description":"(Required for GlobalTable joins) A reference to the GlobalTable, or an inline definition of the GlobalTable to join with"},"grace":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Table joins) The window grace period (the time to admit out-of-order events after the end of the window)"},"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ValueJoinerDefinition"}],"description":"(GlobalTable joins) A function that maps the key value from the stream with the primary key of the GlobalTable"},"name":{"description":"The name of the operation processor Default: join","type":"string"},"otherPartitioner":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/StreamPartitionerDefinition"}],"description":"*(optional)* (Table joins) A function that partitions the records on the join table"},"partitioner":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/StreamPartitionerDefinition"}],"description":"*(optional)* (Table joins) A function that partitions the records on the primary table"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinition"},{"$ref":"#/definitions/SessionStateStoreDefinition"},{"$ref":"#/definitions/WindowStateStoreDefinition"}],"description":"*(optional)* Materialized view of the joined streams"},"stream":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/StreamDefinitionWithOptionalTypes"}],"description":"(Required for Stream joins) A reference to the Stream, or an inline definition of the Stream to join with"},"table":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/TableDefinitionWithOptionalTypes"}],"description":"(Required for Table joins) A reference to the Table, or an inline definition of the Table to join with"},"type":{"description":"The type of the operation, fixed value \"join\"","type":"string"},"valueJoiner":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ValueJoinerDefinition"}],"description":"(GlobalTable joins) A function that joins two values"},"window":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"(Stream joins) The maximum time difference for a join over two streams on the same key"}},"required":["type","name","stream","valueJoiner","window","type","name","table","foreignKeyExtractor","valueJoiner","type","name","globalTable","mapper","valueJoiner"],"title":"JoinOperation","type":"object"},"KeyTransformerDefinition":{"additionalProperties":false,"description":"Defines a key transformer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the key transformer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the key transformer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the key transformer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the key transformer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the key transformer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the key transformer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the key transformer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyTransformer\" Default: keyTransformer","enum":["keyTransformer"]}},"title":"KeyTransformerDefinition","type":"object"},"KeyValueMapperDefinition":{"additionalProperties":false,"description":"Defines a keyvalue mapper function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the keyvalue mapper"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the keyvalue mapper. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue mapper. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the keyvalue mapper. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the keyvalue mapper Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the keyvalue mapper. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the keyvalue mapper uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyValueMapper\" Default: keyValueMapper","enum":["keyValueMapper"]}},"title":"KeyValueMapperDefinition","type":"object"},"KeyValuePrinterDefinition":{"additionalProperties":false,"description":"Defines a keyvalue printer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the keyvalue printer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the keyvalue printer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue printer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the keyvalue printer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the keyvalue printer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the keyvalue printer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the keyvalue printer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyValuePrinter\" Default: keyValuePrinter","enum":["keyValuePrinter"]}},"title":"KeyValuePrinterDefinition","type":"object"},"KeyValueStateStoreDefinition":{"additionalProperties":false,"description":"Definition of a keyValue state store","properties":{"caching":{"description":"*(optional)* \"true\" if changed to the keyValue store need to be buffered and periodically released, \"false\" to emit all changes directly Default: false","type":"boolean"},"historyRetention":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Versioned only) The duration for which old record versions are available for query (cannot be negative)"},"keyType":{"description":"*(optional)* The key type of the keyValue store","type":"string"},"logging":{"description":"*(optional)* \"true\" if a changelog topic should be set up on Kafka for this keyValue store, \"false\" otherwise Default: false","type":"boolean"},"name":{"description":"*(optional)* The name of the keyValue store. If this field is not defined, then the name is derived from the context.","type":"string"},"persistent":{"description":"*(optional)* \"true\" if this keyValue store needs to be stored on disk, \"false\" otherwise Default: false","type":"boolean"},"segmentInterval":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."},"timestamped":{"description":"*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise Default: false","type":"boolean"},"type":{"description":"The type of the state store, fixed value \"keyValue\" Default: keyValue","enum":["keyValue"]},"valueType":{"description":"*(optional)* The value type of the keyValue store","type":"string"},"versioned":{"description":"*(optional)* \"true\" if elements in the store are versioned, \"false\" otherwise Default: false","type":"boolean"}},"required":["type"],"title":"KeyValueStateStoreDefinition","type":"object"},"KeyValueStateStoreDefinitionWithImplicitType":{"additionalProperties":false,"description":"Definition of a keyValue state store","properties":{"caching":{"description":"*(optional)* \"true\" if changed to the keyValue store need to be buffered and periodically released, \"false\" to emit all changes directly Default: false","type":"boolean"},"historyRetention":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Versioned only) The duration for which old record versions are available for query (cannot be negative)"},"keyType":{"description":"*(optional)* The key type of the keyValue store","type":"string"},"logging":{"description":"*(optional)* \"true\" if a changelog topic should be set up on Kafka for this keyValue store, \"false\" otherwise Default: false","type":"boolean"},"name":{"description":"*(optional)* The name of the keyValue store. If this field is not defined, then the name is derived from the context.","type":"string"},"persistent":{"description":"*(optional)* \"true\" if this keyValue store needs to be stored on disk, \"false\" otherwise Default: false","type":"boolean"},"segmentInterval":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."},"timestamped":{"description":"*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise Default: false","type":"boolean"},"type":{"description":"*(optional)* The type of the state store, fixed value \"keyValue\" Default: keyValue","enum":["keyValue"]},"valueType":{"description":"*(optional)* The value type of the keyValue store","type":"string"},"versioned":{"description":"*(optional)* \"true\" if elements in the store are versioned, \"false\" otherwise Default: false","type":"boolean"}},"title":"KeyValueStateStoreDefinitionWithImplicitType","type":"object"},"KeyValueToKeyValueListTransformerDefinition":{"additionalProperties":false,"description":"Defines a keyvalue-to-keyvaluelist transformer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the keyvalue-to-keyvaluelist transformer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the keyvalue-to-keyvaluelist transformer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-keyvaluelist transformer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the keyvalue-to-keyvaluelist transformer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the keyvalue-to-keyvaluelist transformer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the keyvalue-to-keyvaluelist transformer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the keyvalue-to-keyvaluelist transformer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyValueToKeyValueListTransformer\" Default: keyValueToKeyValueListTransformer","enum":["keyValueToKeyValueListTransformer"]}},"title":"KeyValueToKeyValueListTransformerDefinition","type":"object"},"KeyValueToValueListTransformerDefinition":{"additionalProperties":false,"description":"Defines a keyvalue-to-valuelist transformer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the keyvalue-to-valuelist transformer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the keyvalue-to-valuelist transformer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-valuelist transformer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the keyvalue-to-valuelist transformer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the keyvalue-to-valuelist transformer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the keyvalue-to-valuelist transformer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the keyvalue-to-valuelist transformer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyValueToValueListTransformer\" Default: keyValueToValueListTransformer","enum":["keyValueToValueListTransformer"]}},"title":"KeyValueToValueListTransformerDefinition","type":"object"},"KeyValueTransformerDefinition":{"additionalProperties":false,"description":"Defines a keyvalue transformer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the keyvalue transformer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the keyvalue transformer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue transformer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the keyvalue transformer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the keyvalue transformer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the keyvalue transformer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the keyvalue transformer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"keyValueTransformer\" Default: keyValueTransformer","enum":["keyValueTransformer"]}},"title":"KeyValueTransformerDefinition","type":"object"},"MergeOperation":{"additionalProperties":false,"description":"A merge operation to join two Streams","properties":{"name":{"description":"The name of the operation processor Default: merge","type":"string"},"stream":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/StreamDefinition"}],"description":"The stream to merge with"},"type":{"description":"The type of the operation, fixed value \"merge\" Default: merge","enum":["merge"]}},"required":["type","name","stream"],"title":"MergeOperation","type":"object"},"MergerDefinition":{"additionalProperties":false,"description":"Defines a merger function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the merger"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the merger. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the merger. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the merger. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the merger Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the merger. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the merger uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"merger\" Default: merger","enum":["merger"]}},"title":"MergerDefinition","type":"object"},"ParameterDefinition":{"additionalProperties":false,"description":"Defines a parameter for a user function","properties":{"defaultValue":{"description":"*(optional)* The default value for the parameter","type":"string"},"name":{"description":"The name of the parameter","type":"string"},"type":{"description":"The type of the parameter","type":"string"}},"required":["name","type"],"title":"ParameterDefinition","type":"object"},"PeekOperation":{"additionalProperties":false,"description":"Operation to peek into a stream, without modifying the stream contents","properties":{"forEach":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ForEachActionDefinition"}],"description":"A function that gets called for every message in the stream"},"name":{"description":"The name of the operation processor Default: peek","type":"string"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"peek\" Default: peek","enum":["peek"]}},"required":["type","name","forEach"],"title":"PeekOperation","type":"object"},"PipelineDefinition":{"additionalProperties":false,"description":"Defines a pipeline through a source, a series of operations to perform on it and a sink operation to close the stream with","properties":{"as":{"description":"*(optional)* The name to register the pipeline result under, which can be used as source by follow-up pipelines","type":"string"},"branch":{"description":"*(optional)* Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate Default: []","items":{"$ref":"#/definitions/BranchDefinition"},"type":"array"},"forEach":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ForEachActionDefinition"}],"description":"*(optional)* A function that gets called for every message in the stream"},"from":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/TopicDefinition"}],"description":"Pipeline source"},"name":{"description":"*(optional)* The name of the operation processor Default: forEach","type":"string"},"print":{"$ref":"#/definitions/PrintOperation","description":"*(optional)* The specification of where to print messages to"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"to":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ToOperation"}],"description":"*(optional)* Ends the pipeline by sending all messages to a fixed topic, or to a topic returned by a topic name extractor function"},"via":{"description":"*(optional)* A series of operations performed on the input stream Default: []","items":{"anyOf":[{"$ref":"#/definitions/AggregateOperation"},{"$ref":"#/definitions/CogroupOperation"},{"$ref":"#/definitions/ConvertKeyOperation"},{"$ref":"#/definitions/ConvertKeyValueOperation"},{"$ref":"#/definitions/ConvertValueOperation"},{"$ref":"#/definitions/CountOperation"},{"$ref":"#/definitions/FilterOperation"},{"$ref":"#/definitions/FilterNotOperation"},{"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"},{"$ref":"#/definitions/TransformKeyValueToValueListOperation"},{"$ref":"#/definitions/GroupByOperation"},{"$ref":"#/definitions/GroupByKeyOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/MergeOperation"},{"$ref":"#/definitions/JoinOperation"},{"$ref":"#/definitions/PeekOperation"},{"$ref":"#/definitions/ReduceOperation"},{"$ref":"#/definitions/RepartitionOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/SuppressOperation"},{"$ref":"#/definitions/ToStreamOperation"},{"$ref":"#/definitions/ToTableOperation"},{"$ref":"#/definitions/TransformKeyOperation"},{"$ref":"#/definitions/TransformKeyValueOperation"},{"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"},{"$ref":"#/definitions/TransformKeyValueToValueListOperation"},{"$ref":"#/definitions/TransformValueOperation"},{"$ref":"#/definitions/WindowBySessionOperation"},{"$ref":"#/definitions/WindowByTimeOperation"}]},"type":"array"}},"required":["from"],"title":"PipelineDefinition","type":"object"},"PredicateDefinition":{"additionalProperties":false,"description":"Defines a Function that returns true or false based on key/value input function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the Function that returns true or false based on key/value input"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the Function that returns true or false based on key/value input. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the Function that returns true or false based on key/value input. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the Function that returns true or false based on key/value input. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the Function that returns true or false based on key/value input Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the Function that returns true or false based on key/value input. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the Function that returns true or false based on key/value input uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"predicate\" Default: predicate","enum":["predicate"]}},"title":"PredicateDefinition","type":"object"},"PrintOperation":{"additionalProperties":false,"description":"Operation to print the contents of a pipeline on the screen or to write them to a file","properties":{"filename":{"description":"*(optional)* The filename to output records to. If nothing is specified, then messages will be printed on stdout","type":"string"},"label":{"description":"*(optional)* A label to attach to the output records","type":"string"},"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValuePrinterDefinition"}],"description":"*(optional)* A function to convert record into a string for output"},"name":{"description":"The name of the operation processor Default: print","type":"string"}},"required":["name"],"title":"PrintOperation","type":"object"},"ProducerDefinition":{"additionalProperties":false,"description":"Definition of a Producer that regularly generates messages for a topic","properties":{"condition":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/PredicateDefinition"}],"description":"*(optional)* A function that validates the generator's result message. Returns \"true\" when the message may be produced on the topic, \"false\" otherwise."},"generator":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/GeneratorDefinition"}],"description":"The function that generates records"},"interval":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"The interval with which the generator is called"},"to":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/TopicDefinitionWithOptionalTypes"}],"description":"The topic to produce to"}},"required":["generator","interval","to"],"title":"ProducerDefinition","type":"object"},"ReduceOperation":{"additionalProperties":false,"description":"Operation to reduce a series of records into a single aggregate result","properties":{"adder":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ReducerDefinition"}],"description":"A function that adds a record to the aggregate result"},"name":{"description":"The name of the operation processor Default: reduce","type":"string"},"reducer":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ReducerDefinition"}],"description":"A function that computes a new aggregate result"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/WindowStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the aggregation"},"subtractor":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ReducerDefinition"}],"description":"A function that removes a record from the aggregate result"},"type":{"description":"The type of the operation, fixed value \"reduce\" Default: reduce","enum":["reduce"]}},"required":["type","name","reducer","adder","subtractor"],"title":"ReduceOperation","type":"object"},"ReducerDefinition":{"additionalProperties":false,"description":"Defines a reducer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the reducer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the reducer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the reducer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the reducer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the reducer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the reducer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the reducer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"reducer\" Default: reducer","enum":["reducer"]}},"title":"ReducerDefinition","type":"object"},"RepartitionOperation":{"additionalProperties":false,"description":"Operation to (re)partition a stream","properties":{"name":{"description":"The name of the operation processor Default: repartition","type":"string"},"partitioner":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/StreamPartitionerDefinition"}],"description":"A function that partitions stream records"},"type":{"description":"The type of the operation, fixed value \"repartition\" Default: repartition","enum":["repartition"]}},"required":["type","name","partitioner"],"title":"RepartitionOperation","type":"object"},"SessionStateStoreDefinition":{"additionalProperties":false,"description":"Definition of a session state store","properties":{"caching":{"description":"*(optional)* \"true\" if changed to the session store need to be buffered and periodically released, \"false\" to emit all changes directly Default: false","type":"boolean"},"keyType":{"description":"*(optional)* The key type of the session store","type":"string"},"logging":{"description":"*(optional)* \"true\" if a changelog topic should be set up on Kafka for this session store, \"false\" otherwise Default: false","type":"boolean"},"name":{"description":"*(optional)* The name of the session store. If this field is not defined, then the name is derived from the context.","type":"string"},"persistent":{"description":"*(optional)* \"true\" if this session store needs to be stored on disk, \"false\" otherwise Default: false","type":"boolean"},"retention":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* The duration for which elements in the session store are retained"},"timestamped":{"description":"*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise Default: false","type":"boolean"},"type":{"description":"The type of the state store, fixed value \"session\" Default: session","enum":["session"]},"valueType":{"description":"*(optional)* The value type of the session store","type":"string"}},"required":["type"],"title":"SessionStateStoreDefinition","type":"object"},"StreamDefinition":{"additionalProperties":false,"description":"Contains a definition of a Stream, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"The key type of the stream","type":"string"},"topic":{"description":"The name of the Kafka topic for this stream","type":"string"},"valueType":{"description":"The value type of the stream","type":"string"}},"required":["topic","keyType","valueType"],"title":"StreamDefinition","type":"object"},"StreamDefinitionWithOptionalTypes":{"additionalProperties":false,"description":"Contains a definition of a Stream, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"*(optional)* The key type of the stream","type":"string"},"topic":{"description":"The name of the Kafka topic for this stream","type":"string"},"valueType":{"description":"*(optional)* The value type of the stream","type":"string"}},"required":["topic"],"title":"StreamDefinitionWithOptionalTypes","type":"object"},"StreamPartitionerDefinition":{"additionalProperties":false,"description":"Defines a stream partitioner function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the stream partitioner"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the stream partitioner. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the stream partitioner. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the stream partitioner Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the stream partitioner. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the stream partitioner uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"streamPartitioner\" Default: streamPartitioner","enum":["streamPartitioner"]}},"title":"StreamPartitionerDefinition","type":"object"},"SuppressOperation":{"additionalProperties":false,"description":"Operation to suppress messages in the source stream until a certain limit is reached","properties":{"bufferFullStrategy":{"description":"*(optional)* What to do when the buffer is full, either \"emitEarlyWhenFull\", or \"shutdownWhenFull\"","type":"string"},"duration":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"The duration for which messages are suppressed"},"maxBytes":{"description":"*(optional)* The maximum number of bytes in the buffer","type":"string"},"maxRecords":{"description":"*(optional)* The maximum number of records in the buffer","type":"string"},"name":{"description":"The name of the operation processor Default: suppress","type":"string"},"type":{"description":"The type of the operation, fixed value \"suppress\" Default: suppress","enum":["suppress"]},"until":{"description":"The method by which messages are held, either \"timeLimit\", or \"windowCloses\"","type":"string"}},"required":["type","name","until","duration"],"title":"SuppressOperation","type":"object"},"TableDefinition":{"additionalProperties":false,"description":"Contains a definition of a Table, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"The key type of the table","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* KeyValue state store definition"},"topic":{"description":"The name of the Kafka topic for this table","type":"string"},"valueType":{"description":"The value type of the table","type":"string"}},"required":["topic","keyType","valueType"],"title":"TableDefinition","type":"object"},"TableDefinitionWithOptionalTypes":{"additionalProperties":false,"description":"Contains a definition of a Table, which can be referenced by producers and pipelines","properties":{"keyType":{"description":"*(optional)* The key type of the table","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* KeyValue state store definition"},"topic":{"description":"The name of the Kafka topic for this table","type":"string"},"valueType":{"description":"*(optional)* The value type of the table","type":"string"}},"required":["topic"],"title":"TableDefinitionWithOptionalTypes","type":"object"},"ToOperation":{"additionalProperties":false,"description":"Either a topic or topic name extractor that defines where to write pipeline messages to","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the stream partitioner"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the stream partitioner. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."},"keyType":{"description":"*(optional)* The key type of the topic","type":"string"},"name":{"description":"*(optional)* The name of the stream partitioner. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the stream partitioner Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the stream partitioner. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the stream partitioner uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"topic":{"description":"*(optional)* The name of the Kafka topic","type":"string"},"topicNameExtractor":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/TopicNameExtractorDefinition"}],"description":"*(optional)* Reference to a pre-defined topic name extractor, or an inline definition of a topic name extractor and an optional stream partitioner"},"type":{"description":"*(optional)* The type of the function, fixed value \"streamPartitioner\" Default: streamPartitioner","enum":["streamPartitioner"]},"valueType":{"description":"*(optional)* The value type of the topic","type":"string"}},"title":"ToOperation","type":"object"},"ToStreamOperation":{"additionalProperties":false,"description":"Convert a Table into a Stream, optionally through a custom key transformer","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyTransformerDefinition"}],"description":"A function that computes the output key for every record"},"name":{"description":"The name of the operation processor Default: toStream","type":"string"},"type":{"description":"The type of the operation, fixed value \"toStream\" Default: toStream","enum":["toStream"]}},"required":["type","name","mapper"],"title":"ToStreamOperation","type":"object"},"ToTableOperation":{"additionalProperties":false,"description":"Convert a Stream into a Table","properties":{"name":{"description":"The name of the operation processor Default: toTable","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the Table"},"type":{"description":"The type of the operation, fixed value \"toTable\" Default: toTable","enum":["toTable"]}},"required":["type","name"],"title":"ToTableOperation","type":"object"},"TopicDefinition":{"additionalProperties":false,"description":"Contains a definition of a Kafka topic, to be used by producers and pipelines","properties":{"keyType":{"description":"The key type of the topic","type":"string"},"topic":{"description":"The name of the Kafka topic","type":"string"},"valueType":{"description":"The value type of the topic","type":"string"}},"required":["topic","keyType","valueType"],"title":"TopicDefinition","type":"object"},"TopicDefinitionWithOptionalTypes":{"additionalProperties":false,"description":"Contains a definition of a Kafka topic, to be used by producers and pipelines","properties":{"keyType":{"description":"*(optional)* The key type of the topic","type":"string"},"topic":{"description":"The name of the Kafka topic","type":"string"},"valueType":{"description":"*(optional)* The value type of the topic","type":"string"}},"required":["topic"],"title":"TopicDefinitionWithOptionalTypes","type":"object"},"TopicNameExtractorDefinition":{"additionalProperties":false,"description":"Defines a topic name extractor function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the topic name extractor"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the topic name extractor. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the topic name extractor. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the topic name extractor. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the topic name extractor Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the topic name extractor. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the topic name extractor uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"topicNameExtractor\" Default: topicNameExtractor","enum":["topicNameExtractor"]}},"title":"TopicNameExtractorDefinition","type":"object"},"TransformKeyOperation":{"additionalProperties":false,"description":"Convert the key of every record in the stream to another key","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyTransformerDefinition"}],"description":"A function that computes a new key for each record"},"name":{"description":"The name of the operation processor Default: transformKey","type":"string"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"transformKey\" Default: transformKey","enum":["transformKey"]}},"required":["type","name","mapper"],"title":"TransformKeyOperation","type":"object"},"TransformKeyValueOperation":{"additionalProperties":false,"description":"Convert the key/value of every record in the stream to another key/value","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueTransformerDefinition"}],"description":"A function that computes a new key/value for each record"},"name":{"description":"The name of the operation processor Default: transformKeyValue","type":"string"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"transformKeyValue\" Default: transformKeyValue","enum":["transformKeyValue"]}},"required":["type","name","mapper"],"title":"TransformKeyValueOperation","type":"object"},"TransformKeyValueToKeyValueListOperation":{"additionalProperties":false,"description":"Convert a stream by transforming every record into a list of derived records","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueToKeyValueListTransformerDefinition"}],"description":"A function that converts every record of a stream to a list of output records."},"name":{"description":"The name of the operation processor Default: transformKeyValueToKeyValueList","type":"string"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"transformKeyValueToKeyValueList\" Default: transformKeyValueToKeyValueList","enum":["transformKeyValueToKeyValueList"]}},"required":["type","name","mapper"],"title":"TransformKeyValueToKeyValueListOperation","type":"object"},"TransformKeyValueToValueListOperation":{"additionalProperties":false,"description":"Convert every record in the stream to a list of output records with the same key","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueToValueListTransformerDefinition"}],"description":"A function that converts every key/value into a list of result values, which will be combined with the original key in the output stream"},"name":{"description":"The name of the operation processor Default: transformKeyValueToValueList","type":"string"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"transformKeyValueToValueList\" Default: transformKeyValueToValueList","enum":["transformKeyValueToValueList"]}},"required":["type","name","mapper"],"title":"TransformKeyValueToValueListOperation","type":"object"},"TransformValueOperation":{"additionalProperties":false,"description":"Convert the value of every record in the stream to another value","properties":{"mapper":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ValueTransformerDefinition"}],"description":"A function that converts the value of every record into another value"},"name":{"description":"The name of the operation processor Default: transformValue","type":"string"},"store":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/KeyValueStateStoreDefinitionWithImplicitType"}],"description":"*(optional)* Materialized view of the transformed table"},"stores":{"description":"*(optional)* The names of all state stores used by the function Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"The type of the operation, fixed value \"transformValue\" Default: transformValue","enum":["transformValue"]}},"required":["type","name","mapper"],"title":"TransformValueOperation","type":"object"},"ValueJoinerDefinition":{"additionalProperties":false,"description":"Defines a value joiner function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the value joiner"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the value joiner. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value joiner. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the value joiner. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the value joiner Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the value joiner. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the value joiner uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"valueJoiner\" Default: valueJoiner","enum":["valueJoiner"]}},"title":"ValueJoinerDefinition","type":"object"},"ValueTransformerDefinition":{"additionalProperties":false,"description":"Defines a value transformer function, that gets injected into the Kafka Streams topology","properties":{"code":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The (multiline) code of the value transformer"},"expression":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* The expression returned by the value transformer. Only required for functions that return values."},"globalCode":{"anyOf":[{"type":"boolean"},{"type":"string"}],"description":"*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value transformer. Can be used for defining eg. global variables."},"name":{"description":"*(optional)* The name of the value transformer. If this field is not defined, then the name is derived from the context.","type":"string"},"parameters":{"description":"*(optional)* A list of parameters to be passed into the value transformer Default: []","items":{"$ref":"#/definitions/ParameterDefinition"},"type":"array"},"resultType":{"description":"*(optional)* The data type returned by the value transformer. Only required for function types, which are not pre-defined.","type":"string"},"stores":{"description":"*(optional)* A list of store names that the value transformer uses. Only required if the function wants to use a state store. Default: []","items":{"type":"string"},"type":"array"},"type":{"description":"*(optional)* The type of the function, fixed value \"valueTransformer\" Default: valueTransformer","enum":["valueTransformer"]}},"title":"ValueTransformerDefinition","type":"object"},"WindowBySessionOperation":{"additionalProperties":false,"description":"Operation to window messages by session, configured by an inactivity gap","properties":{"grace":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Tumbling, Hopping) The grace period, during which out-of-order records can still be processed"},"inactivityGap":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"The inactivity gap, below which two messages are considered to be of the same session"},"name":{"description":"The name of the operation processor Default: windowBySession","type":"string"},"type":{"description":"The type of the operation, fixed value \"windowBySession\" Default: windowBySession","enum":["windowBySession"]}},"required":["type","name","inactivityGap"],"title":"WindowBySessionOperation","type":"object"},"WindowByTimeOperation":{"additionalProperties":false,"description":"Operation to reduce a series of records into a single aggregate result","properties":{"advanceBy":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Hopping) The amount of time to increase time windows by"},"duration":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Tumbling) The duration of time windows"},"grace":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Tumbling, Hopping, Sliding) The grace period, during which out-of-order records can still be processed"},"name":{"description":"The name of the operation processor Default: windowByTime","type":"string"},"timeDifference":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* (Sliding) The maximum amount of time difference between two records"},"type":{"description":"The type of the operation, fixed value \"windowByTime\" Default: windowByTime","enum":["windowByTime"]},"windowType":{"description":"The type of the operation, either \"tumbling\", or \"hopping\", or \"sliding\"","type":"string"}},"required":["type","name","windowType"],"title":"WindowByTimeOperation","type":"object"},"WindowStateStoreDefinition":{"additionalProperties":false,"description":"Definition of a window state store","properties":{"caching":{"description":"*(optional)* \"true\" if changed to the window store need to be buffered and periodically released, \"false\" to emit all changes directly Default: false","type":"boolean"},"keyType":{"description":"*(optional)* The key type of the window store","type":"string"},"logging":{"description":"*(optional)* \"true\" if a changelog topic should be set up on Kafka for this window store, \"false\" otherwise Default: false","type":"boolean"},"name":{"description":"*(optional)* The name of the window store. If this field is not defined, then the name is derived from the context.","type":"string"},"persistent":{"description":"*(optional)* \"true\" if this window store needs to be stored on disk, \"false\" otherwise Default: false","type":"boolean"},"retainDuplicates":{"description":"*(optional)* Whether or not to retain duplicates Default: false","type":"boolean"},"retention":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* The duration for which elements in the window store are retained"},"timestamped":{"description":"*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise Default: false","type":"boolean"},"type":{"description":"The type of the state store, fixed value \"window\" Default: window","enum":["window"]},"valueType":{"description":"*(optional)* The value type of the window store","type":"string"},"windowSize":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* Size of the windows (cannot be negative)"}},"required":["type"],"title":"WindowStateStoreDefinition","type":"object"},"WindowStateStoreDefinitionWithImplicitType":{"additionalProperties":false,"description":"Definition of a window state store","properties":{"caching":{"description":"*(optional)* \"true\" if changed to the window store need to be buffered and periodically released, \"false\" to emit all changes directly Default: false","type":"boolean"},"keyType":{"description":"*(optional)* The key type of the window store","type":"string"},"logging":{"description":"*(optional)* \"true\" if a changelog topic should be set up on Kafka for this window store, \"false\" otherwise Default: false","type":"boolean"},"name":{"description":"*(optional)* The name of the window store. If this field is not defined, then the name is derived from the context.","type":"string"},"persistent":{"description":"*(optional)* \"true\" if this window store needs to be stored on disk, \"false\" otherwise Default: false","type":"boolean"},"retainDuplicates":{"description":"*(optional)* Whether or not to retain duplicates Default: false","type":"boolean"},"retention":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* The duration for which elements in the window store are retained"},"timestamped":{"description":"*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise Default: false","type":"boolean"},"type":{"description":"*(optional)* The type of the state store, fixed value \"window\" Default: window","enum":["window"]},"valueType":{"description":"*(optional)* The value type of the window store","type":"string"},"windowSize":{"anyOf":[{"type":"number"},{"type":"string"}],"description":"*(optional)* Size of the windows (cannot be negative)"}},"title":"WindowStateStoreDefinitionWithImplicitType","type":"object"}},"description":"KSML definition","properties":{"functions":{"description":"*(optional)* Functions that can be referenced in producers and pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"anyOf":[{"$ref":"#/definitions/AggregatorDefinition"},{"$ref":"#/definitions/ForEachActionDefinition"},{"$ref":"#/definitions/ForeignKeyExtractorDefinition"},{"$ref":"#/definitions/GeneratorDefinition"},{"$ref":"#/definitions/GenericFunctionDefinition"},{"$ref":"#/definitions/InitializerDefinition"},{"$ref":"#/definitions/KeyTransformerDefinition"},{"$ref":"#/definitions/KeyValueMapperDefinition"},{"$ref":"#/definitions/KeyValuePrinterDefinition"},{"$ref":"#/definitions/KeyValueToKeyValueListTransformerDefinition"},{"$ref":"#/definitions/KeyValueToValueListTransformerDefinition"},{"$ref":"#/definitions/KeyValueTransformerDefinition"},{"$ref":"#/definitions/MergerDefinition"},{"$ref":"#/definitions/PredicateDefinition"},{"$ref":"#/definitions/ReducerDefinition"},{"$ref":"#/definitions/StreamPartitionerDefinition"},{"$ref":"#/definitions/TopicNameExtractorDefinition"},{"$ref":"#/definitions/ValueJoinerDefinition"},{"$ref":"#/definitions/ValueTransformerDefinition"}]}},"type":"object"},"globalTables":{"description":"*(optional)* GlobalTables that can be referenced in producers and pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"$ref":"#/definitions/GlobalTableDefinition"}},"type":"object"},"pipelines":{"description":"*(optional)* Collection of named pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"$ref":"#/definitions/PipelineDefinition"}},"type":"object"},"producers":{"description":"*(optional)* Collection of named producers Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"$ref":"#/definitions/ProducerDefinition"}},"type":"object"},"stores":{"description":"*(optional)* State stores that can be referenced in producers and pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"anyOf":[{"$ref":"#/definitions/KeyValueStateStoreDefinition"},{"$ref":"#/definitions/SessionStateStoreDefinition"},{"$ref":"#/definitions/WindowStateStoreDefinition"}]}},"type":"object"},"streams":{"description":"*(optional)* Streams that can be referenced in producers and pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"$ref":"#/definitions/StreamDefinition"}},"type":"object"},"tables":{"description":"*(optional)* Tables that can be referenced in producers and pipelines Default: {}","patternProperties":{"^[a-zA-Z0-9_]+$":{"$ref":"#/definitions/TableDefinition"}},"type":"object"}},"title":"TopologyDefinition","type":"object"}
