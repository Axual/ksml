Struct: {"additionalProperties":false, "definitions":Struct: {"AggregateOperation":Struct: {"additionalProperties":false, "description":"An aggregate operation", "properties":Struct: {"adder":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/AggregatorDefinition"}], "description":"(Optional) (GroupedTable) A function that adds a record to the aggregation result"}, "aggregator":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/AggregatorDefinition"}], "description":"(Optional) (GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"}, "initializer":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/InitializerDefinition"}], "description":"The initializer function, which generates an initial value for every set of aggregated records"}, "merger":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/MergerDefinition"}], "description":"(Optional) (SessionWindowedStream, SessionWindowedCogroupedStream) A function that combines two aggregation results"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}], "description":"(Optional) Materialized view of the aggregation"}, "subtractor":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/AggregatorDefinition"}], "description":"(Optional) (GroupedTable) A function that removes a record from the aggregation result"}, "type":Struct: {"description":"The type of the operation, fixed value "aggregate"", "enum":List<?>: [aggregate]}}, "required":List<String>: [type, initializer], "title":"AggregateOperation", "type":"object"}, "AggregatorDefinition":Struct: {"additionalProperties":false, "description":"Defines a aggregator function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the aggregator"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the aggregator"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the aggregator. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the aggregator. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the aggregator", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the aggregator", "type":"string"}, "stores":Struct: {"description":"A list of store names that the aggregator uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "aggregator"", "enum":List<?>: [aggregator]}}, "title":"AggregatorDefinition", "type":"object"}, "BranchDefinition":Struct: {"additionalProperties":false, "description":"Defines one branch in a BranchOperation", "properties":Struct: {"as":Struct: {"description":"(Optional) The name to register the pipeline result under, which can be used as source by follow-up pipelines", "type":"string"}, "branch":Struct: {"description":"(Optional) Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate", "items":Struct: {"$ref":"#/definitions/BranchDefinition"}, "type":"array"}, "forEach":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ForEachActionDefinition"}], "description":"(Optional) A function that gets called for every message in the stream"}, "if":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/PredicateDefinition"}], "description":"(Optional) Defines the condition under which messages get sent down this branch"}, "name":Struct: {"description":"(Optional) The name of the operation processor", "type":"string"}, "print":Struct: {"$ref":"#/definitions/PrintOperation", "description":"(Optional) The specification of where to print messages to"}, "stores":Struct: {"description":"(Optional) The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "to":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ToOperation"}], "description":"(Optional) (Optional) Ends the pipeline by sending all messages to a fixed topic, or to a topic returned by a topic name extractor function"}, "via":Struct: {"description":"A series of operations performed on the input stream", "items":Struct: {"anyOf":List<?>: [Struct: {"$ref":"#/definitions/CogroupOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToValueListOperation"}, Struct: {"$ref":"#/definitions/GroupByOperation"}, Struct: {"$ref":"#/definitions/FilterNotOperation"}, Struct: {"$ref":"#/definitions/ToStreamOperation"}, Struct: {"$ref":"#/definitions/AggregateOperation"}, Struct: {"$ref":"#/definitions/ConvertValueOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/GroupByKeyOperation"}, Struct: {"$ref":"#/definitions/MergeOperation"}, Struct: {"$ref":"#/definitions/WindowByTimeOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/ToTableOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/RepartitionOperation"}, Struct: {"$ref":"#/definitions/ReduceOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToValueListOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/ConvertKeyOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/CountOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"}, Struct: {"$ref":"#/definitions/SuppressOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/PeekOperation"}, Struct: {"$ref":"#/definitions/FilterOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"}, Struct: {"$ref":"#/definitions/ConvertKeyValueOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/WindowBySessionOperation"}]}, "type":"array"}}, "title":"BranchDefinition", "type":"object"}, "CogroupOperation":Struct: {"additionalProperties":false, "description":"A cogroup operation", "properties":Struct: {"aggregator":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/AggregatorDefinition"}], "description":"(GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}], "description":"(Optional) Materialized view of the cogroup"}, "type":Struct: {"description":"The type of the operation, fixed value "cogroup"", "enum":List<?>: [cogroup]}}, "required":List<String>: [type, aggregator], "title":"CogroupOperation", "type":"object"}, "ConvertKeyOperation":Struct: {"additionalProperties":false, "description":"An operation to convert the stream key type to another type. Conversion is only syntactic, eg. from Avro to XML.", "properties":Struct: {"into":Struct: {"description":"The type to convert the stream key into", "type":"string"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "convertKey"", "enum":List<?>: [convertKey]}}, "required":List<String>: [type, into], "title":"ConvertKeyOperation", "type":"object"}, "ConvertKeyValueOperation":Struct: {"additionalProperties":false, "description":"An operation to convert the stream key and value types to other types. Conversion is only syntactic, eg. from Avro to XML.", "properties":Struct: {"into":Struct: {"description":"The tuple type to convert the stream key/value into", "type":"string"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "convertKeyValue"", "enum":List<?>: [convertKeyValue]}}, "required":List<String>: [type, into], "title":"ConvertKeyValueOperation", "type":"object"}, "ConvertValueOperation":Struct: {"additionalProperties":false, "description":"An operation to convert the stream value type to another type. Conversion is only syntactic, eg. from Avro to XML.", "properties":Struct: {"into":Struct: {"description":"The type to convert the stream value into", "type":"string"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "convertValue"", "enum":List<?>: [convertValue]}}, "required":List<String>: [type, into], "title":"ConvertValueOperation", "type":"object"}, "CountOperation":Struct: {"additionalProperties":false, "description":"Count the number of times a key is seen in a given window", "properties":Struct: {"name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}, Struct: {"$ref":"#/definitions/SessionStateStoreDefinition"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}], "description":"(Optional) Materialized view of the count operation's result"}, "type":Struct: {"description":"The type of the operation, fixed value "count"", "enum":List<?>: [count]}}, "required":List<String>: [type], "title":"CountOperation", "type":"object"}, "FilterNotOperation":Struct: {"additionalProperties":false, "description":"Filter records based on the inverse result of a predicate function", "properties":Struct: {"if":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/PredicateDefinition"}], "description":"A function that returns "false" when records are accepted, "true" otherwise"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "filterNot"", "enum":List<?>: [filterNot]}}, "required":List<String>: [type, if], "title":"FilterNotOperation", "type":"object"}, "FilterOperation":Struct: {"additionalProperties":false, "description":"Filter records based on a predicate function", "properties":Struct: {"if":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/PredicateDefinition"}], "description":"A function that returns "true" when records are accepted, "false" otherwise"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "filter"", "enum":List<?>: [filter]}}, "required":List<String>: [type, if], "title":"FilterOperation", "type":"object"}, "ForEachActionDefinition":Struct: {"additionalProperties":false, "description":"Defines a foreach action function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the foreach action"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the foreach action"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the foreach action. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the foreach action. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the foreach action", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the foreach action", "type":"string"}, "stores":Struct: {"description":"A list of store names that the foreach action uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "forEach"", "enum":List<?>: [forEach]}}, "title":"ForEachActionDefinition", "type":"object"}, "ForeignKeyExtractorDefinition":Struct: {"additionalProperties":false, "description":"Defines a foreign key extractor function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the foreign key extractor"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the foreign key extractor"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the foreign key extractor. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the foreign key extractor. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the foreign key extractor", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the foreign key extractor", "type":"string"}, "stores":Struct: {"description":"A list of store names that the foreign key extractor uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "forEach"", "enum":List<?>: [forEach]}}, "title":"ForeignKeyExtractorDefinition", "type":"object"}, "GeneratorDefinition":Struct: {"additionalProperties":false, "description":"Defines a message generator function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the message generator"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the message generator"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the message generator. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the message generator. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the message generator", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the message generator", "type":"string"}, "stores":Struct: {"description":"A list of store names that the message generator uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "generator"", "enum":List<?>: [generator]}}, "title":"GeneratorDefinition", "type":"object"}, "GenericFunctionDefinition":Struct: {"additionalProperties":false, "description":"Defines a generic function function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the generic function"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the generic function"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the generic function. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the generic function. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the generic function", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the generic function", "type":"string"}, "stores":Struct: {"description":"A list of store names that the generic function uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "generic"", "enum":List<?>: [generic]}}, "title":"GenericFunctionDefinition", "type":"object"}, "GlobalTableDefinition":Struct: {"additionalProperties":false, "description":"Contains a definition of a GlobalTable, which can be referenced by producers and pipelines", "properties":Struct: {"keyType":Struct: {"description":"The key type of the global table", "type":"string"}, "topic":Struct: {"description":"The name of the Kafka topic for this global table", "type":"string"}, "valueType":Struct: {"description":"The value type of the global table", "type":"string"}}, "required":List<String>: [topic, keyType, valueType], "title":"GlobalTableDefinition", "type":"object"}, "GroupByKeyOperation":Struct: {"additionalProperties":false, "description":"Operation to group all messages with the same key together", "properties":Struct: {"name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}], "description":"(Optional) Materialized view of the grouped stream"}, "type":Struct: {"description":"The type of the operation, fixed value "groupByKey"", "enum":List<?>: [groupByKey]}}, "required":List<String>: [type], "title":"GroupByKeyOperation", "type":"object"}, "GroupByOperation":Struct: {"additionalProperties":false, "description":"Operation to group all messages with together based on a keying function", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueMapperDefinition"}], "description":"Function to map records to a key they can be grouped on"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}], "description":"(Optional) Materialized view of the grouped stream or table"}, "type":Struct: {"description":"The type of the operation, fixed value "groupByKey"", "enum":List<?>: [groupByKey]}}, "required":List<String>: [type, mapper], "title":"GroupByOperation", "type":"object"}, "InitializerDefinition":Struct: {"additionalProperties":false, "description":"Defines a initializer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the initializer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the initializer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the initializer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the initializer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the initializer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the initializer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the initializer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "initializer"", "enum":List<?>: [initializer]}}, "title":"InitializerDefinition", "type":"object"}, "JoinOperation":Struct: {"additionalProperties":false, "description":"Defines a join operation", "properties":Struct: {"foreignKeyExtractor":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ValueJoinerDefinition"}], "description":"(Table joins) A function that can translate the join table value to a primary key"}, "globalTable":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/GlobalTableDefinition"}], "description":"(Required for GlobalTable joins) A reference to the GlobalTable, or an inline definition of the GlobalTable to join with"}, "grace":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Table joins) The window grace period (the time to admit out-of-order events after the end of the window)"}, "mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ValueJoinerDefinition"}], "description":"(GlobalTable joins) A function that maps the key value from the stream with the primary key of the GlobalTable"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "otherPartitioner":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/StreamPartitionerDefinition"}], "description":"(Optional) (Table joins) A function that partitions the records on the join table"}, "partitioner":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/StreamPartitionerDefinition"}], "description":"(Optional) (Table joins) A function that partitions the records on the primary table"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}, Struct: {"$ref":"#/definitions/SessionStateStoreDefinition"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}], "description":"(Optional) Materialized view of the joined streams"}, "stream":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/StreamDefinition"}], "description":"(Required for Stream joins) A reference to the Stream, or an inline definition of the Stream to join with"}, "table":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/TableDefinition"}], "description":"(Required for Table joins) A reference to the Table, or an inline definition of the Table to join with"}, "type":Struct: {"description":"The type of the operation, fixed value "join"", "type":"string"}, "valueJoiner":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ValueJoinerDefinition"}], "description":"(GlobalTable joins) A function that joins two values"}, "window":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Stream joins) The maximum time difference for a join over two streams on the same key"}}, "required":List<String>: [type, stream, valueJoiner, window, type, table, foreignKeyExtractor, valueJoiner, type, globalTable, mapper, valueJoiner], "title":"JoinOperation", "type":"object"}, "KeyTransformerDefinition":Struct: {"additionalProperties":false, "description":"Defines a key transformer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the key transformer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the key transformer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the key transformer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the key transformer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the key transformer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the key transformer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the key transformer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyTransformer"", "enum":List<?>: [keyTransformer]}}, "title":"KeyTransformerDefinition", "type":"object"}, "KeyValueMapperDefinition":Struct: {"additionalProperties":false, "description":"Defines a keyvalue mapper function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the keyvalue mapper"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the keyvalue mapper"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the keyvalue mapper. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the keyvalue mapper. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the keyvalue mapper", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the keyvalue mapper", "type":"string"}, "stores":Struct: {"description":"A list of store names that the keyvalue mapper uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyValueMapper"", "enum":List<?>: [keyValueMapper]}}, "title":"KeyValueMapperDefinition", "type":"object"}, "KeyValuePrinterDefinition":Struct: {"additionalProperties":false, "description":"Defines a keyvalue printer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the keyvalue printer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the keyvalue printer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the keyvalue printer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the keyvalue printer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the keyvalue printer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the keyvalue printer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the keyvalue printer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyValuePrinter"", "enum":List<?>: [keyValuePrinter]}}, "title":"KeyValuePrinterDefinition", "type":"object"}, "KeyValueStateStoreDefinition":Struct: {"additionalProperties":false, "description":"Definition of a keyValue state store", "properties":Struct: {"caching":Struct: {"description":""true" if changed to the keyValue store need to be buffered and periodically released, "false" to emit all changes directly", "type":"boolean"}, "historyRetention":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Versioned only) The duration for which old record versions are available for query (cannot be negative)"}, "keyType":Struct: {"description":"The key type of the keyValue store", "type":"string"}, "logging":Struct: {"description":""true" if a changelog topic should be set up on Kafka for this keyValue store, "false" otherwise", "type":"boolean"}, "name":Struct: {"description":"The name of the keyValue store. If this field is not defined, then the name is derived from the context.", "type":"string"}, "persistent":Struct: {"description":""true" if this keyValue store needs to be stored on disk, "false" otherwise", "type":"boolean"}, "segmentInterval":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."}, "timestamped":Struct: {"description":""true" if elements in the store are timestamped, "false" otherwise", "type":"boolean"}, "type":Struct: {"description":"The type of the state store, fixed value "keyValue"", "enum":List<?>: [keyValue]}, "valueType":Struct: {"description":"The value type of the keyValue store", "type":"string"}, "versioned":Struct: {"description":""true" if elements in the store are versioned, "false" otherwise", "type":"boolean"}}, "title":"KeyValueStateStoreDefinition", "type":"object"}, "KeyValueToKeyValueListTransformerDefinition":Struct: {"additionalProperties":false, "description":"Defines a keyvalue-to-keyvaluelist transformer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the keyvalue-to-keyvaluelist transformer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the keyvalue-to-keyvaluelist transformer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-keyvaluelist transformer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the keyvalue-to-keyvaluelist transformer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the keyvalue-to-keyvaluelist transformer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the keyvalue-to-keyvaluelist transformer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the keyvalue-to-keyvaluelist transformer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyValueToKeyValueListTransformer"", "enum":List<?>: [keyValueToKeyValueListTransformer]}}, "title":"KeyValueToKeyValueListTransformerDefinition", "type":"object"}, "KeyValueToValueListTransformerDefinition":Struct: {"additionalProperties":false, "description":"Defines a keyvalue-to-valuelist transformer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the keyvalue-to-valuelist transformer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the keyvalue-to-valuelist transformer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-valuelist transformer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the keyvalue-to-valuelist transformer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the keyvalue-to-valuelist transformer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the keyvalue-to-valuelist transformer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the keyvalue-to-valuelist transformer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyValueToValueListTransformer"", "enum":List<?>: [keyValueToValueListTransformer]}}, "title":"KeyValueToValueListTransformerDefinition", "type":"object"}, "KeyValueTransformerDefinition":Struct: {"additionalProperties":false, "description":"Defines a keyvalue transformer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the keyvalue transformer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the keyvalue transformer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the keyvalue transformer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the keyvalue transformer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the keyvalue transformer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the keyvalue transformer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the keyvalue transformer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "keyValueTransformer"", "enum":List<?>: [keyValueTransformer]}}, "title":"KeyValueTransformerDefinition", "type":"object"}, "MergeOperation":Struct: {"additionalProperties":false, "description":"A merge operation to join two Streams", "properties":Struct: {"name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stream":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/StreamDefinition"}], "description":"The stream to merge with"}, "type":Struct: {"description":"The type of the operation, fixed value "merge"", "enum":List<?>: [merge]}}, "required":List<String>: [type, stream], "title":"MergeOperation", "type":"object"}, "MergerDefinition":Struct: {"additionalProperties":false, "description":"Defines a merger function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the merger"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the merger"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the merger. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the merger. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the merger", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the merger", "type":"string"}, "stores":Struct: {"description":"A list of store names that the merger uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "merger"", "enum":List<?>: [merger]}}, "title":"MergerDefinition", "type":"object"}, "ParameterDefinition":Struct: {"additionalProperties":false, "description":"Defines a parameter for a user function", "properties":Struct: {"defaultValue":Struct: {"description":"The default value for the parameter", "type":"string"}, "name":Struct: {"description":"The name of the parameter", "type":"string"}, "type":Struct: {"description":"The type of the parameter", "type":"string"}}, "required":List<String>: [name, type], "title":"ParameterDefinition", "type":"object"}, "PeekOperation":Struct: {"additionalProperties":false, "description":"Operation to peek into a stream, without modifying the stream contents", "properties":Struct: {"forEach":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ForEachActionDefinition"}], "description":"A function that gets called for every message in the stream"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "peek"", "enum":List<?>: [peek]}}, "required":List<String>: [type, forEach], "title":"PeekOperation", "type":"object"}, "PipelineDefinition":Struct: {"additionalProperties":false, "description":"Defines a pipeline through a source, a series of operations to perform on it and a sink operation to close the stream with", "properties":Struct: {"as":Struct: {"description":"(Optional) The name to register the pipeline result under, which can be used as source by follow-up pipelines", "type":"string"}, "branch":Struct: {"description":"(Optional) Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate", "items":Struct: {"$ref":"#/definitions/BranchDefinition"}, "type":"array"}, "forEach":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ForEachActionDefinition"}], "description":"(Optional) A function that gets called for every message in the stream"}, "from":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/TopicDefinition"}], "description":"Pipeline source"}, "name":Struct: {"description":"(Optional) The name of the operation processor", "type":"string"}, "print":Struct: {"$ref":"#/definitions/PrintOperation", "description":"(Optional) The specification of where to print messages to"}, "stores":Struct: {"description":"(Optional) The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "to":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ToOperation"}], "description":"(Optional) (Optional) Ends the pipeline by sending all messages to a fixed topic, or to a topic returned by a topic name extractor function"}, "via":Struct: {"description":"A series of operations performed on the input stream", "items":Struct: {"anyOf":List<?>: [Struct: {"$ref":"#/definitions/CogroupOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToValueListOperation"}, Struct: {"$ref":"#/definitions/GroupByOperation"}, Struct: {"$ref":"#/definitions/FilterNotOperation"}, Struct: {"$ref":"#/definitions/ToStreamOperation"}, Struct: {"$ref":"#/definitions/AggregateOperation"}, Struct: {"$ref":"#/definitions/ConvertValueOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/GroupByKeyOperation"}, Struct: {"$ref":"#/definitions/MergeOperation"}, Struct: {"$ref":"#/definitions/WindowByTimeOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/ToTableOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/RepartitionOperation"}, Struct: {"$ref":"#/definitions/ReduceOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToValueListOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/ConvertKeyOperation"}, Struct: {"$ref":"#/definitions/TransformValueOperation"}, Struct: {"$ref":"#/definitions/CountOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"}, Struct: {"$ref":"#/definitions/SuppressOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/PeekOperation"}, Struct: {"$ref":"#/definitions/FilterOperation"}, Struct: {"$ref":"#/definitions/TransformKeyValueToKeyValueListOperation"}, Struct: {"$ref":"#/definitions/ConvertKeyValueOperation"}, Struct: {"$ref":"#/definitions/TransformKeyOperation"}, Struct: {"$ref":"#/definitions/JoinOperation"}, Struct: {"$ref":"#/definitions/WindowBySessionOperation"}]}, "type":"array"}}, "required":List<String>: [from], "title":"PipelineDefinition", "type":"object"}, "PredicateDefinition":Struct: {"additionalProperties":false, "description":"Defines a predicate function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the predicate"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the predicate"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the predicate. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the predicate. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the predicate", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the predicate", "type":"string"}, "stores":Struct: {"description":"A list of store names that the predicate uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "predicate"", "enum":List<?>: [predicate]}}, "title":"PredicateDefinition", "type":"object"}, "PrintOperation":Struct: {"additionalProperties":false, "description":"Operation to print the contents of a pipeline on the screen or to write them to a file", "properties":Struct: {"filename":Struct: {"description":"The filename to output records to. If nothing is specified, then messages will be printed on stdout", "type":"string"}, "label":Struct: {"description":"A label to attach to the output records", "type":"string"}, "mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValuePrinterDefinition"}], "description":"(Optional) A function to convert record into a string for output"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}}, "title":"PrintOperation", "type":"object"}, "ProducerDefinition":Struct: {"additionalProperties":false, "description":"Definition of a Producer that regularly generates messages for a topic", "properties":Struct: {"condition":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/PredicateDefinition"}], "description":"(Optional) A function that validates the generator's result message. Returns "true" when the message may be produced on the topic, "false" otherwise."}, "generator":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/GeneratorDefinition"}], "description":"The function that generates records"}, "interval":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"The interval with which the generator is called"}, "to":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/TopicDefinition"}], "description":"The topic to produce to"}}, "required":List<String>: [generator, interval, to], "title":"ProducerDefinition", "type":"object"}, "ReduceOperation":Struct: {"additionalProperties":false, "description":"Operation to reduce a series of records into a single aggregate result", "properties":Struct: {"adder":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ReducerDefinition"}], "description":"A function that adds a record to the aggregate result"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "reducer":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ReducerDefinition"}], "description":"A function that computes a new aggregate result"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}], "description":"(Optional) Materialized view of the aggregation"}, "subtractor":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ReducerDefinition"}], "description":"A function that removes a record from the aggregate result"}, "type":Struct: {"description":"The type of the operation, fixed value "reduce"", "enum":List<?>: [reduce]}}, "required":List<String>: [type, reducer, adder, subtractor], "title":"ReduceOperation", "type":"object"}, "ReducerDefinition":Struct: {"additionalProperties":false, "description":"Defines a reducer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the reducer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the reducer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the reducer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the reducer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the reducer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the reducer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the reducer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "reducer"", "enum":List<?>: [reducer]}}, "title":"ReducerDefinition", "type":"object"}, "RepartitionOperation":Struct: {"additionalProperties":false, "description":"Operation to (re)partition a stream", "properties":Struct: {"name":Struct: {"description":"The name of the operation processor", "type":"string"}, "partitioner":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/StreamPartitionerDefinition"}], "description":"A function that partitions stream records"}, "type":Struct: {"description":"The type of the operation, fixed value "repartition"", "enum":List<?>: [repartition]}}, "required":List<String>: [type, partitioner], "title":"RepartitionOperation", "type":"object"}, "SessionStateStoreDefinition":Struct: {"additionalProperties":false, "description":"Definition of a session state store", "properties":Struct: {"caching":Struct: {"description":""true" if changed to the session store need to be buffered and periodically released, "false" to emit all changes directly", "type":"boolean"}, "keyType":Struct: {"description":"The key type of the session store", "type":"string"}, "logging":Struct: {"description":""true" if a changelog topic should be set up on Kafka for this session store, "false" otherwise", "type":"boolean"}, "name":Struct: {"description":"The name of the session store. If this field is not defined, then the name is derived from the context.", "type":"string"}, "persistent":Struct: {"description":""true" if this session store needs to be stored on disk, "false" otherwise", "type":"boolean"}, "retention":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"The duration for which elements in the session store are retained"}, "timestamped":Struct: {"description":""true" if elements in the store are timestamped, "false" otherwise", "type":"boolean"}, "type":Struct: {"description":"The type of the state store, fixed value "session"", "enum":List<?>: [session]}, "valueType":Struct: {"description":"The value type of the session store", "type":"string"}}, "required":List<String>: [type], "title":"SessionStateStoreDefinition", "type":"object"}, "StreamDefinition":Struct: {"additionalProperties":false, "description":"Contains a definition of a Stream, which can be referenced by producers and pipelines", "properties":Struct: {"keyType":Struct: {"description":"The key type of the stream", "type":"string"}, "topic":Struct: {"description":"The name of the Kafka topic for this stream", "type":"string"}, "valueType":Struct: {"description":"The value type of the stream", "type":"string"}}, "required":List<String>: [topic, keyType, valueType], "title":"StreamDefinition", "type":"object"}, "StreamPartitionerDefinition":Struct: {"additionalProperties":false, "description":"Defines a stream partitioner function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the stream partitioner"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the stream partitioner"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the stream partitioner. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the stream partitioner", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the stream partitioner", "type":"string"}, "stores":Struct: {"description":"A list of store names that the stream partitioner uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "streamPartitioner"", "enum":List<?>: [streamPartitioner]}}, "title":"StreamPartitionerDefinition", "type":"object"}, "SuppressOperation":Struct: {"additionalProperties":false, "description":"Operation to suppress messages in the source stream until a certain limit is reached", "properties":Struct: {"bufferFullStrategy":Struct: {"description":"What to do when the buffer is full, either "emitEarlyWhenFull", or "shutdownWhenFull"", "type":"string"}, "duration":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"The duration for which messages are suppressed"}, "maxBytes":Struct: {"description":"The maximum number of bytes in the buffer", "type":"string"}, "maxRecords":Struct: {"description":"The maximum number of records in the buffer", "type":"string"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "suppress"", "enum":List<?>: [suppress]}, "until":Struct: {"description":"The method by which messages are held, either "timeLimit", or "windowCloses"", "type":"string"}}, "required":List<String>: [type, until, duration], "title":"SuppressOperation", "type":"object"}, "TableDefinition":Struct: {"additionalProperties":false, "description":"Contains a definition of a Table, which can be referenced by producers and pipelines", "properties":Struct: {"keyType":Struct: {"description":"The key type of the table", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"null"}, Struct: {"$ref":"#/definitions/UnnamedStructSchema"}], "description":"Definition of the keyValue state store associated with the table"}, "topic":Struct: {"description":"The name of the Kafka topic for this table", "type":"string"}, "valueType":Struct: {"description":"The value type of the table", "type":"string"}}, "required":List<String>: [topic, keyType, valueType], "title":"TableDefinition", "type":"object"}, "ToOperation":Struct: {"additionalProperties":false, "description":"Either a topic or topic name extractor that defines where to write pipeline messages to", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the stream partitioner"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the stream partitioner"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."}, "keyType":Struct: {"description":"(Optional) The key type of the topic", "type":"string"}, "name":Struct: {"description":"The name of the stream partitioner. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the stream partitioner", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the stream partitioner", "type":"string"}, "stores":Struct: {"description":"A list of store names that the stream partitioner uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "topic":Struct: {"description":"(Optional) The name of the Kafka topic", "type":"string"}, "topicNameExtractor":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/TopicNameExtractorDefinition"}], "description":"(Optional) Reference to a pre-defined topic name extractor, or an inline definition of a topic name extractor and an optional stream partitioner"}, "type":Struct: {"description":"The type of the function, fixed value "streamPartitioner"", "enum":List<?>: [streamPartitioner]}, "valueType":Struct: {"description":"(Optional) The value type of the topic", "type":"string"}}, "title":"ToOperation", "type":"object"}, "ToStreamOperation":Struct: {"additionalProperties":false, "description":"Convert a Table into a Stream, optionally through a custom key transformer", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyTransformerDefinition"}], "description":"A function that computes the output key for every record"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "toStream"", "enum":List<?>: [toStream]}}, "required":List<String>: [type, mapper], "title":"ToStreamOperation", "type":"object"}, "ToTableOperation":Struct: {"additionalProperties":false, "description":"Convert a Stream into a Table", "properties":Struct: {"name":Struct: {"description":"The name of the operation processor", "type":"string"}, "store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}], "description":"(Optional) Materialized view of the Table"}, "type":Struct: {"description":"The type of the operation, fixed value "toTable"", "enum":List<?>: [toTable]}}, "required":List<String>: [type], "title":"ToTableOperation", "type":"object"}, "TopicDefinition":Struct: {"additionalProperties":false, "description":"Contains a definition of a Kafka topic, to be used by producers and pipelines", "properties":Struct: {"keyType":Struct: {"description":"The key type of the topic", "type":"string"}, "topic":Struct: {"description":"The name of the Kafka topic", "type":"string"}, "valueType":Struct: {"description":"The value type of the topic", "type":"string"}}, "required":List<String>: [topic, keyType, valueType], "title":"TopicDefinition", "type":"object"}, "TopicNameExtractorDefinition":Struct: {"additionalProperties":false, "description":"Defines a topic name extractor function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the topic name extractor"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the topic name extractor"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the topic name extractor. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the topic name extractor. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the topic name extractor", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the topic name extractor", "type":"string"}, "stores":Struct: {"description":"A list of store names that the topic name extractor uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "topicNameExtractor"", "enum":List<?>: [topicNameExtractor]}}, "title":"TopicNameExtractorDefinition", "type":"object"}, "TransformKeyOperation":Struct: {"additionalProperties":false, "description":"Convert the key of every record in the stream to another key", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyTransformerDefinition"}], "description":"A function that computes a new key for each record"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "transformKey"", "enum":List<?>: [transformKey]}}, "required":List<String>: [type, mapper], "title":"TransformKeyOperation", "type":"object"}, "TransformKeyValueOperation":Struct: {"additionalProperties":false, "description":"Convert the key/value of every record in the stream to another key/value", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueTransformerDefinition"}], "description":"A function that computes a new key/value for each record"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "transformKeyValue"", "enum":List<?>: [transformKeyValue]}}, "required":List<String>: [type, mapper], "title":"TransformKeyValueOperation", "type":"object"}, "TransformKeyValueToKeyValueListOperation":Struct: {"additionalProperties":false, "description":"Convert a stream by transforming every record into a list of derived records", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueToKeyValueListTransformerDefinition"}], "description":"A function that converts every record of a stream to a list of output records."}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "transformKeyValueToKeyValueList"", "enum":List<?>: [transformKeyValueToKeyValueList]}}, "required":List<String>: [type, mapper], "title":"TransformKeyValueToKeyValueListOperation", "type":"object"}, "TransformKeyValueToValueListOperation":Struct: {"additionalProperties":false, "description":"Convert every record in the stream to a list of output records with the same key", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueToValueListTransformerDefinition"}], "description":"A function that converts every key/value into a list of result values, which will be combined with the original key in the output stream"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "transformKeyValueToValueList"", "enum":List<?>: [transformKeyValueToValueList]}}, "required":List<String>: [type, mapper], "title":"TransformKeyValueToValueListOperation", "type":"object"}, "TransformValueOperation":Struct: {"additionalProperties":false, "description":"Convert the value of every record in the stream to another value", "properties":Struct: {"mapper":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/ValueTransformerDefinition"}], "description":"A function that converts the value of every record into another value"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "stores":Struct: {"description":"The names of all state stores used by the function", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the operation, fixed value "transformValue"", "enum":List<?>: [transformValue]}}, "required":List<String>: [type, mapper], "title":"TransformValueOperation", "type":"object"}, "UnnamedStructSchema":Struct: {"additionalProperties":false, "properties":Struct: {"store":Struct: {"anyOf":List<?>: [Struct: {"type":"string"}, Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}], "description":"State store definition"}}, "required":List<String>: [store], "title":"UnnamedStructSchema", "type":"object"}, "ValueJoinerDefinition":Struct: {"additionalProperties":false, "description":"Defines a value joiner function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the value joiner"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the value joiner"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the value joiner. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the value joiner. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the value joiner", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the value joiner", "type":"string"}, "stores":Struct: {"description":"A list of store names that the value joiner uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "valueJoiner"", "enum":List<?>: [valueJoiner]}}, "title":"ValueJoinerDefinition", "type":"object"}, "ValueTransformerDefinition":Struct: {"additionalProperties":false, "description":"Defines a value transformer function, that gets injected into the Kafka Streams topology", "properties":Struct: {"code":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The (multiline) code of the value transformer"}, "expression":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"The expression returned by the value transformer"}, "globalCode":Struct: {"anyOf":List<?>: [Struct: {"type":"boolean"}, Struct: {"type":"string"}], "description":"Global (multiline) code that gets loaded into the Python context outside of the value transformer. Can be used for defining eg. global variables."}, "name":Struct: {"description":"The name of the value transformer. If this field is not defined, then the name is derived from the context.", "type":"string"}, "parameters":Struct: {"description":"A list of parameters to be passed into the value transformer", "items":Struct: {"$ref":"#/definitions/ParameterDefinition"}, "type":"array"}, "resultType":Struct: {"description":"The data type returned by the value transformer", "type":"string"}, "stores":Struct: {"description":"A list of store names that the value transformer uses. Mandatory if the function wants to use a state store.", "items":Struct: {"type":"string"}, "type":"array"}, "type":Struct: {"description":"The type of the function, fixed value "valueTransformer"", "enum":List<?>: [valueTransformer]}}, "title":"ValueTransformerDefinition", "type":"object"}, "WindowBySessionOperation":Struct: {"additionalProperties":false, "description":"Operation to window messages by session, configured by an inactivity gap", "properties":Struct: {"grace":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Tumbling, Hopping) The grace period, during which out-of-order records can still be processed"}, "inactivityGap":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"The inactivity gap, below which two messages are considered to be of the same session"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "type":Struct: {"description":"The type of the operation, fixed value "windowBySession"", "enum":List<?>: [windowBySession]}}, "required":List<String>: [type, inactivityGap], "title":"WindowBySessionOperation", "type":"object"}, "WindowByTimeOperation":Struct: {"additionalProperties":false, "description":"Operation to reduce a series of records into a single aggregate result", "properties":Struct: {"advanceBy":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Hopping) The amount of time to increase time windows by"}, "duration":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Tumbling) The duration of time windows"}, "grace":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Tumbling, Hopping) The grace period, during which out-of-order records can still be processed"}, "name":Struct: {"description":"The name of the operation processor", "type":"string"}, "timeDifference":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"(Sliding) The maximum amount of time difference between two records"}, "type":Struct: {"description":"The type of the operation, fixed value "windowByTime"", "enum":List<?>: [windowByTime]}, "windowType":Struct: {"description":"The type of the operation, either "tumbling", or "hopping", or "sliding"", "type":"string"}}, "required":List<String>: [type, windowType, duration, advanceBy, timeDifference], "title":"WindowByTimeOperation", "type":"object"}, "WindowStateStoreDefinition":Struct: {"additionalProperties":false, "description":"Definition of a window state store", "properties":Struct: {"caching":Struct: {"description":""true" if changed to the window store need to be buffered and periodically released, "false" to emit all changes directly", "type":"boolean"}, "keyType":Struct: {"description":"The key type of the window store", "type":"string"}, "logging":Struct: {"description":""true" if a changelog topic should be set up on Kafka for this window store, "false" otherwise", "type":"boolean"}, "name":Struct: {"description":"The name of the window store. If this field is not defined, then the name is derived from the context.", "type":"string"}, "persistent":Struct: {"description":""true" if this window store needs to be stored on disk, "false" otherwise", "type":"boolean"}, "retainDuplicates":Struct: {"description":"Whether or not to retain duplicates", "type":"boolean"}, "retention":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"The duration for which elements in the window store are retained"}, "timestamped":Struct: {"description":""true" if elements in the store are timestamped, "false" otherwise", "type":"boolean"}, "type":Struct: {"description":"The type of the state store, fixed value "window"", "enum":List<?>: [window]}, "valueType":Struct: {"description":"The value type of the window store", "type":"string"}, "windowSize":Struct: {"anyOf":List<?>: [Struct: {"type":"number"}, Struct: {"type":"string"}], "description":"Size of the windows (cannot be negative)"}}, "required":List<String>: [type], "title":"WindowStateStoreDefinition", "type":"object"}}, "description":"A KSML topology description", "properties":Struct: {"functions":Struct: {"description":"Functions that can be referenced in producers and pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"anyOf":List<?>: [Struct: {"$ref":"#/definitions/ForeignKeyExtractorDefinition"}, Struct: {"$ref":"#/definitions/KeyValuePrinterDefinition"}, Struct: {"$ref":"#/definitions/KeyValueMapperDefinition"}, Struct: {"$ref":"#/definitions/TopicNameExtractorDefinition"}, Struct: {"$ref":"#/definitions/ForEachActionDefinition"}, Struct: {"$ref":"#/definitions/AggregatorDefinition"}, Struct: {"$ref":"#/definitions/GeneratorDefinition"}, Struct: {"$ref":"#/definitions/ValueTransformerDefinition"}, Struct: {"$ref":"#/definitions/KeyTransformerDefinition"}, Struct: {"$ref":"#/definitions/KeyValueToKeyValueListTransformerDefinition"}, Struct: {"$ref":"#/definitions/GenericFunctionDefinition"}, Struct: {"$ref":"#/definitions/InitializerDefinition"}, Struct: {"$ref":"#/definitions/KeyValueTransformerDefinition"}, Struct: {"$ref":"#/definitions/PredicateDefinition"}, Struct: {"$ref":"#/definitions/KeyValueToValueListTransformerDefinition"}, Struct: {"$ref":"#/definitions/StreamPartitionerDefinition"}, Struct: {"$ref":"#/definitions/ValueJoinerDefinition"}, Struct: {"$ref":"#/definitions/ReducerDefinition"}, Struct: {"$ref":"#/definitions/MergerDefinition"}]}}, "type":"object"}, "globalTables":Struct: {"description":"GlobalTables that can be referenced in producers and pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"$ref":"#/definitions/GlobalTableDefinition"}}, "type":"object"}, "pipelines":Struct: {"description":"Collection of named pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"$ref":"#/definitions/PipelineDefinition"}}, "type":"object"}, "producers":Struct: {"description":"Collection of named producers", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"$ref":"#/definitions/ProducerDefinition"}}, "type":"object"}, "stores":Struct: {"description":"State stores that can be referenced in producers and pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"anyOf":List<?>: [Struct: {"$ref":"#/definitions/KeyValueStateStoreDefinition"}, Struct: {"$ref":"#/definitions/SessionStateStoreDefinition"}, Struct: {"$ref":"#/definitions/WindowStateStoreDefinition"}]}}, "type":"object"}, "streams":Struct: {"description":"Streams that can be referenced in producers and pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"$ref":"#/definitions/StreamDefinition"}}, "type":"object"}, "tables":Struct: {"description":"Tables that can be referenced in producers and pipelines", "patternProperties":Struct: {"^[a-zA-Z0-9_]+$":Struct: {"$ref":"#/definitions/TableDefinition"}}, "type":"object"}}, "title":"TopologyDefinition", "type":"object"}
