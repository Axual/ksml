ksml:
  # The examples directory is mounted to /ksml in the Docker container
  configDirectory: examples       # When not set defaults to the working directory
  schemaDirectory: examples       # When not set defaults to the config directory
  storageDirectory: workspace/local          # When not set defaults to the default JVM temp directory

  # This section defines if a REST endpoint is opened on the KSML runner, through which
  # state stores and/or readiness / liveness probes can be accessed.
  applicationServer:
    enabled: true                # Set to true to enable, or false to disable
    host: 0.0.0.0                 # IP address to bind the REST server to
    port: 8080                    # Port number to listen on

  pythonContext:
    allowHostFileAccess: false           # host file access
    allowHostSocketAccess: false         # host socket access
    allowNativeAccess: false             # allow Graal native access / JNI
    allowCreateProcess: false            # allows guest language to execute external processes
    allowCreateThread: false             # permit new Java threads from guest code
    inheritEnvironmentVariables: false   # inherit the JVM process environment in the Python context

  # This section defines whether a Prometheus endpoint is opened to allow metric scraping.
  prometheus:
    enabled: true                # Set to true to enable, or false to disable
    host: 0.0.0.0                 # IP address to bind the Prometheus agent server to
    port: 9999                    # Port number to listen on

  # This section enables error handling or error ignoring for certain types of errors.
  errorHandling:
    consume:                      # Error handling definitions for consume errors
      log: true                   # Log errors true/false
      logPayload: true            # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ConsumeError    # Definition of the error logger name.
      handler: stopOnFail         # How to proceed after encountering the error. Either continueOnFail or stopOnFail.
    process:
      log: true                   # Log errors true/false
      logPayload: true            # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ProcessError    # Definition of the error logger name.
      handler: continueOnFail     # How to proceed after encountering the error. Either continueOnFail or stopOnFail.
    produce:
      log: true                   # Log errors true/false
      logPayload: true            # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ProduceError    # Definition of the error logger name.
      handler: continueOnFail     # How to proceed after encountering the error. Either continueOnFail or stopOnFail.

  enableProducers: false           # Set to true to allow producer definitions to be parsed in the KSML definitions and be executed.
  enablePipelines: true          # Set to true to allow pipeline definitions to be parsed in the KSML definitions and be executed.

  # This section tells KSML with which serializers / deserializers to handle certain notation types.
  notations:
    avro:                          # Definition for "avro" notation
      type: confluent_avro         # For AVRO there are two implementations: apicurio_avro and confluent_avro
      ## Below this line, specify properties to be passed into Confluent's KafkaAvroSerializer and KafkaAvroDeserializer
      config:
        schema.registry.url: http://localhost:8082/apis/ccompat/v7
        normalize.schemas: true
        auto.register.schemas: true
    protobuf:                      # Definition for "protobuf" notation
      type: apicurio_protobuf      # For Protobuf there is only one implementation: apicurio_protobuf
      ## Below this line, specify properties to be passed into Apicurio's ProtobufKafkaSerializer and ProtobufKafkaDeserializer
      config:
        apicurio.registry.url: http://localhost:8082/apis/registry/v2
        apicurio.registry.auto-register: "true"

  # Section where you specify which KSML definitions to load, parse and execute.
  definitions:
    inspect: 01-example-inspect.yaml
#    copy: 02-example-copy.yaml
#    filter: 03-example-filter.yaml
#    branch: 04-example-branch.yaml
#    route: 05-example-route.yaml
#    duplicate: 06-example-duplicate.yaml
#    convert: 07-example-convert.yaml
#    count: 08-example-count.yaml
#    aggregate: 09-example-aggregate.yaml
#    queryable_table: 10-example-queryable-table.yaml
#    field_modification: 11-example-field-modification.yaml
#    byte_manipulation: 12-example-byte-manipulation.yaml
#    join: 13-example-join.yaml
#    manual_state_store: 14-example-manual-state-store.yaml
#    pipeline_linking: 15-example-pipeline-linking.yaml
#    transform_metadata: 16-example-transform-metadata.yaml
#    inspect_with_metrics: 17-example-inspect-with-metrics.yaml
#    timestamp_extractor: 18-example-timestamp-extractor.yaml
#    performance-measurement: 19-example-performance-measurement.yaml

  schemas:
    SensorAlertSettings.avsc: SensorAlertSettings.avsc
    SensorData.avsc: SensorData.avsc
    SensorData.csv: SensorData.csv
    SensorData.json: SensorData.json
    SensorData.xsd: SensorData.xsd
    SensorDataNoColor.avsc: SensorDataNoColor.avsc
    WindowedString.avsc: WindowedString.avsc

kafka:
  bootstrap.servers: localhost:9092
  application.id: io.axual.ksml.example.processor
  acks: all
  auto.offset.reset: earliest
  tenant: "dizzl"
  instance: "sandbox"
  environment: "dev"