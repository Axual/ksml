# Processor demonstrating efficient processing patterns

streams:
  high_volume_events:
    topic: high_volume_events
    keyType: string
    valueType: json

functions:
  efficient_event_processor:
    type: valueTransformer
    globalCode: |
      # Pre-compute expensive operations outside the processing loop
      PRIORITY_EVENTS = {"purchase", "search"}
      MULTIPLIERS = {"electronics": 1.5, "clothing": 1.2, "books": 1.0, "home": 1.3, "sports": 1.1}
      
      # Use efficient data structures and avoid object creation
      def calculate_score(event_type, category, value):
        """Efficient score calculation with minimal object creation"""
        base_score = 10 if event_type in PRIORITY_EVENTS else 5
        category_multiplier = MULTIPLIERS.get(category, 1.0)
        value_component = min(value * 0.1, 10)  # Cap value component
        return round(base_score * category_multiplier + value_component, 2)
        
    code: |
      # Early filtering - discard uninteresting events immediately
      event_type = value.get("type")
      if event_type in ["scroll", "hover"]:
        return None
      
      # Extract needed fields from JSON
      user_id = value.get("user_id")
      category = value.get("category")
      value_amount = value.get("value", 0)
      timestamp = value.get("timestamp")
      product_id = value.get("product_id")
      
      # Efficient processing with pre-computed values
      score = calculate_score(event_type, category, value_amount)
      
      # Build result as JSON for better readability in Kowl UI
      result = {
        "status": "PROCESSED",
        "event_type": event_type,
        "user_id": user_id,
        "product_id": product_id,
        "category": category,
        "score": score,
        "value": round(value_amount, 2),
        "timestamp": timestamp,
        "metadata": value.get("metadata")
      }
      
      # Log only important events to reduce I/O
      if event_type in PRIORITY_EVENTS:
        log.info("High-priority event processed: {} for user {} with score {:.2f}", event_type, user_id, score)
      
      return result
      
    expression: result if result else None
    resultType: json

pipelines:
  efficient_processing_pipeline:
    from: high_volume_events
    via:
      - type: mapValues
        mapper: efficient_event_processor
      - type: filter
        if:
          expression: value is not None
    to:
      topic: processed_events
      keyType: string
      valueType: json