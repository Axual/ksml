{
  "additionalProperties" : false,
  "definitions" : {
    "AggregateOperation" : {
      "additionalProperties" : false,
      "description" : "An aggregate operation",
      "properties" : {
        "adder" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/AggregatorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* (GroupedTable) A function that adds a record to the aggregation result"
        },
        "aggregator" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/AggregatorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* (GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"
        },
        "initializer" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/InitializerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "The initializer function, which generates an initial value for every set of aggregated records"
        },
        "merger" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/MergerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* (SessionWindowedStream, SessionWindowedCogroupedStream) A function that combines two aggregation results"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/SessionStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the result aggregation"
        },
        "subtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/AggregatorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* (GroupedTable) A function that removes a record from the aggregation result"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "aggregate" ]
        }
      },
      "required" : [ "initializer", "type" ],
      "title" : "AggregateOperation",
      "type" : "object"
    },
    "AggregatorDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a aggregator function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the aggregator"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the aggregator. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the aggregator. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the aggregator. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the aggregator",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the aggregator. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "aggregator" ]
        }
      },
      "required" : [ "type" ],
      "title" : "AggregatorDefinition",
      "type" : "object"
    },
    "AggregatorDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a aggregator function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the aggregator"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the aggregator. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the aggregator. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the aggregator. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the aggregator",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the aggregator. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "AggregatorDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "BranchDefinitionWithPipeline" : {
      "additionalProperties" : false,
      "description" : "Defines a branch with sub-pipeline in a BranchOperation",
      "properties" : {
        "as" : {
          "description" : "*(optional)* The name to register the pipeline result under, which can be used as source by follow-up pipelines",
          "type" : "string"
        },
        "branch" : {
          "description" : "*(optional)* Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate",
          "items" : {
            "$ref" : "#/definitions/StringOrInlinePredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          },
          "type" : "array"
        },
        "forEach" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ForEachActionDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that gets called for every message in the stream"
        },
        "if" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Defines the condition under which messages get sent down this branch"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "print" : {
          "$ref" : "#/definitions/PrintOperation",
          "description" : "*(optional)* The specification of where to print messages to",
          "type" : "object"
        },
        "to" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ToTopicDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Ends the pipeline by sending all messages to a stream, table or globalTable, or to an inline defined output topic and optional partitioner"
        },
        "toTopicNameExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ToTopicNameExtractorDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Ends the pipeline by sending all messages to a topic provided by a pre-defined topic name extractor function, or to a topic provided by an inline defined topic name extractor and optional partitioner"
        },
        "via" : {
          "description" : "*(optional)* A series of operations performed on the input stream",
          "items" : {
            "anyOf" : [ {
              "$ref" : "#/definitions/AggregateOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/CogroupOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertKeyValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/CountOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/FilterNotOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/FilterOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/GroupByKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/GroupByOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithGlobalTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithGlobalTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/MergeOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/OuterJoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/OuterJoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/PeekOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ReduceOperationWithAdderAndSubtractor",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ReduceOperationWithReducer",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/RepartitionOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/SuppressOperationUntilTimeLimit",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/SuppressOperationUntilWindowCloses",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ToStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ToTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueToKeyValueListOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueToValueListOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformMetadataOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowBySessionOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithHoppingWindow",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithSlidingWindow",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithTumblingWindow",
              "type" : "object"
            } ]
          },
          "type" : "array"
        }
      },
      "title" : "BranchDefinitionWithPipeline",
      "type" : "object"
    },
    "CogroupOperation" : {
      "additionalProperties" : false,
      "description" : "A cogroup operation",
      "properties" : {
        "aggregator" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/AggregatorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "(GroupedStream, SessionWindowedStream, TimeWindowedStream) The aggregator function, which combines a value with the previous aggregation result and outputs a new aggregation result"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "cogroup" ]
        }
      },
      "required" : [ "aggregator", "type" ],
      "title" : "CogroupOperation",
      "type" : "object"
    },
    "ConvertKeyOperation" : {
      "additionalProperties" : false,
      "description" : "An operation to convert the stream key type to another type. Conversion is only syntactic, eg. from Avro to XML.",
      "properties" : {
        "into" : {
          "description" : "The type to convert the stream key into",
          "type" : "string"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "convertKey" ]
        }
      },
      "required" : [ "into", "type" ],
      "title" : "ConvertKeyOperation",
      "type" : "object"
    },
    "ConvertKeyValueOperation" : {
      "additionalProperties" : false,
      "description" : "An operation to convert the stream key and value types to other types. Conversion is only syntactic, eg. from Avro to XML.",
      "properties" : {
        "into" : {
          "description" : "The tuple type to convert the stream key/value into",
          "type" : "string"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "convertKeyValue" ]
        }
      },
      "required" : [ "into", "type" ],
      "title" : "ConvertKeyValueOperation",
      "type" : "object"
    },
    "ConvertValueOperation" : {
      "additionalProperties" : false,
      "description" : "An operation to convert the stream value type to another type. Conversion is only syntactic, eg. from Avro to XML.",
      "properties" : {
        "into" : {
          "description" : "The type to convert the stream value into",
          "type" : "string"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "convertValue" ]
        }
      },
      "required" : [ "into", "type" ],
      "title" : "ConvertValueOperation",
      "type" : "object"
    },
    "CountOperation" : {
      "additionalProperties" : false,
      "description" : "Count the number of times a key is seen in a given window",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/SessionStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the count operation's result"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "count" ]
        }
      },
      "required" : [ "type" ],
      "title" : "CountOperation",
      "type" : "object"
    },
    "FilterNotOperation" : {
      "additionalProperties" : false,
      "description" : "Filter records based on the inverse result of a predicate function",
      "properties" : {
        "if" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that returns \"false\" when records are accepted, \"true\" otherwise"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the filtered table (only applies to tables, ignored for streams)"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "filterNot" ]
        }
      },
      "required" : [ "if", "type" ],
      "title" : "FilterNotOperation",
      "type" : "object"
    },
    "FilterOperation" : {
      "additionalProperties" : false,
      "description" : "Filter records based on a predicate function",
      "properties" : {
        "if" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that returns \"true\" when records are accepted, \"false\" otherwise"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the filtered table (only applies to tables, ignored for streams)"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "filter" ]
        }
      },
      "required" : [ "if", "type" ],
      "title" : "FilterOperation",
      "type" : "object"
    },
    "ForEachActionDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a foreach action function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the foreach action"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the foreach action. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreach action. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the foreach action. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the foreach action",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the foreach action. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the foreach action uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "forEach" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ForEachActionDefinition",
      "type" : "object"
    },
    "ForEachActionDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a foreach action function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the foreach action"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the foreach action. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreach action. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the foreach action. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the foreach action",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the foreach action. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the foreach action uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "ForEachActionDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "ForeignKeyExtractorDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a foreign key extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the foreign key extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the foreign key extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreign key extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the foreign key extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the foreign key extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the foreign key extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "foreignKeyExtractor" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ForeignKeyExtractorDefinition",
      "type" : "object"
    },
    "ForeignKeyExtractorDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a foreign key extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the foreign key extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the foreign key extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the foreign key extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the foreign key extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the foreign key extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the foreign key extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "ForeignKeyExtractorDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "GeneratorDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a message generator function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the message generator"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the message generator. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the message generator. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the message generator. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the message generator",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the message generator. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "generator" ]
        }
      },
      "required" : [ "type" ],
      "title" : "GeneratorDefinition",
      "type" : "object"
    },
    "GeneratorDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a message generator function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the message generator"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the message generator. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the message generator. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the message generator. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the message generator",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the message generator. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "GeneratorDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "GenericFunctionDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a generic function function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the generic function"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the generic function. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the generic function. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the generic function. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the generic function",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the generic function. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "generic" ]
        }
      },
      "title" : "GenericFunctionDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "GlobalTableDefinition" : {
      "additionalProperties" : false,
      "description" : "Contains a definition of a GlobalTable, which can be referenced by producers and pipelines",
      "properties" : {
        "keyType" : {
          "description" : "The key type of the global table",
          "type" : "string"
        },
        "offsetResetPolicy" : {
          "description" : "*(optional)* Policy that determines what to do when there is no initial offset in Kafka, or if the current offset does not exist any more on the server (e.g. because that data has been deleted)",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType",
            "type" : "object"
          } ],
          "description" : "*(optional)* KeyValue state store definition"
        },
        "timestampExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TimestampExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function extracts the event time from a consumed record"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this global table",
          "type" : "string"
        },
        "valueType" : {
          "description" : "The value type of the global table",
          "type" : "string"
        }
      },
      "required" : [ "keyType", "topic", "valueType" ],
      "title" : "GlobalTableDefinition",
      "type" : "object"
    },
    "GlobalTableDefinitionAsJoinTarget" : {
      "additionalProperties" : false,
      "description" : "Reference to a GlobalTable in a join operation",
      "properties" : {
        "keyType" : {
          "description" : "*(optional)* The key type of the global table",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType",
            "type" : "object"
          } ],
          "description" : "*(optional)* KeyValue state store definition"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this global table",
          "type" : "string"
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the global table",
          "type" : "string"
        }
      },
      "required" : [ "topic" ],
      "title" : "GlobalTableDefinitionAsJoinTarget",
      "type" : "object"
    },
    "GroupByKeyOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to group all messages with the same key together",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the grouped stream"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "groupByKey" ]
        }
      },
      "required" : [ "type" ],
      "title" : "GroupByKeyOperation",
      "type" : "object"
    },
    "GroupByOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to group all messages with together based on a keying function",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueMapperDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Function to map records to a key they can be grouped on"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the grouped stream or table"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "groupBy" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "GroupByOperation",
      "type" : "object"
    },
    "InitializerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a initializer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the initializer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the initializer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the initializer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the initializer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the initializer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the initializer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "initializer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "InitializerDefinition",
      "type" : "object"
    },
    "InitializerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a initializer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the initializer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the initializer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the initializer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the initializer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the initializer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the initializer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "InitializerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "JoinWithGlobalTableOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to join with a table",
      "properties" : {
        "globalTable" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/GlobalTableDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the globalTable, or an inline definition of the globalTable to join with"
        },
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueMapperDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that maps the key value from the stream to the primary key type of the globalTable"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "join" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "globalTable", "mapper", "type", "valueJoiner" ],
      "title" : "JoinWithGlobalTableOperation",
      "type" : "object"
    },
    "JoinWithStreamOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to join with a stream",
      "properties" : {
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The window grace period (the time to admit out-of-order events after the end of the window)"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "otherStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the joined stream"
        },
        "stream" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the stream, or an inline definition of the stream to join with"
        },
        "thisStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the source stream"
        },
        "timeDifference" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The maximum time difference for a join over two streams on the same key"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "join" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "otherStore", "stream", "thisStore", "timeDifference", "type", "valueJoiner" ],
      "title" : "JoinWithStreamOperation",
      "type" : "object"
    },
    "JoinWithTableOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to join with a table",
      "properties" : {
        "foreignKeyExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ForeignKeyExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that can translate the join table value to a primary key"
        },
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The window grace period (the time to admit out-of-order events after the end of the window)"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "otherPartitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records on the join table"
        },
        "partitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records on the primary table"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the joined table (only used for Table-Table joins)"
        },
        "table" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TableDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the table, or an inline definition of the table to join with"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "join" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "table", "type", "valueJoiner" ],
      "title" : "JoinWithTableOperation",
      "type" : "object"
    },
    "KeyTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a key transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the key transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the key transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the key transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the key transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the key transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the key transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the key transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyTransformerDefinition",
      "type" : "object"
    },
    "KeyTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a key transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the key transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the key transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the key transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the key transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the key transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the key transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the key transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "KeyTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValueMapperDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue mapper function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue mapper"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue mapper. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue mapper. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue mapper. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue mapper",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue mapper. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyValueMapper" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValueMapperDefinition",
      "type" : "object"
    },
    "KeyValueMapperDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue mapper function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue mapper"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue mapper. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue mapper. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue mapper. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue mapper",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue mapper. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "KeyValueMapperDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValuePrinterDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue printer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue printer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue printer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue printer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue printer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue printer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue printer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyValuePrinter" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValuePrinterDefinition",
      "type" : "object"
    },
    "KeyValuePrinterDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue printer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue printer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue printer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue printer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue printer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue printer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue printer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "KeyValuePrinterDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValueStateStoreDefinition" : {
      "additionalProperties" : false,
      "description" : "Definition of a keyValue state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the keyValue store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "historyRetention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* (Versioned only) The duration for which old record versions are available for query (cannot be negative)"
        },
        "keyType" : {
          "description" : "*(optional)* The key type of the keyValue store",
          "type" : "string"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this keyValue store, \"false\" otherwise",
          "type" : "boolean"
        },
        "name" : {
          "description" : "*(optional)* The name of the keyValue store. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this keyValue store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "segmentInterval" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "keyValue" ]
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the keyValue store",
          "type" : "string"
        },
        "versioned" : {
          "description" : "*(optional)* \"true\" if elements in the store are versioned, \"false\" otherwise",
          "type" : "boolean"
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValueStateStoreDefinition",
      "type" : "object"
    },
    "KeyValueStateStoreDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Definition of a keyValue state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the keyValue store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "historyRetention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* (Versioned only) The duration for which old record versions are available for query (cannot be negative)"
        },
        "keyType" : {
          "description" : "*(optional)* The key type of the keyValue store",
          "type" : "string"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this keyValue store, \"false\" otherwise",
          "type" : "boolean"
        },
        "name" : {
          "description" : "*(optional)* The name of the keyValue store. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this keyValue store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "segmentInterval" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "keyValue" ]
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the keyValue store",
          "type" : "string"
        },
        "versioned" : {
          "description" : "*(optional)* \"true\" if elements in the store are versioned, \"false\" otherwise",
          "type" : "boolean"
        }
      },
      "title" : "KeyValueStateStoreDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType" : {
      "additionalProperties" : false,
      "description" : "Definition of a keyValue state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the keyValue store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "historyRetention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* (Versioned only) The duration for which old record versions are available for query (cannot be negative)"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this keyValue store, \"false\" otherwise",
          "type" : "boolean"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this keyValue store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "segmentInterval" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Size of segments for storing old record versions (must be positive). Old record versions for the same key in a single segment are stored (updated and accessed) together. The only impact of this parameter is performance. If segments are large and a workload results in many record versions for the same key being collected in a single segment, performance may degrade as a result. On the other hand, historical reads (which access older segments) and out-of-order writes may slow down if there are too many segments."
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "keyValue" ]
        },
        "versioned" : {
          "description" : "*(optional)* \"true\" if elements in the store are versioned, \"false\" otherwise",
          "type" : "boolean"
        }
      },
      "title" : "KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType",
      "type" : "object"
    },
    "KeyValueToKeyValueListTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue-to-keyvaluelist transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue-to-keyvaluelist transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue-to-keyvaluelist transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-keyvaluelist transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue-to-keyvaluelist transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue-to-keyvaluelist transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue-to-keyvaluelist transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue-to-keyvaluelist transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyValueToKeyValueListTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValueToKeyValueListTransformerDefinition",
      "type" : "object"
    },
    "KeyValueToKeyValueListTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue-to-keyvaluelist transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue-to-keyvaluelist transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue-to-keyvaluelist transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-keyvaluelist transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue-to-keyvaluelist transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue-to-keyvaluelist transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue-to-keyvaluelist transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue-to-keyvaluelist transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "KeyValueToKeyValueListTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValueToValueListTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue-to-valuelist transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue-to-valuelist transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue-to-valuelist transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-valuelist transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue-to-valuelist transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue-to-valuelist transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue-to-valuelist transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue-to-valuelist transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyValueToValueListTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValueToValueListTransformerDefinition",
      "type" : "object"
    },
    "KeyValueToValueListTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue-to-valuelist transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue-to-valuelist transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue-to-valuelist transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue-to-valuelist transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue-to-valuelist transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue-to-valuelist transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue-to-valuelist transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue-to-valuelist transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "KeyValueToValueListTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "KeyValueTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "keyValueTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "KeyValueTransformerDefinition",
      "type" : "object"
    },
    "KeyValueTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a keyvalue transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the keyvalue transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the keyvalue transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the keyvalue transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the keyvalue transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the keyvalue transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the keyvalue transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the keyvalue transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "KeyValueTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "LeftJoinWithGlobalTableOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to leftJoin with a globalTable",
      "properties" : {
        "globalTable" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/GlobalTableDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the globalTable, or an inline definition of the globalTable to join with"
        },
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueMapperDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that maps the key value from the stream with the primary key of the globalTable"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "leftJoin" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "globalTable", "mapper", "type", "valueJoiner" ],
      "title" : "LeftJoinWithGlobalTableOperation",
      "type" : "object"
    },
    "LeftJoinWithStreamOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to leftJoin with a stream",
      "properties" : {
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The window grace period (the time to admit out-of-order events after the end of the window)"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "otherStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the leftJoined stream"
        },
        "stream" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the stream, or an inline definition of the stream to leftJoin with"
        },
        "thisStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the source stream"
        },
        "timeDifference" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The maximum time difference for a leftJoin over two streams on the same key"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "leftJoin" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "otherStore", "stream", "thisStore", "timeDifference", "type", "valueJoiner" ],
      "title" : "LeftJoinWithStreamOperation",
      "type" : "object"
    },
    "LeftJoinWithTableOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to leftJoin with a table",
      "properties" : {
        "foreignKeyExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ForeignKeyExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that can translate the join table value to a primary key"
        },
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The window grace period (the time to admit out-of-order events after the end of the window)"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "otherPartitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records on the join table"
        },
        "partitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records on the primary table"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the leftJoined table (only used for Table-Table joins)"
        },
        "table" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TableDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the table, or an inline definition of the table to join with"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "leftJoin" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "table", "type", "valueJoiner" ],
      "title" : "LeftJoinWithTableOperation",
      "type" : "object"
    },
    "MergeOperation" : {
      "additionalProperties" : false,
      "description" : "A merge operation to join two Streams",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "stream" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamDefinition",
            "type" : "object"
          } ],
          "description" : "The stream to merge with"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "merge" ]
        }
      },
      "required" : [ "stream", "type" ],
      "title" : "MergeOperation",
      "type" : "object"
    },
    "MergerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a merger function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the merger"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the merger. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the merger. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the merger. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the merger",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the merger. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "merger" ]
        }
      },
      "required" : [ "type" ],
      "title" : "MergerDefinition",
      "type" : "object"
    },
    "MergerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a merger function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the merger"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the merger. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the merger. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the merger. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the merger",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the merger. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "MergerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "MetadataTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a metadata transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the metadata transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the metadata transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the metadata transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the metadata transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the metadata transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the metadata transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the metadata transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "metadataTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "MetadataTransformerDefinition",
      "type" : "object"
    },
    "MetadataTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a metadata transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the metadata transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the metadata transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the metadata transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the metadata transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the metadata transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the metadata transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the metadata transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "MetadataTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "OuterJoinWithStreamOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to outerJoin with a stream",
      "properties" : {
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The window grace period (the time to admit out-of-order events after the end of the window)"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "otherStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the outerJoined stream"
        },
        "stream" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the stream, or an inline definition of the stream to outerJoin with"
        },
        "thisStore" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Materialized view of the source stream"
        },
        "timeDifference" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The maximum time difference for an outerJoin over two streams on the same key"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "outerJoin" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "otherStore", "stream", "thisStore", "timeDifference", "type", "valueJoiner" ],
      "title" : "OuterJoinWithStreamOperation",
      "type" : "object"
    },
    "OuterJoinWithTableOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to outerJoin with a table",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the outerJoined table"
        },
        "table" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TableDefinitionAsJoinTarget",
            "type" : "object"
          } ],
          "description" : "A reference to the table, or an inline definition of the table to outerJoin with"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "outerJoin" ]
        },
        "valueJoiner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that joins two values"
        }
      },
      "required" : [ "table", "type", "valueJoiner" ],
      "title" : "OuterJoinWithTableOperation",
      "type" : "object"
    },
    "ParameterDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a parameter for a user function",
      "properties" : {
        "defaultValue" : {
          "description" : "*(optional)* The default value for the parameter",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the parameter",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the parameter",
          "type" : "string"
        }
      },
      "required" : [ "name", "type" ],
      "title" : "ParameterDefinition",
      "type" : "object"
    },
    "PeekOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to peek into a stream, without modifying the stream contents",
      "properties" : {
        "forEach" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ForEachActionDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that gets called for every message in the stream"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "peek" ]
        }
      },
      "required" : [ "forEach", "type" ],
      "title" : "PeekOperation",
      "type" : "object"
    },
    "PipelineDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a pipeline through a source, a series of operations to perform on it and a sink operation to close the stream with",
      "properties" : {
        "as" : {
          "description" : "*(optional)* The name to register the pipeline result under, which can be used as source by follow-up pipelines",
          "type" : "string"
        },
        "branch" : {
          "description" : "*(optional)* Defines a single branch, consisting of a condition and a pipeline to execute for messages that fulfil the predicate",
          "items" : {
            "$ref" : "#/definitions/BranchDefinitionWithPipeline",
            "type" : "object"
          },
          "type" : "array"
        },
        "forEach" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ForEachActionDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that gets called for every message in the stream"
        },
        "from" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TopicDefinitionSource",
            "type" : "object"
          } ],
          "description" : "Pipeline source"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "print" : {
          "$ref" : "#/definitions/PrintOperation",
          "description" : "*(optional)* The specification of where to print messages to",
          "type" : "object"
        },
        "to" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ToTopicDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Ends the pipeline by sending all messages to a stream, table or globalTable, or to an inline defined output topic and optional partitioner"
        },
        "toTopicNameExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ToTopicNameExtractorDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Ends the pipeline by sending all messages to a topic provided by a pre-defined topic name extractor function, or to a topic provided by an inline defined topic name extractor and optional partitioner"
        },
        "via" : {
          "description" : "*(optional)* A series of operations performed on the input stream",
          "items" : {
            "anyOf" : [ {
              "$ref" : "#/definitions/AggregateOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/CogroupOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertKeyValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ConvertValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/CountOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/FilterNotOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/FilterOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/GroupByKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/GroupByOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithGlobalTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/JoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithGlobalTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/LeftJoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/MergeOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/OuterJoinWithStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/OuterJoinWithTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/PeekOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ReduceOperationWithAdderAndSubtractor",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ReduceOperationWithReducer",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/RepartitionOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/SuppressOperationUntilTimeLimit",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/SuppressOperationUntilWindowCloses",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ToStreamOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/ToTableOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueToKeyValueListOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformKeyValueToValueListOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformMetadataOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/TransformValueOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowBySessionOperation",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithHoppingWindow",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithSlidingWindow",
              "type" : "object"
            }, {
              "$ref" : "#/definitions/WindowByTimeOperationWithTumblingWindow",
              "type" : "object"
            } ]
          },
          "type" : "array"
        }
      },
      "required" : [ "from" ],
      "title" : "PipelineDefinition",
      "type" : "object"
    },
    "PredicateDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a predicate function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the predicate"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the predicate. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the predicate. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the predicate. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the predicate",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the predicate. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the predicate uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "predicate" ]
        }
      },
      "required" : [ "type" ],
      "title" : "PredicateDefinition",
      "type" : "object"
    },
    "PredicateDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a predicate function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the predicate"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the predicate. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the predicate. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the predicate. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the predicate",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the predicate. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the predicate uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "PredicateDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "PrintOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to print the contents of a pipeline on the screen or to write them to a file",
      "properties" : {
        "filename" : {
          "description" : "*(optional)* The filename to output records to. If nothing is specified, then messages will be printed on stdout.",
          "type" : "string"
        },
        "label" : {
          "description" : "*(optional)* A label to attach to the output records",
          "type" : "string"
        },
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValuePrinterDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function to convert record into a string for output"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        }
      },
      "title" : "PrintOperation",
      "type" : "object"
    },
    "ProducerDefinition" : {
      "additionalProperties" : false,
      "description" : "Definition of a Producer that regularly generates messages for a topic",
      "properties" : {
        "batchSize" : {
          "description" : "*(optional)* The size of batches",
          "type" : "integer"
        },
        "condition" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that validates the generator's result message. Returns \"true\" when the message may be produced on the topic, \"false\" otherwise."
        },
        "count" : {
          "description" : "*(optional)* The number of messages to produce.",
          "type" : "integer"
        },
        "generator" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/GeneratorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "The function that generates records"
        },
        "interval" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The interval with which the generator is called"
        },
        "to" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TopicDefinition",
            "type" : "object"
          } ],
          "description" : "The topic to produce to"
        },
        "until" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A predicate that returns true to indicate producing should stop."
        }
      },
      "required" : [ "generator", "to" ],
      "title" : "ProducerDefinition",
      "type" : "object"
    },
    "ReduceOperationWithAdderAndSubtractor" : {
      "additionalProperties" : false,
      "description" : "Operation to reduce a series of records into a single aggregate result",
      "properties" : {
        "adder" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ReducerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that adds a record to the aggregate result"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the aggregation"
        },
        "subtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ReducerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that removes a record from the aggregate result"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "reduce" ]
        }
      },
      "required" : [ "adder", "subtractor", "type" ],
      "title" : "ReduceOperationWithAdderAndSubtractor",
      "type" : "object"
    },
    "ReduceOperationWithReducer" : {
      "additionalProperties" : false,
      "description" : "Operation to reduce a series of records into a single aggregate result",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "reducer" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ReducerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that computes a new aggregate result"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/SessionStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinition",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the aggregation"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "reduce" ]
        }
      },
      "required" : [ "reducer", "type" ],
      "title" : "ReduceOperationWithReducer",
      "type" : "object"
    },
    "ReducerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a reducer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the reducer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the reducer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the reducer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the reducer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the reducer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the reducer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "reducer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ReducerDefinition",
      "type" : "object"
    },
    "ReducerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a reducer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the reducer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the reducer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the reducer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the reducer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the reducer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the reducer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "ReducerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "RepartitionOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to (re)partition a stream",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "numberOfPartitions" : {
          "description" : "*(optional)* The target number of partitions",
          "type" : "integer"
        },
        "partitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions stream records"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "repartition" ]
        }
      },
      "required" : [ "type" ],
      "title" : "RepartitionOperation",
      "type" : "object"
    },
    "SessionStateStoreDefinition" : {
      "additionalProperties" : false,
      "description" : "Definition of a session state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the session store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "keyType" : {
          "description" : "*(optional)* The key type of the session store",
          "type" : "string"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this session store, \"false\" otherwise",
          "type" : "boolean"
        },
        "name" : {
          "description" : "*(optional)* The name of the session store. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this session store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "retention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The duration for which elements in the session store are retained"
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "session" ]
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the session store",
          "type" : "string"
        }
      },
      "required" : [ "type" ],
      "title" : "SessionStateStoreDefinition",
      "type" : "object"
    },
    "StreamDefinition" : {
      "additionalProperties" : false,
      "description" : "Contains a definition of a Stream, which can be referenced by producers and pipelines",
      "properties" : {
        "keyType" : {
          "description" : "The key type of the stream",
          "type" : "string"
        },
        "offsetResetPolicy" : {
          "description" : "*(optional)* Policy that determines what to do when there is no initial offset in Kafka, or if the current offset does not exist any more on the server (e.g. because that data has been deleted)",
          "type" : "string"
        },
        "timestampExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TimestampExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function extracts the event time from a consumed record"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this stream",
          "type" : "string"
        },
        "valueType" : {
          "description" : "The value type of the stream",
          "type" : "string"
        }
      },
      "required" : [ "keyType", "topic", "valueType" ],
      "title" : "StreamDefinition",
      "type" : "object"
    },
    "StreamDefinitionAsJoinTarget" : {
      "additionalProperties" : false,
      "description" : "Reference to a Stream in a join or merge operation",
      "properties" : {
        "keyType" : {
          "description" : "*(optional)* The key type of the stream",
          "type" : "string"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this stream",
          "type" : "string"
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the stream",
          "type" : "string"
        }
      },
      "required" : [ "topic" ],
      "title" : "StreamDefinitionAsJoinTarget",
      "type" : "object"
    },
    "StreamPartitionerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a stream partitioner function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the stream partitioner"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the stream partitioner. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the stream partitioner. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the stream partitioner",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the stream partitioner. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "streamPartitioner" ]
        }
      },
      "required" : [ "type" ],
      "title" : "StreamPartitionerDefinition",
      "type" : "object"
    },
    "StreamPartitionerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a stream partitioner function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the stream partitioner"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the stream partitioner. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the stream partitioner. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the stream partitioner. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the stream partitioner",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the stream partitioner. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "StreamPartitionerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "StringOrInlinePredicateDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines the condition under which messages get sent down this branch",
      "properties" : {
        "if" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/PredicateDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Defines the condition under which messages get sent down this branch"
        }
      },
      "title" : "StringOrInlinePredicateDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "SuppressOperationUntilTimeLimit" : {
      "additionalProperties" : false,
      "description" : "Operation to suppress messages in the source stream until a time limit is reached",
      "properties" : {
        "bufferFullStrategy" : {
          "description" : "*(optional)* What to do when the buffer is full",
          "enum" : [ "emitEarlyWhenFull", "shutdownWhenFull" ]
        },
        "duration" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The duration for which messages are suppressed"
        },
        "maxBytes" : {
          "description" : "*(optional)* The maximum number of bytes in the buffer",
          "type" : "string"
        },
        "maxRecords" : {
          "description" : "*(optional)* The maximum number of records in the buffer",
          "type" : "string"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "suppress" ]
        },
        "until" : {
          "description" : "The until of the Operation to suppress messages in the source stream until a certain limit is reached",
          "enum" : [ "timeLimit" ]
        }
      },
      "required" : [ "duration", "type", "until" ],
      "title" : "SuppressOperationUntilTimeLimit",
      "type" : "object"
    },
    "SuppressOperationUntilWindowCloses" : {
      "additionalProperties" : false,
      "description" : "Operation to suppress messages in the source stream until a window limit is reached",
      "properties" : {
        "bufferFullStrategy" : {
          "description" : "*(optional)* What to do when the buffer is full",
          "enum" : [ "emitEarlyWhenFull", "shutdownWhenFull" ]
        },
        "maxBytes" : {
          "description" : "*(optional)* The maximum number of bytes in the buffer",
          "type" : "string"
        },
        "maxRecords" : {
          "description" : "*(optional)* The maximum number of records in the buffer",
          "type" : "string"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "suppress" ]
        },
        "until" : {
          "description" : "The until of the Operation to suppress messages in the source stream until a certain limit is reached",
          "enum" : [ "windowCloses" ]
        }
      },
      "required" : [ "type", "until" ],
      "title" : "SuppressOperationUntilWindowCloses",
      "type" : "object"
    },
    "TableDefinition" : {
      "additionalProperties" : false,
      "description" : "Contains a definition of a Table, which can be referenced by producers and pipelines",
      "properties" : {
        "keyType" : {
          "description" : "The key type of the table",
          "type" : "string"
        },
        "offsetResetPolicy" : {
          "description" : "*(optional)* Policy that determines what to do when there is no initial offset in Kafka, or if the current offset does not exist any more on the server (e.g. because that data has been deleted)",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType",
            "type" : "object"
          } ],
          "description" : "*(optional)* KeyValue state store definition"
        },
        "timestampExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TimestampExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function extracts the event time from a consumed record"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this table",
          "type" : "string"
        },
        "valueType" : {
          "description" : "The value type of the table",
          "type" : "string"
        }
      },
      "required" : [ "keyType", "topic", "valueType" ],
      "title" : "TableDefinition",
      "type" : "object"
    },
    "TableDefinitionAsJoinTarget" : {
      "additionalProperties" : false,
      "description" : "Reference to a Table in a join operation",
      "properties" : {
        "keyType" : {
          "description" : "*(optional)* The key type of the table",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreTypeWithImplicitKeyAndValueType",
            "type" : "object"
          } ],
          "description" : "*(optional)* KeyValue state store definition"
        },
        "topic" : {
          "description" : "The name of the Kafka topic for this table",
          "type" : "string"
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the table",
          "type" : "string"
        }
      },
      "required" : [ "topic" ],
      "title" : "TableDefinitionAsJoinTarget",
      "type" : "object"
    },
    "TimestampExtractorDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a timestamp extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the timestamp extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the timestamp extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the timestamp extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the timestamp extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the timestamp extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the timestamp extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "timestampExtractor" ]
        }
      },
      "required" : [ "type" ],
      "title" : "TimestampExtractorDefinition",
      "type" : "object"
    },
    "TimestampExtractorDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a timestamp extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the timestamp extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the timestamp extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the timestamp extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the timestamp extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the timestamp extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the timestamp extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "TimestampExtractorDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "ToStreamOperation" : {
      "additionalProperties" : false,
      "description" : "Convert a Table into a Stream, optionally through a custom key transformer",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that computes the output key for every record"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "toStream" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ToStreamOperation",
      "type" : "object"
    },
    "ToTableOperation" : {
      "additionalProperties" : false,
      "description" : "Convert a Stream into a Table",
      "properties" : {
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the result table"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "toTable" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ToTableOperation",
      "type" : "object"
    },
    "ToTopicDefinition" : {
      "additionalProperties" : false,
      "description" : "Writes out pipeline messages to a topic",
      "properties" : {
        "keyType" : {
          "description" : "*(optional)* The key type of the topic",
          "type" : "string"
        },
        "partitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records in the output topic"
        },
        "topic" : {
          "description" : "The name of the Kafka topic",
          "type" : "string"
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the topic",
          "type" : "string"
        }
      },
      "required" : [ "topic" ],
      "title" : "ToTopicDefinition",
      "type" : "object"
    },
    "ToTopicNameExtractorDefinition" : {
      "additionalProperties" : false,
      "description" : "Writes out pipeline messages to a topic as given by a topic name extractor",
      "properties" : {
        "partitioner" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function that partitions the records in the output topic"
        },
        "topicNameExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TopicNameExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "Reference to a pre-defined topic name extractor, or an inline definition of a topic name extractor"
        }
      },
      "required" : [ "topicNameExtractor" ],
      "title" : "ToTopicNameExtractorDefinition",
      "type" : "object"
    },
    "TopicDefinition" : {
      "additionalProperties" : false,
      "description" : "Contains a definition of a Kafka topic, to be used by producers and pipelines",
      "properties" : {
        "keyType" : {
          "description" : "*(optional)* The key type of the topic",
          "type" : "string"
        },
        "topic" : {
          "description" : "The name of the Kafka topic",
          "type" : "string"
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the topic",
          "type" : "string"
        }
      },
      "required" : [ "topic" ],
      "title" : "TopicDefinition",
      "type" : "object"
    },
    "TopicDefinitionSource" : {
      "additionalProperties" : false,
      "description" : "Contains a definition of a Kafka topic, to be used by producers and pipelines",
      "properties" : {
        "keyType" : {
          "description" : "The key type of the topic",
          "type" : "string"
        },
        "offsetResetPolicy" : {
          "description" : "*(optional)* Policy that determines what to do when there is no initial offset in Kafka, or if the current offset does not exist any more on the server (e.g. because that data has been deleted)",
          "type" : "string"
        },
        "timestampExtractor" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/TimestampExtractorDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* A function extracts the event time from a consumed record"
        },
        "topic" : {
          "description" : "The name of the Kafka topic",
          "type" : "string"
        },
        "valueType" : {
          "description" : "The value type of the topic",
          "type" : "string"
        }
      },
      "required" : [ "keyType", "topic", "valueType" ],
      "title" : "TopicDefinitionSource",
      "type" : "object"
    },
    "TopicNameExtractorDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a topic name extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the topic name extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the topic name extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the topic name extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the topic name extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the topic name extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the topic name extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "topicNameExtractor" ]
        }
      },
      "required" : [ "type" ],
      "title" : "TopicNameExtractorDefinition",
      "type" : "object"
    },
    "TopicNameExtractorDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a topic name extractor function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the topic name extractor"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the topic name extractor. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the topic name extractor. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the topic name extractor. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the topic name extractor",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the topic name extractor. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "TopicNameExtractorDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "TransformKeyOperation" : {
      "additionalProperties" : false,
      "description" : "Convert the key of every record in the stream to another key",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that computes a new key for each record"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "transformKey", "mapKey", "selectKey" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformKeyOperation",
      "type" : "object"
    },
    "TransformKeyValueOperation" : {
      "additionalProperties" : false,
      "description" : "Convert the key/value of every record in the stream to another key/value",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that computes a new key/value for each record"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "map", "transformKeyValue" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformKeyValueOperation",
      "type" : "object"
    },
    "TransformKeyValueToKeyValueListOperation" : {
      "additionalProperties" : false,
      "description" : "Convert a stream by transforming every record into a list of derived records",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueToKeyValueListTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that converts every record of a stream to a list of output records."
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "transformKeyValueToKeyValueList", "flatMap" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformKeyValueToKeyValueListOperation",
      "type" : "object"
    },
    "TransformKeyValueToValueListOperation" : {
      "additionalProperties" : false,
      "description" : "Convert every record in the stream to a list of output records with the same key",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueToValueListTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that converts every key/value into a list of result values, each of which will be combined with the original key to form a new message in the output stream"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "transformKeyValueToValueList", "flatMapValues" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformKeyValueToValueListOperation",
      "type" : "object"
    },
    "TransformMetadataOperation" : {
      "additionalProperties" : false,
      "description" : "Convert the metadata of every record in the stream",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/MetadataTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that converts the metadata (Kafka headers, timestamp) of every record in the stream"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "transformMetadata" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformMetadataOperation",
      "type" : "object"
    },
    "TransformValueOperation" : {
      "additionalProperties" : false,
      "description" : "Convert the value of every record in the stream to another value",
      "properties" : {
        "mapper" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/ValueTransformerDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "A function that converts the value of every record into another value"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "store" : {
          "anyOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/KeyValueStateStoreDefinitionWithImplicitStoreType",
            "type" : "object"
          } ],
          "description" : "*(optional)* Materialized view of the transformed table (only applies to tables, ignored for streams)"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "mapValue", "transformValue", "mapValues" ]
        }
      },
      "required" : [ "mapper", "type" ],
      "title" : "TransformValueOperation",
      "type" : "object"
    },
    "ValueJoinerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a value joiner function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the value joiner"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the value joiner. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value joiner. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the value joiner. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the value joiner",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the value joiner. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "valueJoiner" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ValueJoinerDefinition",
      "type" : "object"
    },
    "ValueJoinerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a value joiner function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the value joiner"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the value joiner. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value joiner. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the value joiner. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the value joiner",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the value joiner. Only required for function types, which are not pre-defined.",
          "type" : "string"
        }
      },
      "title" : "ValueJoinerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "ValueTransformerDefinition" : {
      "additionalProperties" : false,
      "description" : "Defines a value transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the value transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the value transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the value transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the value transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the value transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the value transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "type" : {
          "description" : "The type of the function",
          "enum" : [ "valueTransformer" ]
        }
      },
      "required" : [ "type" ],
      "title" : "ValueTransformerDefinition",
      "type" : "object"
    },
    "ValueTransformerDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Defines a value transformer function, that gets injected into the Kafka Streams topology",
      "properties" : {
        "code" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The (multiline) code of the value transformer"
        },
        "expression" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The expression returned by the value transformer. Only required for functions that return values."
        },
        "globalCode" : {
          "anyOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "integer"
          }, {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Global (multiline) code that gets loaded into the Python context outside of the value transformer. Can be used for defining eg. global variables."
        },
        "name" : {
          "description" : "*(optional)* The name of the value transformer. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "parameters" : {
          "description" : "*(optional)* A list of parameters to be passed into the value transformer",
          "items" : {
            "$ref" : "#/definitions/ParameterDefinition",
            "type" : "object"
          },
          "type" : "array"
        },
        "resultType" : {
          "description" : "*(optional)* The data type returned by the value transformer. Only required for function types, which are not pre-defined.",
          "type" : "string"
        },
        "stores" : {
          "description" : "*(optional)* A list of store names that the value transformer uses. Only required if the function wants to use a state store.",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "title" : "ValueTransformerDefinitionWithImplicitStoreType",
      "type" : "object"
    },
    "WindowBySessionOperation" : {
      "additionalProperties" : false,
      "description" : "Operation to window messages by session, configured by an inactivity gap",
      "properties" : {
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* (Tumbling, Hopping) The grace period, during which out-of-order records can still be processed"
        },
        "inactivityGap" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The inactivity gap, below which two messages are considered to be of the same session"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "windowBySession" ]
        }
      },
      "required" : [ "inactivityGap", "type" ],
      "title" : "WindowBySessionOperation",
      "type" : "object"
    },
    "WindowByTimeOperationWithHoppingWindow" : {
      "additionalProperties" : false,
      "description" : "Operation to window records based on time criteria",
      "properties" : {
        "advanceBy" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The amount of time to increase time windows by"
        },
        "duration" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The duration of time windows"
        },
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The grace period, during which out-of-order records can still be processed"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "windowByTime" ]
        },
        "windowType" : {
          "description" : "The windowType of the time window",
          "enum" : [ "hopping" ]
        }
      },
      "required" : [ "advanceBy", "duration", "type", "windowType" ],
      "title" : "WindowByTimeOperationWithHoppingWindow",
      "type" : "object"
    },
    "WindowByTimeOperationWithSlidingWindow" : {
      "additionalProperties" : false,
      "description" : "Operation to window records based on time criteria",
      "properties" : {
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The grace period, during which out-of-order records can still be processed"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "timeDifference" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The maximum amount of time difference between two records"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "windowByTime" ]
        },
        "windowType" : {
          "description" : "The windowType of the time window",
          "enum" : [ "sliding" ]
        }
      },
      "required" : [ "timeDifference", "type", "windowType" ],
      "title" : "WindowByTimeOperationWithSlidingWindow",
      "type" : "object"
    },
    "WindowByTimeOperationWithTumblingWindow" : {
      "additionalProperties" : false,
      "description" : "Operation to window records based on time criteria",
      "properties" : {
        "duration" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "The duration of time windows"
        },
        "grace" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The grace period, during which out-of-order records can still be processed"
        },
        "name" : {
          "description" : "*(optional)* The name of the operation processor",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the operation",
          "enum" : [ "windowByTime" ]
        },
        "windowType" : {
          "description" : "The windowType of the time window",
          "enum" : [ "tumbling" ]
        }
      },
      "required" : [ "duration", "type", "windowType" ],
      "title" : "WindowByTimeOperationWithTumblingWindow",
      "type" : "object"
    },
    "WindowStateStoreDefinition" : {
      "additionalProperties" : false,
      "description" : "Definition of a window state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the window store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "keyType" : {
          "description" : "*(optional)* The key type of the window store",
          "type" : "string"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this window store, \"false\" otherwise",
          "type" : "boolean"
        },
        "name" : {
          "description" : "*(optional)* The name of the window store. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this window store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "retainDuplicates" : {
          "description" : "*(optional)* Whether or not to retain duplicates",
          "type" : "boolean"
        },
        "retention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The duration for which elements in the window store are retained"
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "window" ]
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the window store",
          "type" : "string"
        },
        "windowSize" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Size of the windows (cannot be negative)"
        }
      },
      "required" : [ "type" ],
      "title" : "WindowStateStoreDefinition",
      "type" : "object"
    },
    "WindowStateStoreDefinitionWithImplicitStoreType" : {
      "additionalProperties" : false,
      "description" : "Definition of a window state store",
      "properties" : {
        "caching" : {
          "description" : "*(optional)* \"true\" if changed to the window store need to be buffered and periodically released, \"false\" to emit all changes directly",
          "type" : "boolean"
        },
        "keyType" : {
          "description" : "*(optional)* The key type of the window store",
          "type" : "string"
        },
        "logging" : {
          "description" : "*(optional)* \"true\" if a changelog topic should be set up on Kafka for this window store, \"false\" otherwise",
          "type" : "boolean"
        },
        "name" : {
          "description" : "*(optional)* The name of the window store. If this field is not defined, then the name is derived from the context.",
          "type" : "string"
        },
        "persistent" : {
          "description" : "*(optional)* \"true\" if this window store needs to be stored on disk, \"false\" otherwise",
          "type" : "boolean"
        },
        "retainDuplicates" : {
          "description" : "*(optional)* Whether or not to retain duplicates",
          "type" : "boolean"
        },
        "retention" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* The duration for which elements in the window store are retained"
        },
        "timestamped" : {
          "description" : "*(optional)* \"true\" if elements in the store are timestamped, \"false\" otherwise",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the state store",
          "enum" : [ "window" ]
        },
        "valueType" : {
          "description" : "*(optional)* The value type of the window store",
          "type" : "string"
        },
        "windowSize" : {
          "anyOf" : [ {
            "type" : "integer"
          }, {
            "type" : "string"
          } ],
          "description" : "*(optional)* Size of the windows (cannot be negative)"
        }
      },
      "title" : "WindowStateStoreDefinitionWithImplicitStoreType",
      "type" : "object"
    }
  },
  "description" : "KSML definition",
  "properties" : {
    "functions" : {
      "description" : "*(optional)* Functions that can be referenced in producers and pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "anyOf" : [ {
            "$ref" : "#/definitions/AggregatorDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/ForEachActionDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/ForeignKeyExtractorDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/GeneratorDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/GenericFunctionDefinitionWithImplicitStoreType",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/InitializerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyTransformerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyValueMapperDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyValuePrinterDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyValueToKeyValueListTransformerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyValueToValueListTransformerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/KeyValueTransformerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/MergerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/MetadataTransformerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/PredicateDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/ReducerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/StreamPartitionerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/TimestampExtractorDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/TopicNameExtractorDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/ValueJoinerDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/ValueTransformerDefinition",
            "type" : "object"
          } ]
        }
      },
      "type" : "object"
    },
    "globalTables" : {
      "description" : "*(optional)* GlobalTables that can be referenced in producers and pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "$ref" : "#/definitions/GlobalTableDefinition",
          "type" : "object"
        }
      },
      "type" : "object"
    },
    "pipelines" : {
      "description" : "*(optional)* Collection of named pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "$ref" : "#/definitions/PipelineDefinition",
          "type" : "object"
        }
      },
      "type" : "object"
    },
    "producers" : {
      "description" : "*(optional)* Collection of named producers",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "$ref" : "#/definitions/ProducerDefinition",
          "type" : "object"
        }
      },
      "type" : "object"
    },
    "stores" : {
      "description" : "*(optional)* State stores that can be referenced in producers and pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "anyOf" : [ {
            "$ref" : "#/definitions/KeyValueStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/SessionStateStoreDefinition",
            "type" : "object"
          }, {
            "$ref" : "#/definitions/WindowStateStoreDefinition",
            "type" : "object"
          } ]
        }
      },
      "type" : "object"
    },
    "streams" : {
      "description" : "*(optional)* Streams that can be referenced in producers and pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "$ref" : "#/definitions/StreamDefinition",
          "type" : "object"
        }
      },
      "type" : "object"
    },
    "tables" : {
      "description" : "*(optional)* Tables that can be referenced in producers and pipelines",
      "patternProperties" : {
        "^[a-zA-Z0-9_]+$" : {
          "$ref" : "#/definitions/TableDefinition",
          "type" : "object"
        }
      },
      "type" : "object"
    }
  },
  "title" : "TopologyDefinition",
  "type" : "object"
}
