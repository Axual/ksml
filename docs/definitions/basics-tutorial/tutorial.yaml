streams:
  input_stream:
    topic: temperature_data
    keyType: string
    valueType: json
  output_stream:
    topic: temperature_data_converted
    keyType: string
    valueType: json

functions:
  temperature_above_threshold:
    type: predicate
    expression: value.get('temperature', 0) > 70

  fahrenheit_to_celsius:
    type: valueTransformer
    expression: |
      {"sensor": key, "temp_fahrenheit": value.get('temperature'), "temp_celsius": (value.get('temperature') - 32) * 5/9}
    resultType: struct

  log_message:
    type: forEach
    parameters:
      - name: prefix
        type: string
    code: |
      msg = prefix + " message" if isinstance(prefix, str) and prefix != "" else "Message"
      log.info("{}: key={}, value={}", msg, key, value)

pipelines:
  tutorial_pipeline:
    from: input_stream
    via:
      - type: filter
        if: temperature_above_threshold
      - type: transformValue
        mapper: fahrenheit_to_celsius
      - type: peek
        forEach:
          code: |
            # Manually call log_message to pass in additional parameters
            log_message(key, value, prefix="Processed")
    to: output_stream