ksml:
  # The examples directory is mounted to /ksml in the Docker container
  configDirectory: .                 # When not set defaults to the working directory
  schemaDirectory: .                 # When not set defaults to the config directory
  storageDirectory: /tmp             # When not set defaults to the default JVM temp directory

  # This section defines if a REST endpoint is opened on the KSML runner, through which
  # state stores and/or readiness / liveness probes can be accessed.
  applicationServer:
    enabled: false                   # Set to true to enable, or false to disable
    host: 0.0.0.0                    # IP address to bind the REST server to
    port: 8080                       # Port number to listen on

  # This section defines whether a Prometheus endpoint is opened to allow metric scraping.
  prometheus:
    enabled: false                   # Set to true to enable, or false to disable
    host: 0.0.0.0                    # IP address to bind the Prometheus agent server to
    port: 9999                       # Port number to listen on

  # This section enables error handling or error ignoring for certain types of errors.
  errorHandling:
    consume:                         # Error handling definitions for consume errors
      log: true                      # Log errors true/false
      logPayload: true               # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ConsumeError       # Definition of the error logger name.
      handler: stopOnFail            # How to proceed after encountering the error. Either continueOnFail or stopOnFail.
    process:
      log: true                      # Log errors true/false
      logPayload: true               # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ProcessError       # Definition of the error logger name.
      handler: continueOnFail        # How to proceed after encountering the error. Either continueOnFail or stopOnFail.
    produce:
      log: true                      # Log errors true/false
      logPayload: true               # Upon error, should the payload of the message be dumped to the log file.
      loggerName: ProduceError       # Definition of the error logger name.
      handler: continueOnFail        # How to proceed after encountering the error. Either continueOnFail or stopOnFail.

  enableProducers: false             # Set to true to allow producer definitions to be parsed in the KSML definitions and be executed.
  enablePipelines: true              # Set to true to allow pipeline definitions to be parsed in the KSML definitions and be executed.

  # This section tells KSML which schema registries are available
  schemaRegistries:
    # Definition of an Apicurio schema registry
    apicurio:
      config:
        apicurio.registry.url: https://apicurio.local  # Replace this with your Apicurio endpoint
        apicurio.registry.auto-register: false
        # Below is an example SSL configuration for Apicurio SR
        # apicurio.rest.request.ssl.truststore.location: /path/to/truststore.jks
        # apicurio.rest.request.ssl.truststore.password: password
        # apicurio.rest.request.ssl.truststore.type: JKS
        # apicurio.rest.request.ssl.keystore.location: /path/to/keystore.jks
        # apicurio.rest.request.ssl.keystore.password: password
        # apicurio.rest.request.ssl.keystore.type: JKS
        # apicurio.rest.request.ssl.key.password: password

    # Definition of a Confluent schema registry
    confluent:
      config:
        schema.registry.url: https://confluent.local
        normalize.schemas: true
        auto.register.schemas: false
        # Below is an example SSL configuration for Confluent SR
        # schema.registry.ssl.protocol: TLSv1.3
        # schema.registry.ssl.enabled.protocols: TLSv1.3,TLSv1.2
        # schema.registry.ssl.endpoint.identification.algorithm: ""
        # schema.registry.ssl.keystore.location: /path/to/keystore.jks
        # schema.registry.ssl.keystore.type: JKS
        # schema.registry.ssl.key.password: password
        # schema.registry.ssl.keystore.password: password
        # schema.registry.ssl.truststore.location: /path/to/truststore.jks
        # schema.registry.ssl.truststore.type: JKS
        # schema.registry.ssl.truststore.password: password

  # This section tells KSML which serializers / deserializers handle which notation types
  notations:
    # Definition for "avro" notation
    avro:
      serde: confluent_avro          # For AVRO there are two implementations: apicurio_avro and confluent_avro
      schemaRegistry: confluent
      config:
        # Specify all properties to be passed into Confluent's KafkaAvroSerializer and KafkaAvroDeserializer
        # These override the settings passed in from the schema registry config
        normalize.schemas: false
        auto.register.schemas: true

    # Definition for "jsonschema" notation
    jsonschema:
      serde: apicurio_jsonschema     # For JSON Schema there are two implementations: apicurio_jsonschema and confluent_jsonschema
      schemaRegistry: apicurio
      config:
        # Specify all properties to be passed into Apicurio's JsonSchemaKafkaSerializer and JsonSchemaKafkaDeserializer
        # These override the settings passed in from the schema registry config
        apicurio.registry.auto-register: true
        apicurio.registry.serdes.json-schema.validation-enabled: true

    # Definition for "protobuf" notation
    protobuf:                        # Definition for "protobuf" notation
      serde: apicurio_protobuf       # For Protobuf there are two implementations: apicurio_protobuf and confluent_protobuf
      schemaRegistry: apicurio
      config:
        # Specify all properties to be passed into Apicurio's ProtobufKafkaSerializer and ProtobufKafkaDeserializer
        # These override the settings passed in from the schema registry config
        apicurio.registry.auto-register: false

  # Path to your KSML definition files
  definitions:
    namespace1: path/to/your/ksml/definition1.yaml
    namespace2: path/to/your/ksml/definition2.yaml
    # Extend with more definitions if necessary. All definitions will run in their own namespace within KSML, but there
    # are some constraints, such as stream definitions may not define conflicting key/value types in different
    # definitions.

kafka:
  bootstrap.servers: your-kafka-broker:9092
  # Add any other Kafka client properties here
  url: http://your-schema-registry:8081
  # Add any other Schema Registry properties here
