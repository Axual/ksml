streams:
  transactions:
    topic: credit_card_transactions
    keyType: string  # transaction_id
    valueType: json  # transaction data

  high_value_transactions:
    topic: high_value_transactions
    keyType: string  # transaction_id
    valueType: json  # transaction data

  unusual_location_alerts:
    topic: unusual_location_alerts
    keyType: string  # card_id
    valueType: json  # alert data

  velocity_alerts:
    topic: transaction_velocity_alerts
    keyType: string  # card_id
    valueType: json  # alert data

  fraud_alerts:
    topic: fraud_alerts
    keyType: string  # transaction_id
    valueType: json  # consolidated alert data

stores:
  customer_transaction_history:
    type: keyValue
    persistent: true

  card_location_history:
    type: keyValue
    persistent: true

functions:
  check_high_value:
    type: filter
    parameters:
      - name: value
        type: object
    code: |
      # Define thresholds for different merchant categories
      thresholds = {
        "electronics": 1000,
        "jewelry": 2000,
        "travel": 3000,
        "default": 500
      }
      
      category = value.get("merchant", {}).get("category", "default")
      threshold = thresholds.get(category, thresholds["default"])
      
      return value.get("amount", 0) > threshold

  create_high_value_alert:
    type: mapValues
    parameters:
      - name: value
        type: object
    code: |
      return {
        "transaction_id": value.get("transaction_id"),
        "timestamp": value.get("timestamp"),
        "customer_id": value.get("customer_id"),
        "card_id": value.get("card_id"),
        "merchant": value.get("merchant"),
        "amount": value.get("amount"),
        "alert_type": "high_value_transaction",
        "risk_score": min(100, value.get("amount") / 10)  # Simple scoring based on amount
      }

  check_unusual_location:
    type: process
    parameters:
      - name: key
        type: string
      - name: value
        type: object
      - name: store
        type: keyValueStore
    code: |
      card_id = value.get("card_id")
      current_country = value.get("merchant", {}).get("location", {}).get("country")
      current_state = value.get("merchant", {}).get("location", {}).get("state")
      
      # Get location history for this card
      location_history = store.get(card_id)
      
      if location_history is None:
        # First transaction for this card, initialize history
        location_history = {
          "last_countries": [current_country],
          "last_states": [current_state],
          "last_transaction_time": value.get("timestamp")
        }
        store.put(card_id, location_history)
        return None  # No alert for first transaction
      
      # Check for unusual location
      unusual_location = False
      time_since_last = value.get("timestamp") - location_history.get("last_transaction_time", 0)
      
      # If transaction is in a different country than any in history
      if current_country not in location_history.get("last_countries", []):
        unusual_location = True
      
      # If transaction is in a different state and happened within 2 hours of last transaction
      elif (current_state not in location_history.get("last_states", []) and 
            time_since_last < 7200000):  # 2 hours in milliseconds
        unusual_location = True
      
      # Update location history (keep last 3)
      last_countries = location_history.get("last_countries", [])
      if current_country not in last_countries:
        last_countries.append(current_country)
      if len(last_countries) > 3:
        last_countries = last_countries[-3:]
      
      last_states = location_history.get("last_states", [])
      if current_state not in last_states:
        last_states.append(current_state)
      if len(last_states) > 3:
        last_states = last_states[-3:]
      
      location_history = {
        "last_countries": last_countries,
        "last_states": last_states,
        "last_transaction_time": value.get("timestamp")
      }
      store.put(card_id, location_history)
      
      if unusual_location:
        return {
          "transaction_id": value.get("transaction_id"),
          "timestamp": value.get("timestamp"),
          "customer_id": value.get("customer_id"),
          "card_id": card_id,
          "current_location": {
            "country": current_country,
            "state": current_state
          },
          "previous_locations": {
            "countries": location_history.get("last_countries", [])[:-1],
            "states": location_history.get("last_states", [])[:-1]
          },
          "time_since_last_transaction": time_since_last,
          "alert_type": "unusual_location",
          "risk_score": 70 if current_country not in location_history.get("last_countries", [])[:-1] else 40
        }
      else:
        return None

  check_transaction_velocity:
    type: process
    parameters:
      - name: key
        type: string
      - name: value
        type: object
      - name: store
        type: keyValueStore
    code: |
      card_id = value.get("card_id")
      current_time = value.get("timestamp")
      
      # Get transaction history for this card
      history = store.get(card_id)
      
      if history is None:
        # First transaction for this card, initialize history
        history = {
          "transaction_times": [current_time],
          "transaction_count_1h": 1,
          "transaction_count_24h": 1,
          "total_amount_24h": value.get("amount", 0)
        }
        store.put(card_id, history)
        return None  # No alert for first transaction
      
      # Update transaction history
      transaction_times = history.get("transaction_times", [])
      transaction_times.append(current_time)
      
      # Keep only transactions from the last 24 hours
      one_day_ago = current_time - 86400000  # 24 hours in milliseconds
      transaction_times = [t for t in transaction_times if t > one_day_ago]
      
      # Count transactions in the last hour
      one_hour_ago = current_time - 3600000  # 1 hour in milliseconds
      transaction_count_1h = sum(1 for t in transaction_times if t > one_hour_ago)
      
      # Calculate total amount in the last 24 hours
      total_amount_24h = history.get("total_amount_24h", 0) + value.get("amount", 0)
      if len(transaction_times) < len(history.get("transaction_times", [])):
        # Some transactions dropped out of the 24h window, recalculate total
        # In a real system, you would store individual transaction amounts
        # This is simplified for the example
        total_amount_24h = value.get("amount", 0) * len(transaction_times)
      
      # Update history
      history = {
        "transaction_times": transaction_times,
        "transaction_count_1h": transaction_count_1h,
        "transaction_count_24h": len(transaction_times),
        "total_amount_24h": total_amount_24h
      }
      store.put(card_id, history)
      
      # Check for velocity anomalies
      velocity_alert = None
      
      # More than 5 transactions in an hour
      if transaction_count_1h > 5:
        velocity_alert = {
          "transaction_id": value.get("transaction_id"),
          "timestamp": value.get("timestamp"),
          "customer_id": value.get("customer_id"),
          "card_id": card_id,
          "transactions_last_hour": transaction_count_1h,
          "transactions_last_day": len(transaction_times),
          "total_amount_24h": total_amount_24h,
          "alert_type": "high_transaction_velocity",
          "risk_score": min(100, transaction_count_1h * 10)
        }
      
      return velocity_alert

  calculate_fraud_score:
    type: mapValues
    parameters:
      - name: value
        type: object
    code: |
      # Base risk score from the alert
      risk_score = value.get("risk_score", 0)
      
      # Additional factors
      alert_type = value.get("alert_type", "")
      
      # Adjust score based on transaction type
      if value.get("transaction_type") == "online":
        risk_score += 10
      
      # Adjust score based on merchant category
      high_risk_categories = ["electronics", "jewelry", "digital_goods"]
      if value.get("merchant", {}).get("category") in high_risk_categories:
        risk_score += 15
      
      # Cap the score at 100
      risk_score = min(100, risk_score)
      
      # Add the calculated score to the alert
      value["final_risk_score"] = risk_score
      value["is_likely_fraud"] = risk_score > 70
      
      return value

pipelines:
  # Pipeline for high-value transaction detection
  high_value_detection:
    from: transactions
    filter:
      function: check_high_value
    mapValues:
      function: create_high_value_alert
    to: high_value_transactions

  # Pipeline for unusual location detection
  unusual_location_detection:
    from: transactions
    process:
      function: check_unusual_location
      stores:
        - card_location_history
    to: unusual_location_alerts

  # Pipeline for transaction velocity monitoring
  velocity_monitoring:
    from: transactions
    process:
      function: check_transaction_velocity
      stores:
        - customer_transaction_history
    to: velocity_alerts

  # Pipeline for consolidating alerts and calculating final fraud score
  fraud_scoring:
    from:
      - high_value_transactions
      - unusual_location_alerts
      - velocity_alerts
    mapValues:
      function: calculate_fraud_score
    to: fraud_alerts
