# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/release/1.0.x/docs/ksml-language-spec.json

streams:
  transactions:
    topic: credit_card_transactions
    keyType: string  # transaction_id
    valueType: json  # transaction data

  pattern_alerts:
    topic: transaction_pattern_alerts
    keyType: string  # card_id
    valueType: json  # alert data

  fraud_alerts:
    topic: fraud_alerts
    keyType: string  # transaction_id
    valueType: json  # consolidated alert data

stores:
  customer_transaction_history:
    type: keyValue
    persistent: true
    keyType: string
    valueType: json

## Functions
functions:
  detect_fraud_pattern:
    type: valueTransformer
    code: |
      # Pattern: Small test transaction followed by large transaction
      card_id = value.get("card_id")
      current_amount = value.get("amount", 0)
      
      # Get transaction history
      history = customer_transaction_history.get(card_id)
      
      if history is None or "recent_transactions" not in history:
        # Initialize history
        history = {"recent_transactions": [{"amount": current_amount, "time": value.get("timestamp")}]}
        customer_transaction_history.put(card_id, history)
        return None
      
      # Add current transaction to history
      recent_transactions = history.get("recent_transactions", [])
      recent_transactions.append({"amount": current_amount, "time": value.get("timestamp")})
      
      # Keep only recent transactions (last 24 hours)
      one_day_ago = value.get("timestamp") - 86400000
      recent_transactions = [t for t in recent_transactions if t.get("time", 0) > one_day_ago]
      
      # Sort by time
      recent_transactions.sort(key=lambda x: x.get("time", 0))
      
      # Look for pattern: small transaction (< $5) followed by large transaction within 30 minutes
      pattern_found = False
      for i in range(len(recent_transactions) - 1):
        if (recent_transactions[i].get("amount", 0) < 5 and 
            recent_transactions[i+1].get("amount", 0) > 100 and
            recent_transactions[i+1].get("time", 0) - recent_transactions[i].get("time", 0) < 1800000):  # 30 minutes
          pattern_found = True
          break
      
      # Update history
      history["recent_transactions"] = recent_transactions
      customer_transaction_history.put(card_id, history)
      
      if pattern_found:
        return {
          "transaction_id": value.get("transaction_id"),
          "timestamp": value.get("timestamp"),
          "customer_id": value.get("customer_id"),
          "card_id": card_id,
          "alert_type": "fraud_pattern_detected",
          "pattern_type": "test_then_charge",
          "risk_score": 85
        }
      
      return None
    resultType: struct
    stores:
      - customer_transaction_history

  calculate_fraud_score:
    type: valueTransformer
    code: |
      # Base risk score from the alert
      risk_score = value.get("risk_score", 0)
      
      # Additional factors
      alert_type = value.get("alert_type", "")
      
      # Adjust score based on transaction type
      if value.get("transaction_type") == "online":
        risk_score += 10
      
      # Adjust score based on merchant category
      high_risk_categories = ["electronics", "jewelry", "digital_goods"]
      if value.get("merchant", {}).get("category") in high_risk_categories:
        risk_score += 15
      
      # Cap the score at 100
      risk_score = min(100, risk_score)
      
      # Add the calculated score to the alert
      value["final_risk_score"] = risk_score
      value["is_likely_fraud"] = risk_score > 70


## End of Functions

pipelines:
  # Pipeline for high-value transaction detection
  fraud_pattern_detection:
    from: transactions
    via:
      - type: transformValue
        mapper: detect_fraud_pattern
      - type: filter
        if:
          expression: value is not None
    to: pattern_alerts

  # Pipeline for consolidating alerts and calculating final fraud score
  fraud_scoring_patterns:
    from: pattern_alerts
    via:
      - type: transformValue
        mapper: calculate_fraud_score
    to: fraud_alerts
