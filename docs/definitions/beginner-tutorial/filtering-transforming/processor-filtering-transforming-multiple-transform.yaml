streams:
  input_stream:
    topic: tutorial_input
    keyType: string
    valueType: json
  output_stream:
    topic: filtered_data
    keyType: string
    valueType: json

functions:
  extract_fields:
    type: keyValueMapper
    code: |
      extracted = {
        "device_id": key,
        "temperature": value.get('sensors', {}).get('temperature', {}).get('value'),
        "humidity": value.get('sensors', {}).get('humidity', {}).get('value'),
        "timestamp": value.get('metadata', {}).get('timestamp')
      }
    expression: (key, extracted)
    resultType: (string, json)

  convert_temperature:
    type: valueTransformer
    code: |
      result = {
        "device_id": value.get('device_id'),
        "temperature_c": round((value.get('temperature') - 32) * 5/9, 2) if value.get('temperature') else None,
        "humidity": value.get('humidity'),
        "timestamp": value.get('timestamp')
      }
    expression: result
    resultType: json

  add_heat_index:
    type: valueTransformer
    code: |
      temp_c = value.get('temperature_c')
      humidity = value.get('humidity')
      
      # Calculate heat index if we have both temperature and humidity
      if temp_c is not None and humidity is not None:
        # Convert back to F for heat index calculation
        temp_f = temp_c * 1.8 + 32
        # Simplified heat index formula
        heat_index = temp_f - 0.55 * (1 - humidity / 100) * (temp_f - 58)
        heat_index_c = round((heat_index - 32) * 5/9, 2)
      else:
        heat_index_c = None
      
      result = {
        "device_id": value.get('device_id'),
        "temperature_c": temp_c,
        "humidity": humidity,
        "heat_index_c": heat_index_c,
        "timestamp": value.get('timestamp')
      }
    expression: result
    resultType: json

pipelines:
  multi_transform_pipeline:
    from: input_stream
    via:
      # Step 1: Extract relevant fields
      - type: map
        mapper: extract_fields

      # Step 2: Convert temperature from F to C
      - type: transformValue
        mapper: convert_temperature

      # Step 3: Add calculated fields
      - type: transformValue
        mapper: add_heat_index
    to: output_stream
