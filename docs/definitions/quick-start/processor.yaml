functions:
  add_health_status:
    type: valueTransformer
    code: |
      # Get device metrics
      battery = value.get('battery_percent', 100)
      signal = value.get('signal_strength', 100)
      errors = value.get('error_count', 0)
      
      # Check each condition separately for clarity
      has_low_battery = battery < 20
      has_poor_signal = signal < 50  
      has_high_errors = errors > 5
      
      # Determine if device needs attention
      if has_low_battery or has_poor_signal or has_high_errors:
        health_status = "needs_attention"
      
        # Determine the specific reason
        if has_low_battery:
          reason = "low_battery"
        elif has_poor_signal:
          reason = "poor_signal"
        else:
          reason = "high_errors"
      else:
        health_status = "healthy"
        reason = "ok"
      
      return {
        "device_id": key,
        "battery_percent": battery,
        "signal_strength": signal, 
        "error_count": errors,
        "health_status": health_status,
        "issue_reason": reason
      }
    resultType: json

pipelines:
  device_health_monitor:
    from:
      topic: iot_sensor_data
      keyType: string
      valueType: json
      offsetResetPolicy: latest
    via:
      # Step 1: Only process online devices
      - type: filter
        if:
          expression: value is not None and value.get('status') == 'online'

      # Step 2: Add health status
      - type: transformValue
        mapper: add_health_status

      # Step 3: Log device health
      - type: peek
        forEach:
          code: |
            device = key
            status = value.get('health_status')
            reason = value.get('issue_reason')
            battery = value.get('battery_percent')
            
            if status == "healthy":
              print(f"{device}: Healthy (Battery: {battery}%)")
            else:
              print(f"{device}: Needs attention - {reason}")
    to:
      topic: device_health_alerts
      keyType: string
      valueType: json