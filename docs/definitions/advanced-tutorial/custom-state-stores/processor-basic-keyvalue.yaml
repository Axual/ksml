# Processor demonstrating basic key-value store for session tracking

streams:
  user_activity:
    topic: user_activity
    keyType: string
    valueType: json

stores:
  user_session_store:
    type: keyValue
    keyType: string
    valueType: string
    persistent: true
    caching: true

functions:
  track_user_sessions:
    type: valueTransformer
    stores:
      - user_session_store
    code: |
      import json
      import time
      
      # Extract fields from JSON activity
      if not value:
        return None
      
      action = value.get("action")
      session_id = value.get("session_id")
      duration = value.get("duration_ms")
      timestamp = value.get("timestamp")
      event_id = value.get("event_id")
      page = value.get("page")
      browser = value.get("browser")
      device_type = value.get("device_type")
      location = value.get("location", {})
      
      if not action or not session_id or duration is None:
        return None
      
      # Get existing session data
      session_data_str = user_session_store.get(key)
      if session_data_str:
        session_data = json.loads(session_data_str)
      else:
        session_data = {
          "user_id": key,
          "current_session": None,
          "total_sessions": 0,
          "total_time_ms": 0,
          "actions_count": {},
          "first_seen": timestamp,
          "last_activity": timestamp,
          "devices_used": set(),
          "browsers_used": set(),
          "countries_visited": set(),
          "pages_visited": set()
        }
        # Convert sets to lists for JSON serialization
        session_data["devices_used"] = []
        session_data["browsers_used"] = []
        session_data["countries_visited"] = []
        session_data["pages_visited"] = []
      
      # Track session changes
      session_ended = False
      if session_data["current_session"] != session_id:
        if session_data["current_session"] is not None:
          # Session changed
          session_data["total_sessions"] += 1
          session_ended = True
          log.info("Session ended for user {}: {}", key, session_data["current_session"])
        
        session_data["current_session"] = session_id
        log.info("New session started for user {}: {}", key, session_id)
      
      # Update activity tracking
      session_data["total_time_ms"] += duration
      session_data["last_activity"] = timestamp
      
      if action in session_data["actions_count"]:
        session_data["actions_count"][action] += 1
      else:
        session_data["actions_count"][action] = 1
      
      # Track device/browser/location usage
      if device_type and device_type not in session_data["devices_used"]:
        session_data["devices_used"].append(device_type)
      if browser and browser not in session_data["browsers_used"]:
        session_data["browsers_used"].append(browser)
      if location.get("country") and location["country"] not in session_data["countries_visited"]:
        session_data["countries_visited"].append(location["country"])
      if page and page not in session_data["pages_visited"]:
        session_data["pages_visited"].append(page)
      
      # Store updated session data
      user_session_store.put(key, json.dumps(session_data))
      
      # Generate structured session summary
      result = {
        "stats_type": "USER_SESSION_STATS",
        "user_id": key,
        "current_session": session_id,
        "session_ended": session_ended,
        "activity": {
          "event_id": event_id,
          "action": action,
          "page": page,
          "duration_ms": duration,
          "timestamp": timestamp
        },
        "session_totals": {
          "total_sessions": session_data["total_sessions"],
          "total_time_ms": session_data["total_time_ms"],
          "unique_actions": len(session_data["actions_count"]),
          "action_counts": session_data["actions_count"]
        },
        "user_profile": {
          "first_seen": session_data["first_seen"],
          "last_activity": session_data["last_activity"],
          "devices_used": session_data["devices_used"],
          "browsers_used": session_data["browsers_used"],
          "countries_visited": session_data["countries_visited"],
          "pages_visited": len(session_data["pages_visited"]),
          "most_visited_pages": session_data["pages_visited"][-5:] if len(session_data["pages_visited"]) > 5 else session_data["pages_visited"]
        },
        "current_context": {
          "device_type": device_type,
          "browser": browser,
          "location": location
        }
      }
      
      return result
      
    expression: result if result else None
    resultType: json

pipelines:
  session_tracking_pipeline:
    from: user_activity
    via:
      - type: mapValues
        mapper: track_user_sessions
      - type: filter
        if:
          expression: value is not None
    to:
      topic: user_session_stats
      keyType: string
      valueType: json