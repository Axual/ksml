# Producer for optimized store demo - generates high-volume events

functions:
  generate_high_volume_events:
    type: generator
    globalCode: |
      import random
      import time
      event_counter = 0
      device_ids = [f"device_{i:03d}" for i in range(1, 21)]  # 20 devices
      event_types = ["sensor_reading", "status_update", "error", "heartbeat"]
    code: |
      global event_counter, device_ids, event_types
      
      event_counter += 1
      device_id = random.choice(device_ids)
      event_type = random.choice(event_types)
      
      # Generate JSON event data for better readability in Kowl UI
      current_timestamp = int(time.time() * 1000)
      
      if event_type == "sensor_reading":
        value_data = round(random.uniform(20.0, 80.0), 2)  # Temperature
        unit = "celsius"
      elif event_type == "status_update":
        value_data = random.choice(["online", "offline", "maintenance"])
        unit = None
      elif event_type == "error":
        value_data = f"error_code_{random.randint(100, 999)}"
        unit = None
      else:  # heartbeat
        value_data = "ok"
        unit = None
      
      # Create structured JSON event for better readability in Kowl UI
      device_event = {
        "device_id": device_id,
        "event_type": event_type,
        "value": value_data,
        "timestamp": current_timestamp,
        "event_id": f"evt_{event_counter:06d}",
        "unit": unit,
        "facility": random.choice(["factory_a", "factory_b", "warehouse_c"]),
        "zone": random.choice(["zone_1", "zone_2", "zone_3", "zone_4"]),
        "metadata": {
          "simulation": True,
          "high_volume": True,
          "optimized_processing": True,
          "sequence": event_counter
        }
      }
      
    expression: (device_id, device_event)
    resultType: (string, json)

producers:
  high_volume_producer:
    generator: generate_high_volume_events
    interval: 1s  # High frequency
    to:
      topic: device_events
      keyType: string
      valueType: json