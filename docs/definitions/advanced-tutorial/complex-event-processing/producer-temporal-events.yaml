# Producer for temporal pattern matching - generates time-sensitive events

functions:
  generate_temporal_events:
    type: generator
    globalCode: |
      import random
      import time
      event_counter = 0
      users = ["user_001", "user_002", "user_003"]
      actions = ["login", "view_product", "add_to_cart", "checkout", "logout"]
    code: |
      global event_counter, users, actions
      
      event_counter += 1
      user_id = random.choice(users)
      
      # Create temporal sequences
      if event_counter % 5 == 1:
        action = "login"
      elif event_counter % 5 == 2:
        action = "view_product"
      elif event_counter % 5 == 3:
        action = "add_to_cart"
      elif event_counter % 5 == 4:
        action = "checkout"  # Should happen within 5 minutes of add_to_cart
      else:
        action = random.choice(actions)
      
      current_timestamp = int(time.time() * 1000)
      
      # Create structured JSON event for better readability in Kowl UI
      event = {
        "user_id": user_id,
        "action": action,
        "timestamp": current_timestamp,
        "event_id": f"evt_{event_counter:04d}",
        "session_id": f"session_{user_id}_{event_counter // 10}",
        "sequence_number": event_counter,
        "source": "temporal_generator",
        "metadata": {
          "simulation": True,
          "pattern_type": "temporal_checkout",
          "time_window_minutes": 5
        }
      }
      
      # Add action-specific data
      if action == "view_product":
        event["product_id"] = f"prod_{random.randint(100, 999)}"
      elif action == "add_to_cart":
        event["product_id"] = f"prod_{random.randint(100, 999)}"
        event["quantity"] = random.randint(1, 5)
        event["price"] = round(random.uniform(10, 100), 2)
      elif action == "checkout":
        event["total_amount"] = round(random.uniform(50, 500), 2)
        event["payment_method"] = random.choice(["credit_card", "paypal", "bank_transfer"])
      
    expression: (user_id, event)
    resultType: (string, json)

producers:
  temporal_event_producer:
    generator: generate_temporal_events
    interval: 2s
    to:
      topic: temporal_events
      keyType: string
      valueType: json