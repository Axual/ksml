# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/release/1.0.x/docs/ksml-language-spec.json

# Simple compensating transaction example demonstrating rollback

streams:
  business_transactions:
    topic: business_transactions
    keyType: string
    valueType: json
    
  completed_transactions:
    topic: completed_transactions
    keyType: string
    valueType: json
    
  failed_transactions:
    topic: failed_transactions
    keyType: string
    valueType: json

functions:
  process_transaction:
    type: valueTransformer
    code: |
      transaction_id = value.get("transaction_id")
      transaction_type = value.get("transaction_type")
      completed_steps = []
      
      try:
        # Step 1: Reserve inventory
        log.info("Step 1: Reserving inventory for {}", transaction_id)
        
        # Check for inventory failure based on product_id
        if transaction_type == "order_fulfillment":
          product_id = value.get("order_details", {}).get("product_id", "")
          if "inventory_fail" in product_id:
            log.warn("Step 1: Inventory reservation failed for {}", transaction_id)
            raise RuntimeError("Inventory unavailable for product")
        elif transaction_type == "exchange_order":
          new_product = value.get("exchange_details", {}).get("new_product_id", "")
          if "inventory_fail" in new_product:
            log.warn("Step 1: Inventory reservation failed for exchange {}", transaction_id)
            raise RuntimeError("Exchange product unavailable")
        
        completed_steps.append("inventory_reserved")
        
        # Step 2: Process payment
        log.info("Step 2: Processing payment for {}", transaction_id)
        
        # Check for payment failure
        if transaction_type == "order_fulfillment":
          product_id = value.get("order_details", {}).get("product_id", "")
          if "payment_fail" in product_id:
            log.warn("Step 2: Payment failed for {}", transaction_id)
            # Compensate: Release inventory
            log.info("COMPENSATING: Releasing inventory reservation for {}", transaction_id)
            raise RuntimeError("Payment processing failed")
        elif transaction_type == "exchange_order" and value.get("payment_required"):
          new_product = value.get("exchange_details", {}).get("new_product_id", "")
          if "payment_fail" in new_product:
            log.warn("Step 2: Payment failed for exchange {}", transaction_id)
            log.info("COMPENSATING: Releasing inventory reservation for {}", transaction_id)
            raise RuntimeError("Payment for exchange failed")
        
        completed_steps.append("payment_processed")
        
        # Step 3: Create shipment
        log.info("Step 3: Creating shipment for {}", transaction_id)
        
        # Check for shipping failure
        if transaction_type == "order_fulfillment":
          product_id = value.get("order_details", {}).get("product_id", "")
          if "shipping_fail" in product_id:
            log.warn("Step 3: Shipping failed for {}", transaction_id)
            # Compensate in reverse order
            log.info("COMPENSATING: Cancelling shipment for {}", transaction_id)
            log.info("COMPENSATING: Refunding payment for {}", transaction_id)
            log.info("COMPENSATING: Releasing inventory for {}", transaction_id)
            raise RuntimeError("Shipping service unavailable")
        
        completed_steps.append("shipment_created")
        
        # Success - all steps completed
        log.info("Transaction {} completed successfully", transaction_id)
        return {
          "transaction_id": transaction_id,
          "status": "completed",
          "transaction_type": transaction_type,
          "completed_steps": completed_steps,
          "original_transaction": value
        }
        
      except Exception as e:
        # Transaction failed - compensation already logged
        log.error("Transaction {} failed: {}", transaction_id, str(e))
        return {
          "transaction_id": transaction_id,
          "status": "failed",
          "transaction_type": transaction_type,
          "error": str(e),
          "completed_steps": completed_steps,
          "compensated": True,
          "original_transaction": value
        }
        
    expression: result if 'result' in locals() else value
    resultType: json
  
  is_completed:
    type: predicate
    expression: value.get("status") == "completed"

pipelines:
  compensating_transaction_demo:
    from: business_transactions
    via:
      - type: mapValues
        mapper: process_transaction
    branch:
      - if: is_completed
        to: completed_transactions
      - to: failed_transactions