# Producer for try-catch example - generates sensor data with various error conditions

functions:
  generate_sensor_data:
    type: generator
    globalCode: |
      import random
      counter = 0
    code: |
      global counter
      counter += 1
      
      # Generate different sensor scenarios
      if counter % 5 == 1:
        # Normal reading
        data = {
          "sensor_id": f"sensor_{counter % 3 + 1}",
          "temperature": round(random.uniform(20.0, 80.0), 2),
          "humidity": round(random.uniform(30.0, 90.0), 2)
        }
      elif counter % 5 == 2:
        # Invalid temperature (string instead of number)
        data = {
          "sensor_id": f"sensor_{counter % 3 + 1}",
          "temperature": "invalid",
          "humidity": round(random.uniform(30.0, 90.0), 2)
        }
      elif counter % 5 == 3:
        # Missing humidity field
        data = {
          "sensor_id": f"sensor_{counter % 3 + 1}",
          "temperature": round(random.uniform(20.0, 80.0), 2)
        }
      elif counter % 5 == 4:
        # Extreme values that should trigger warnings
        data = {
          "sensor_id": f"sensor_{counter % 3 + 1}",
          "temperature": round(random.uniform(100.0, 150.0), 2),
          "humidity": round(random.uniform(95.0, 100.0), 2)
        }
      else:
        # Null/None data
        data = None
      
      key = f"sensor_{counter % 3 + 1}"
    expression: (key, data)
    resultType: (string, json)

producers:
  sensor_producer:
    generator: generate_sensor_data
    interval: 2s
    count: 20
    to:
      topic: sensor_readings
      keyType: string
      valueType: json