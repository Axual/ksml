# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/release/1.0.x/docs/ksml-language-spec.json

# Producer for compensating transactions pattern - generates complex business transactions

functions:
  generate_transactions:
    type: generator
    globalCode: |
      import random
      import time
      data_counter = 0
      customers = []
      customers.extend(["customer_001", "customer_002", "customer_003", "customer_004", "customer_005"])
      products = []
      products.extend(["laptop_001", "phone_002", "tablet_003", "inventory_fail", "payment_fail", "shipping_fail"])
      transaction_types = []
      transaction_types.extend(["order_fulfillment", "refund_process", "exchange_order"])
    code: |
      global data_counter, customers, products, transaction_types
      
      data_counter += 1
      
      transaction_type = random.choice(transaction_types)
      customer_id = random.choice(customers)
      
      # Create different transaction scenarios
      transaction = {}
      transaction["transaction_id"] = f"txn_{data_counter:04d}"
      transaction["customer_id"] = customer_id
      transaction["transaction_type"] = transaction_type
      transaction["timestamp"] = int(time.time() * 1000)
      
      if transaction_type == "order_fulfillment":
        # New order that requires inventory, payment, and shipping
        transaction["order_details"] = {
          "product_id": random.choice(products),
          "quantity": random.randint(1, 3),
          "unit_price": round(random.uniform(100.0, 1500.0), 2)
        }
        transaction["payment_info"] = {
          "method": random.choice(["credit_card", "debit_card", "paypal"]),
          "amount": transaction["order_details"]["quantity"] * transaction["order_details"]["unit_price"]
        }
        transaction["shipping_info"] = {
          "address": f"123 Main St, City {random.randint(1, 5)}",
          "method": random.choice(["standard", "express", "overnight"])
        }
      elif transaction_type == "refund_process":
        # Refund that requires payment reversal and inventory return
        transaction["refund_details"] = {
          "original_order_id": f"order_{random.randint(1, 100):03d}",
          "product_id": random.choice(products),
          "quantity": random.randint(1, 2),
          "refund_amount": round(random.uniform(50.0, 800.0), 2),
          "reason": random.choice(["defective", "wrong_item", "customer_change_of_mind"])
        }
      elif transaction_type == "exchange_order":
        # Exchange that requires returning one item and fulfilling another
        transaction["exchange_details"] = {
          "return_product_id": random.choice(products),
          "new_product_id": random.choice(products),
          "quantity": 1,
          "price_difference": round(random.uniform(-100.0, 200.0), 2)
        }
        if transaction["exchange_details"]["price_difference"] > 0:
          transaction["payment_required"] = True
        elif transaction["exchange_details"]["price_difference"] < 0:
          transaction["refund_required"] = True
      
      key = transaction["transaction_id"]
      
    expression: (key, transaction)
    resultType: (string, json)

producers:
  transaction_producer:
    generator: generate_transactions
    interval: 4s
    to:
      topic: business_transactions
      keyType: string
      valueType: json