functions:
  generate_customer_profiles:
    type: generator
    globalCode: |
      import random
      import time
      profile_counter = 0
      customer_ids = ["cust001", "cust002", "cust003", "cust004", "cust005"]
      departments = ["Electronics", "Clothing", "Home & Garden", "Books", "Sports"]
    code: |
      global profile_counter
      
      if profile_counter < len(customer_ids):
        customer_id = customer_ids[profile_counter]
        profile = {
          "customer_id": customer_id,
          "name": f"Customer {customer_id}",
          "email": f"{customer_id}@example.com",
          "tier": random.choice(["bronze", "silver", "gold", "platinum"]),
          "registration_date": "2023-01-15",
          "address": {
            "city": random.choice(["New York", "London", "Tokyo", "Paris"]),
            "country": random.choice(["USA", "UK", "Japan", "France"])
          },
          "updated_at": int(time.time() * 1000)
        }
        
        profile_counter += 1
        result = (customer_id, profile)
      else:
        result = None
    expression: result
    resultType: (string, json)

  generate_customer_preferences:
    type: generator
    globalCode: |
      import random
      import time
      pref_counter = 0
      customer_ids = ["cust001", "cust002", "cust004", "cust005", "cust006"]  # Note: cust003 missing, cust006 extra
      communication_channels = ["email", "sms", "push", "phone"]
    code: |
      global pref_counter
      
      if pref_counter < len(customer_ids):
        customer_id = customer_ids[pref_counter]
        preferences = {
          "customer_id": customer_id,
          "newsletter_subscribed": random.choice([True, False]),
          "preferred_categories": random.sample(["electronics", "clothing", "books", "home", "sports"], k=random.randint(1, 3)),
          "communication_channel": random.choice(communication_channels),
          "language": random.choice(["en", "es", "fr", "de"]),
          "notifications": {
            "promotions": random.choice([True, False]),
            "order_updates": True,
            "new_products": random.choice([True, False])
          },
          "updated_at": int(time.time() * 1000)
        }
        
        pref_counter += 1
        result = (customer_id, preferences)
      else:
        result = None
    expression: result
    resultType: (string, json)

producers:
  customer_profile_producer:
    generator: generate_customer_profiles
    interval: 2s
    count: 5  # 5 customer profiles
    to:
      topic: customer_profiles
      keyType: string
      valueType: json

  customer_preferences_producer:
    generator: generate_customer_preferences
    interval: 3s
    count: 5  # 5 customer preferences (different customers)
    to:
      topic: customer_preferences
      keyType: string
      valueType: json