# Simple producer demonstrating map(string) and map(int) data types

functions:
  generate_preferences:
    type: generator
    resultType: (string, map(string))  # Returns a map with string values
    globalCode: |
      import random
      import time
    code: |
      user_id = f"user_{random.randint(1000, 9999)}"
      
      # Generate preferences map with string values
      preferences = {
        "theme": random.choice(["dark", "light"]),
        "language": random.choice(["en", "es", "fr"]),
        "layout": random.choice(["grid", "list"])
      }
    expression: (user_id, preferences)

  generate_scores:
    type: generator
    resultType: (string, map(int))  # Returns a map with integer values
    globalCode: |
      import random
    code: |
      user_id = f"user_{random.randint(1000, 9999)}"
      
      # Generate scores map with integer values
      scores = {
        "math": random.randint(60, 100),
        "science": random.randint(60, 100),
        "english": random.randint(60, 100)
      }
    expression: (user_id, scores)

streams:
  user_preferences:
    topic: user_preferences
    keyType: string
    valueType: map(string)  # Map with string keys and string values

  user_scores:
    topic: user_scores
    keyType: string
    valueType: map(int)     # Map with string keys and integer values

producers:
  preferences_producer:
    to: user_preferences
    interval: 3000
    generator: generate_preferences

  scores_producer:
    to: user_scores
    interval: 4000
    generator: generate_scores