streams:
  user_activities:
    topic: user_activities
    keyType: string
    valueType: json
    offsetResetPolicy: earliest

  repartitioned_activities:
    topic: repartitioned_activities
    keyType: string
    valueType: json

functions:
  # Custom partitioner that distributes activities by user type
  # Users ending in even numbers get partition 0-1, odd numbers get partition 2-3
  activity_partitioner:
    type: streamPartitioner
    code: |
      # Custom partitioning logic based on user_id pattern
      # This demonstrates intelligent partitioning for user-based processing
      
      if value and "user_id" in value:
        user_id = value["user_id"]
        # Extract user number from user_001, user_002, etc.
        user_num = int(user_id.split("_")[-1])
        
        # Even user numbers (002, 004) -> partitions 0-1
        # Odd user numbers (001, 003, 005) -> partitions 2-3
        if user_num % 2 == 0:
          partition = user_num % 2  # 0 or 1
        else:
          partition = 2 + (user_num % 2)  # 2 or 3
        
        log.debug("Routing user {} (num:{}) to partition {}", 
                  user_id, user_num, partition)
        
        return partition
      
      # Default to partition 0
      return 0
    resultType: integer

pipelines:
  repartition_activities:
    from: user_activities
    via:
      # First, change key from region to user_id for user-based processing
      - type: mapKey
        mapper:
          code: |
            # Extract user_id from the activity to become the new key
            if value and "user_id" in value:
              user_key = value["user_id"]
              log.info("Changing key from region '{}' to user_id '{}'", key, user_key)
              result = user_key
            else:
              result = key
          expression: result
          resultType: string

      # Add processing metadata
      - type: transformValue
        mapper:
          code: |
            # Add repartitioning info to track the transformation
            if value:
              value["processing_info"] = f"Repartitioned by user: {value.get('user_id', 'unknown')}"
              value["original_region"] = key  # Keep track of original region
            result = value
          expression: result
          resultType: json

      # Repartition with custom partitioner for user-based distribution
      - type: repartition
        numberOfPartitions: 4
        partitioner: activity_partitioner

      # Log the repartitioned activity
      - type: peek
        forEach:
          code: |
            if value:
              log.info("Repartitioned activity {}: {} -> user-based partitioning applied", 
                       key, value.get("processing_info", "unknown"))

    # Send to output topic to observe the repartitioning results
    to:
      topic: repartitioned_activities
      keyType: string
      valueType: json