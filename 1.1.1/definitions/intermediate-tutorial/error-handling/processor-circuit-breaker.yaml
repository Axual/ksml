# Circuit breaker pattern to prevent cascading failures

streams:
  service_requests:
    topic: service_requests
    keyType: string
    valueType: json
    
  service_responses:
    topic: service_responses
    keyType: string
    valueType: json
    
  circuit_events:
    topic: circuit_events
    keyType: string
    valueType: json

functions:
  circuit_breaker_handler:
    type: valueTransformer
    globalCode: |
      # Circuit breaker state
      failure_count = 0
      success_count = 0
      circuit_state = "CLOSED"  # CLOSED, OPEN, HALF_OPEN
      last_failure_time = 0
      
      # Configuration
      FAILURE_THRESHOLD = 3
      SUCCESS_THRESHOLD = 2
      TIMEOUT_MS = 10000  # 10 seconds
      
    code: |
      global failure_count, success_count, circuit_state, last_failure_time
      
      import time
      current_time = int(time.time() * 1000)
      
      request_id = value.get("request_id", "unknown")
      should_succeed = value.get("should_succeed", True)
      
      # Check if we should transition from OPEN to HALF_OPEN
      if circuit_state == "OPEN" and (current_time - last_failure_time) > TIMEOUT_MS:
        circuit_state = "HALF_OPEN"
        success_count = 0
        
      # Handle request based on circuit state
      if circuit_state == "OPEN":
        # Circuit is open - reject request immediately
        result = {
          "request_id": request_id,
          "status": "circuit_open",
          "circuit_state": circuit_state,
          "failure_count": failure_count,
          "message": "Circuit breaker is OPEN - request rejected"
        }
      else:
        # Circuit is CLOSED or HALF_OPEN - try to process request
        if should_succeed:
          # Request succeeds
          success_count += 1
          
          if circuit_state == "HALF_OPEN" and success_count >= SUCCESS_THRESHOLD:
            # Reset circuit breaker
            circuit_state = "CLOSED"
            failure_count = 0
            success_count = 0
            
          result = {
            "request_id": request_id,
            "status": "success",
            "circuit_state": circuit_state,
            "success_count": success_count,
            "failure_count": failure_count,
            "service": value.get("service")
          }
        else:
          # Request fails
          failure_count += 1
          success_count = 0
          last_failure_time = current_time
          
          if failure_count >= FAILURE_THRESHOLD:
            circuit_state = "OPEN"
            
          result = {
            "request_id": request_id,
            "status": "failure",
            "circuit_state": circuit_state,
            "failure_count": failure_count,
            "error_type": value.get("error_type", "unknown"),
            "service": value.get("service")
          }
    
    expression: result
    resultType: json

pipelines:
  circuit_breaker_processor:
    from: service_requests
    via:
      - type: transformValue
        mapper: circuit_breaker_handler
      - type: peek
        forEach:
          code: |
            status = value.get("status", "unknown")
            circuit_state = value.get("circuit_state", "unknown")
            req_id = value.get("request_id", "unknown")
            
            if status == "circuit_open":
              log.warn("CIRCUIT OPEN - {}: Request rejected", req_id)
            elif status == "success":
              log.info("REQUEST OK - {} [{}]: Success", req_id, circuit_state)
            else:
              failures = value.get("failure_count", 0)
              log.error("REQUEST FAILED - {} [{}]: {} failures", req_id, circuit_state, failures)
    branch:
      # Route successful requests
      - if:
          expression: value.get("status") == "success"
        to: service_responses
      # Route circuit breaker events and failures
      - to: circuit_events