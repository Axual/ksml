# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/main/docs/ksml-language-spec.json

streams:
  edge_processed_readings:
    topic: edge_processed_readings
    keyType: string
    valueType: json

  room_temperature_stats:
    topic: room_temperature_stats
    keyType: windowed(string)
    valueType: json

pipelines:
  cloud_analytics:
    from: edge_processed_readings
    via:
      - type: transformValue
        mapper:
          code: |
            # Expand abbreviated fields
            return {
              "device_id": value.get("id"),
              "timestamp": value.get("ts"),
              "location": {"room": value.get("loc")},
              "readings": {
                "temperature": value.get("temp"),
                "humidity": value.get("hum")
              }
            }
      - type: groupBy
        mapper:
          expression: value.get("location", {}).get("room")
      - type: windowByTime
        windowType: tumbling
        duration: 20s
      - type: aggregate
        store:
          name: room_temp_window_store
          type: window
          keyType: string
          valueType: json
          windowSize: 20s
          retention: 2m
        initializer:
          expression: |
            {
              "room": None,
              "min_temp": None,
              "max_temp": None,
              "avg_temp": 0.0,
              "count": 0
            }
          resultType: json
        aggregator:
          resultType: json
          code: |
            temp = value.get("readings", {}).get("temperature")
            room = value.get("location", {}).get("room")
            count = aggregatedValue.get("count")
            
            # Handle first reading
            if count == 0:
              return {
                "room": room,
                "min_temp": temp,
                "max_temp": temp,
                "avg_temp": temp,
                "count": 1
              }
            else:
              return {
                "room": room,
                "min_temp": min(aggregatedValue.get("min_temp"), temp),
                "max_temp": max(aggregatedValue.get("max_temp"), temp),
                "avg_temp": (aggregatedValue.get("avg_temp") * count + temp) / (count + 1),
                "count": count + 1
              }
      - type: toStream
      - type: convertKey
        into: json:windowed(string)
    to: room_temperature_stats
