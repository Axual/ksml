# Processor for event correlation - correlates user and system events

streams:
  user_events:
    topic: user_events
    keyType: string
    valueType: json
    
  system_events:
    topic: system_events
    keyType: string
    valueType: json

tables:
  user_context:
    topic: user_events
    keyType: string
    valueType: json

functions:
  join_events:
    type: valueJoiner
    globalCode: |
      import time
    code: |
      # Join system event with user context - create enriched JSON
      current_time = int(time.time() * 1000)
      
      # Extract system event details
      system_event = value1.get("system_event") if value1 else "unknown"
      system_timestamp = value1.get("timestamp") if value1 else current_time
      system_event_id = value1.get("event_id") if value1 else "unknown"
      
      # Create enriched event with correlation data
      enriched_event = {
        "correlation_id": f"corr_{system_event_id}",
        "system_event": value1 if value1 else {},
        "user_context": value2 if value2 else {},
        "correlation_timestamp": current_time,
        "has_user_context": bool(value2),
        "time_since_user_activity": current_time - (value2.get("timestamp", current_time) if value2 else current_time)
      }
      
    expression: enriched_event
    resultType: json
    
  correlate_events:
    type: valueTransformer
    globalCode: |
      import time
    code: |
      # Extract correlation data from enriched event
      if not value:
        return None
      
      system_event = value.get("system_event", {})
      user_context = value.get("user_context", {})
      correlation_id = value.get("correlation_id", "unknown")
      has_user_context = value.get("has_user_context", False)
      time_since_user_activity = value.get("time_since_user_activity", 0)
      current_time = int(time.time() * 1000)
      
      # Extract system and user event details
      system_event_type = system_event.get("system_event", "unknown")
      user_activity = user_context.get("activity", "none") if has_user_context else "none"
      
      # Define correlation patterns and create structured results
      correlation_result = None
      
      if system_event_type == "error" and user_activity == "form_submit":
        log.warn("ERROR after form submit for user {}", key)
        correlation_result = {
          "pattern_type": "FORM_ERROR_CORRELATION",
          "status": "CRITICAL",
          "description": "System error occurred after user form submission",
          "correlation_id": correlation_id,
          "user_id": key,
          "system_event": {
            "type": system_event_type,
            "event_id": system_event.get("event_id"),
            "timestamp": system_event.get("timestamp"),
            "error_details": {
              "error_code": system_event.get("error_code"),
              "error_message": system_event.get("error_message"),
              "severity": system_event.get("severity")
            }
          },
          "user_activity": {
            "type": user_activity,
            "event_id": user_context.get("event_id"),
            "timestamp": user_context.get("timestamp"),
            "form_details": {
              "form_id": user_context.get("form_id"),
              "form_data_length": user_context.get("form_data_length")
            }
          },
          "time_correlation": {
            "time_since_user_activity_ms": time_since_user_activity,
            "correlation_strength": "HIGH" if time_since_user_activity < 5000 else "MEDIUM"
          }
        }
        
      elif system_event_type == "db_query" and user_activity == "page_view":
        log.info("DB query triggered by page view for {}", key)
        correlation_result = {
          "pattern_type": "PAGE_LOAD_CORRELATION",
          "status": "NORMAL",
          "description": "Database query triggered by user page view",
          "correlation_id": correlation_id,
          "user_id": key,
          "system_event": {
            "type": system_event_type,
            "event_id": system_event.get("event_id"),
            "timestamp": system_event.get("timestamp"),
            "db_details": {
              "table_name": system_event.get("table_name"),
              "query_time_ms": system_event.get("query_time_ms"),
              "rows_affected": system_event.get("rows_affected")
            }
          },
          "user_activity": {
            "type": user_activity,
            "event_id": user_context.get("event_id"),
            "timestamp": user_context.get("timestamp"),
            "page_details": {
              "page_url": user_context.get("page_url"),
              "referrer": user_context.get("referrer")
            }
          },
          "time_correlation": {
            "time_since_user_activity_ms": time_since_user_activity,
            "correlation_strength": "HIGH" if time_since_user_activity < 2000 else "MEDIUM"
          }
        }
        
      elif system_event_type == "api_call" and user_activity == "click":
        log.info("API call from user interaction for {}", key)
        correlation_result = {
          "pattern_type": "USER_API_CORRELATION",
          "status": "NORMAL",
          "description": "API call triggered by user click interaction",
          "correlation_id": correlation_id,
          "user_id": key,
          "system_event": {
            "type": system_event_type,
            "event_id": system_event.get("event_id"),
            "timestamp": system_event.get("timestamp"),
            "api_details": {
              "endpoint": system_event.get("endpoint"),
              "response_time_ms": system_event.get("response_time_ms"),
              "status_code": system_event.get("status_code")
            }
          },
          "user_activity": {
            "type": user_activity,
            "event_id": user_context.get("event_id"),
            "timestamp": user_context.get("timestamp"),
            "click_details": {
              "element_id": user_context.get("element_id"),
              "element_type": user_context.get("element_type")
            }
          },
          "time_correlation": {
            "time_since_user_activity_ms": time_since_user_activity,
            "correlation_strength": "HIGH" if time_since_user_activity < 1000 else "MEDIUM"
          }
        }
      
      if correlation_result:
        correlation_result["detection_timestamp"] = current_time
        correlation_result["processing_time"] = current_time - system_event.get("timestamp", current_time)
        correlation_result["metadata"] = {
          "detector": "event_correlation_processor",
          "version": "1.0"
        }
        
      return correlation_result
      
    expression: result if result else None
    resultType: json

pipelines:
  correlation_pipeline:
    from: system_events
    via:
      - type: leftJoin
        table: user_context
        valueJoiner: join_events
      - type: mapValues
        mapper: correlate_events
      - type: filter
        if:
          expression: value is not None
    to:
      topic: correlated_events
      keyType: string
      valueType: json