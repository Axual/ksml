functions:
  generate_click:
    type: generator
    globalCode: |
      import random
      import time
      click_counter = 0
      users = ["user1", "user2", "user3", "user4", "user5"]
      products = ["PROD001", "PROD002", "PROD003", "PROD004", "PROD005"]
    code: |
      global click_counter, users, products
      
      click_counter += 1
      user_id = random.choice(users)
      
      value = {
        "click_id": f"CLK{click_counter:04d}",
        "user_id": user_id,
        "product_id": random.choice(products),
        "page": "product_detail",
        "timestamp": int(time.time() * 1000)
      }
      
      key = user_id
    expression: (key, value)
    resultType: (string, json)

  generate_purchase:
    type: generator
    globalCode: |
      import random
      import time
      purchase_counter = 0
      users = ["user1", "user2", "user3", "user4", "user5"]
      products = ["PROD001", "PROD002", "PROD003", "PROD004", "PROD005"]
    code: |
      global purchase_counter, users, products
      
      # Only generate purchases 30% of the time to simulate conversion
      if random.random() > 0.3:
        # Return a proper tuple with None values to skip generation
        key = None
        value = None
      else:
        purchase_counter += 1
        user_id = random.choice(users)
        
        value = {
          "purchase_id": f"PUR{purchase_counter:04d}",
          "user_id": user_id,
          "product_id": random.choice(products),
          "amount": round(random.uniform(20.0, 300.0), 2),
          "timestamp": int(time.time() * 1000)
        }
        
        key = user_id
    expression: (key, value)
    resultType: (string, json)

producers:
  click_producer:
    generator: generate_click
    interval: 1s
    to:
      topic: product_clicks
      keyType: string
      valueType: json

  purchase_producer:
    generator: generate_purchase
    interval: 3s
    to:
      topic: product_purchases
      keyType: string
      valueType: json