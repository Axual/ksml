# Producer for circuit breaker example - generates service requests with failure patterns

functions:
  generate_service_requests:
    type: generator
    globalCode: |
      import random
      counter = 0
    code: |
      global counter
      counter += 1
      
      # Generate different service request patterns
      if counter <= 5:
        # Initial successful requests
        request = {
          "request_id": f"req_{counter}",
          "service": "user_service",
          "should_succeed": True
        }
      elif counter <= 10:
        # Start failing to trigger circuit breaker
        request = {
          "request_id": f"req_{counter}",
          "service": "user_service",
          "should_succeed": False,
          "error_type": "timeout"
        }
      elif counter <= 15:
        # Continue with failures (circuit should be open)
        request = {
          "request_id": f"req_{counter}",
          "service": "user_service",
          "should_succeed": False,
          "error_type": "connection_failed"
        }
      else:
        # Service recovery - mix of success/failure
        request = {
          "request_id": f"req_{counter}",
          "service": "user_service",
          "should_succeed": random.choice([True, True, False])  # 66% success
        }
      
      key = f"req_{counter}"
    expression: (key, request)
    resultType: (string, json)

producers:
  service_request_producer:
    generator: generate_service_requests
    interval: 2s
    count: 20
    to:
      topic: service_requests
      keyType: string
      valueType: json