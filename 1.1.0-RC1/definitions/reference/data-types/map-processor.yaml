# Simple processor demonstrating map(string) and map(int) usage

streams:
  user_preferences:
    topic: user_preferences
    keyType: string
    valueType: map(string)  # Map with string keys and string values

  user_scores:
    topic: user_scores
    keyType: string
    valueType: map(int)     # Map with string keys and integer values
    
  processed_preferences:
    topic: processed_preferences
    keyType: string
    valueType: map(string)  # Output also as map(string)
    
  processed_scores:
    topic: processed_scores
    keyType: string
    valueType: map(int)     # Output also as map(int)

functions:
  enhance_preferences:
    type: valueTransformer
    resultType: map(string)  # Function returns map(string)
    code: |
      # Add a status field to the preferences map
      enhanced = dict(value)  # Copy input map
      enhanced["status"] = "active"  # Add string value
    expression: enhanced

  calculate_stats:
    type: valueTransformer
    resultType: map(int)     # Function returns map(int)  
    code: |
      # Calculate some statistics from scores map
      scores = dict(value)  # Copy input map
      total = sum(scores.values())
      average = total // len(scores)  # Integer division
      
      stats = dict(scores)  # Start with original scores
      stats["total"] = total      # Add integer values
      stats["average"] = average
    expression: stats

pipelines:
  process_preferences:
    from: user_preferences
    via:
      - type: transformValue
        mapper: enhance_preferences
      - type: peek
        forEach:
          code: |
            log.info("PREFERENCES MAP - User: {}, prefs: {}", key, value)
    to: processed_preferences

  process_scores:
    from: user_scores  
    via:
      - type: transformValue
        mapper: calculate_stats
      - type: peek
        forEach:
          code: |
            log.info("SCORES MAP - User: {}, total: {}, average: {}", 
                   key, value.get("total"), value.get("average"))
    to: processed_scores