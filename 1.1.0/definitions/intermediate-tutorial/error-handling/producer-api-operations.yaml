# Producer for retry strategies example - generates API operations with failure scenarios

functions:
  generate_api_operations:
    type: generator
    globalCode: |
      import random
      counter = 0
    code: |
      global counter
      counter += 1
      
      # Generate different API operation scenarios
      if counter % 5 == 1:
        # Successful operation
        operation = {
          "operation_id": f"op_{counter}",
          "api_endpoint": "/users/create",
          "should_fail": False,
          "retry_count": 0
        }
      elif counter % 5 == 2:
        # Transient network error (retryable)
        operation = {
          "operation_id": f"op_{counter}",
          "api_endpoint": "/users/update", 
          "should_fail": True,
          "failure_type": "network_timeout",
          "retry_count": 0
        }
      elif counter % 5 == 3:
        # Rate limit error (retryable)
        operation = {
          "operation_id": f"op_{counter}",
          "api_endpoint": "/data/fetch",
          "should_fail": True,
          "failure_type": "rate_limit",
          "retry_count": 0
        }
      elif counter % 5 == 4:
        # Permanent error (not retryable)
        operation = {
          "operation_id": f"op_{counter}",
          "api_endpoint": "/users/delete",
          "should_fail": True,
          "failure_type": "not_found",
          "retry_count": 0
        }
      else:
        # Authentication error (not retryable)
        operation = {
          "operation_id": f"op_{counter}",
          "api_endpoint": "/admin/config",
          "should_fail": True,
          "failure_type": "auth_failed",
          "retry_count": 0
        }
      
      key = f"op_{counter}"
    expression: (key, operation)
    resultType: (string, json)

producers:
  api_operation_producer:
    generator: generate_api_operations
    interval: 3s
    count: 15
    to:
      topic: api_operations
      keyType: string
      valueType: json