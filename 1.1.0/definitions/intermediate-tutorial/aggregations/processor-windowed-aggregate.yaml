streams:
  sensor_temperatures:
    topic: sensor_temperatures
    keyType: string
    valueType: double
  
  sensor_window_stats:
    topic: sensor_window_stats
    keyType: string
    valueType: json

functions:
  init_stats:
    type: initializer
    code: |
      stats = {
        "count": 0,
        "sum": 0.0,
        "min": None,
        "max": None
      }
    expression: stats
    resultType: json

  update_stats:
    type: aggregator
    code: |
      # Update count and sum
      aggregatedValue["count"] += 1
      aggregatedValue["sum"] += value
      
      # Update min/max
      if aggregatedValue["min"] is None or value < aggregatedValue["min"]:
        aggregatedValue["min"] = value
      if aggregatedValue["max"] is None or value > aggregatedValue["max"]:
        aggregatedValue["max"] = value
      
      # Calculate average
      aggregatedValue["avg"] = round(aggregatedValue["sum"] / aggregatedValue["count"], 2)
      
      result = aggregatedValue
    expression: result
    resultType: json

  transform_window_key:
    type: keyValueMapper
    code: |
      # Extract window information from the WindowedString key
      sensor_id = key["key"]
      window_start = key["startTime"]
      window_end = key["endTime"]
      
      # Create a new string key with window info
      new_key = f"{sensor_id}_{window_start}_{window_end}"
      
      # Add window metadata to the value
      new_value = {
        "sensor_id": sensor_id,
        "window_start": window_start,
        "window_end": window_end,
        "stats": value
      }
    expression: (new_key, new_value)
    resultType: (string, json)
  
  log_window_stats:
    type: forEach
    code: |
      # Log the transformed results
      sensor_id = value["sensor_id"]
      window_start = value["window_start"]
      window_end = value["window_end"]
      stats = value["stats"]
      
      log.info("Sensor {} | Window [{} - {}] | Stats: {} readings, avg: {}C, min: {}C, max: {}C", 
               sensor_id, window_start, window_end, 
               stats["count"], stats["avg"], stats["min"], stats["max"])

pipelines:
  windowed_temperature_stats:
    from: sensor_temperatures
    via:
      - type: groupByKey
      - type: windowByTime
        windowType: tumbling
        duration: 30s
        grace: 5s
      - type: aggregate
        store:
          type: window
          windowSize: 30s
          retention: 2m
          caching: false
        initializer: init_stats
        aggregator: update_stats
      - type: toStream
      - type: map
        mapper: transform_window_key
      - type: peek
        forEach: log_window_stats
    to: sensor_window_stats