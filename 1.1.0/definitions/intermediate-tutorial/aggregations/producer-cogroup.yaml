functions:
  generate_order:
    type: generator
    globalCode: |
      import random
      import time
      order_counter = 0
      customers = ["alice", "bob", "charlie", "diana", "eve"]
    code: |
      global order_counter, customers
      
      order_counter += 1
      customer = random.choice(customers)
      
      value = {
        "order_id": f"ORD{order_counter:04d}",
        "customer": customer,
        "amount": round(random.uniform(10, 500), 2),
        "timestamp": int(time.time() * 1000)
      }
      
      key = customer
    expression: (key, value)
    resultType: (string, json)

  generate_refund:
    type: generator
    globalCode: |
      import random
      import time
      refund_counter = 0
      customers = ["alice", "bob", "charlie", "diana", "eve"]
    code: |
      global refund_counter, customers
      
      # Generate refunds less frequently
      if random.random() < 0.3:  # 30% chance of refund
        refund_counter += 1
        customer = random.choice(customers)
        
        value = {
          "refund_id": f"REF{refund_counter:04d}",
          "customer": customer,
          "amount": round(random.uniform(5, 100), 2),
          "timestamp": int(time.time() * 1000)
        }
        
        key = customer
      else:
        key = None
        value = None
    expression: (key, value) if key else (None, None)
    resultType: (string, json)

  generate_bonus:
    type: generator
    globalCode: |
      import random
      import time
      bonus_counter = 0
      customers = ["alice", "bob", "charlie", "diana", "eve"]
    code: |
      global bonus_counter, customers
      
      # Generate bonuses rarely
      if random.random() < 0.1:  # 10% chance of bonus
        bonus_counter += 1
        customer = random.choice(customers)
        
        value = {
          "bonus_id": f"BON{bonus_counter:04d}",
          "customer": customer,
          "points": random.randint(10, 100),
          "timestamp": int(time.time() * 1000)
        }
        
        key = customer
      else:
        key = None
        value = None
    expression: (key, value) if key else (None, None)
    resultType: (string, json)

producers:
  order_producer:
    generator: generate_order
    interval: 2s
    to:
      topic: customer_orders
      keyType: string
      valueType: json

  refund_producer:
    generator: generate_refund
    interval: 3s
    to:
      topic: customer_refunds
      keyType: string
      valueType: json

  bonus_producer:
    generator: generate_bonus
    interval: 5s
    to:
      topic: customer_bonuses
      keyType: string
      valueType: json