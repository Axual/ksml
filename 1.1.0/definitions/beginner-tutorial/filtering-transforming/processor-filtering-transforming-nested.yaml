streams:
  input_stream:
    topic: tutorial_input
    keyType: string
    valueType: json
  output_stream:
    topic: filtered_data
    keyType: string
    valueType: json

functions:
  transform_nested_data:
    type: keyValueMapper
    code: |
      # Create a new structure with flattened and transformed data
      result = {
        "device_id": key,
        "timestamp": value.get('metadata', {}).get('timestamp'),
        "readings": {}
      }
      
      # Extract and transform sensor readings
      sensors = value.get('sensors', {})
      for sensor_type, reading in sensors.items():
        # Convert temperature from F to C if needed
        if sensor_type == 'temperature' and reading.get('unit') == 'F':
          celsius = (reading.get('value') - 32) * 5/9
          result['readings'][sensor_type] = {
            'value': round(celsius, 2),
            'unit': 'C',
            'original_value': reading.get('value'),
            'original_unit': 'F'
          }
        else:
          result['readings'][sensor_type] = reading
      
      # Keep the same key
      new_key = key
      new_value = result
    expression: (new_key, new_value)
    resultType: (string, json)

pipelines:
  transform_pipeline:
    from: input_stream
    via:
      - type: map
        mapper: transform_nested_data
    to: output_stream
