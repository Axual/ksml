# Demonstrates processing of union types in KSML
streams:
  optional_messages:
    topic: optional_messages
    keyType: string
    valueType: union(null, json)  # Input as union type
  
  processed_messages:
    topic: processed_messages
    keyType: string
    valueType: json  # Output as JSON

functions:
  # This function accepts a union type
  process_optional:
    type: valueTransformer
    code: |
      # Handle union type (null or JSON message)
      if value is None:
        # Handle null case
        return {
          "status": "empty",
          "message": "No content received",
          "processed_at": int(time.time() * 1000)
        }
      else:
        # Handle JSON message case
        return {
          "status": "processed",
          "original_id": value.get("id"),
          "content_length": len(value.get("content", "")),
          "processed_at": int(time.time() * 1000)
        }
    # Function signature shows it processes union type
    resultType: json
    globalCode: |
      import time

pipelines:
  process_optional_messages:
    from: optional_messages
    via:
      # Transform the union type value
      - type: transformValue
        mapper: process_optional
      
      # Log the processing result
      - type: peek
        forEach:
          code: |
            status = value.get("status")
            if status == "empty":
              log.info("Received null value for key: {}", key)
            else:
              log.info("Processed message {} for key: {}", 
                       value.get("original_id"), key)
    
    to: processed_messages