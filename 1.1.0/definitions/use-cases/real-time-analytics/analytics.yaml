# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/main/docs/ksml-language-spec.json

streams:
  transactions:
    topic: ecommerce_transactions
    keyType: string  # transaction_id
    valueType: json  # transaction data

  sales_by_category:
    topic: sales_by_category
    keyType: string  # product_category
    valueType: json  # aggregated sales data

  avg_order_value:
    topic: avg_order_value
    keyType: windowed(string)  # time window
    valueType: json  # average order value

  transactions_by_region:
    topic: transactions_by_region
    keyType: string  # region
    valueType: string  # transaction count

functions:
  calculate_total:
    type: aggregator
    resultType: json
    code: |
      if aggregatedValue is None:
        return {"total_sales": value.get("price") * value.get("quantity"), "count": 1}
      else:
        return {
          "total_sales": aggregatedValue.get("total_sales") + (value.get("price") * value.get("quantity")),
          "count": aggregatedValue.get("count") + 1
        }
  
  calculate_window_total:
    type: aggregator
    resultType: json
    code: |
      if aggregate is None:
        return {"total_sales": value.get("price") * value.get("quantity"), "count": 1}
      else:
        return {
          "total_sales": aggregate.get("total_sales") + (value.get("price") * value.get("quantity")),
          "count": aggregate.get("count") + 1
        }

pipelines:
  # Pipeline for sales by category
  sales_by_category_pipeline:
    from: transactions
    via:
      - type: selectKey
        mapper:
          expression: value.get("product_category")
      - type: groupByKey
      - type: aggregate
        initializer:
          expression: '{"total_sales": 0, "count": 0}'
          resultType: json
        aggregator: calculate_total
        store:
          name: category_store
          type: keyValue
          keyType: string
          valueType: json
      - type: toStream
    to: sales_by_category

  # Pipeline for average order value (windowed)
  avg_order_value_pipeline:
    from: transactions
    via:
      - type: groupBy
        mapper:
          expression: '"all"'  # Use a constant key to aggregate all transactions
          resultType: string
      - type: windowByTime
        windowType: tumbling
        duration: 10s
      - type: aggregate
        store:
          name: avg_order_store_10s
          type: window
          keyType: string
          valueType: json
          windowSize: 10s
          retention: 30s
        initializer:
          expression: '{"total_sales": 0.0, "count": 0}'
          resultType: json
        aggregator:
          expression: '{"total_sales": aggregatedValue.get("total_sales") + (value.get("price") * value.get("quantity")), "count": aggregatedValue.get("count") + 1}'
          resultType: json
      - type: suppress
        until: windowCloses
      - type: toStream
      - type: convertKey
        into: json:windowed(string)
      - type: mapValues
        mapper:
          expression: '{"avg_order_value": value.get("total_sales") / value.get("count") if value and value.get("count") and value.get("count") > 0 else 0}'
          resultType: json
    to: avg_order_value

  #   Pipeline for transactions by region
  transactions_by_region_pipeline:
    from: transactions
    via:
      - type: selectKey
        mapper:
          expression: value.get("region")
      - type: groupByKey
      - type: count
      - type: toStream
      - type: convertValue
        into: string
    to: transactions_by_region
